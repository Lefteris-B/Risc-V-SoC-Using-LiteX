// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : terasic_de10lite.v
// Device     : 10M50DAF484C7G
// LiteX sha1 : 552d7bdb
// Date       : 2022-08-15 13:04:53
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module terasic_de10lite (
	input  wire clk50,
	output wire sdram_clock,
	output reg  serial_tx,
	input  wire serial_rx,
	output wire vga_hsync_n,
	output wire vga_vsync_n,
	output wire [3:0] vga_r,
	output wire [3:0] vga_g,
	output wire [3:0] vga_b,
	output wire user_led0,
	output wire user_led1,
	output wire user_led2,
	output wire user_led3,
	output wire user_led4,
	output wire user_led5,
	output wire user_led6,
	output wire user_led7,
	output wire user_led8,
	output wire user_led9
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  main_rst = 1'd0;
wire sys_clk;
wire sys_rst;
wire sys_ps_clk;
wire sys_ps_rst;
wire vga_clk;
wire vga_rst;
wire main_reset;
wire main_locked;
wire main_clkin;
wire main_clkout0;
wire main_clkout1;
wire main_clkout2;
reg  main_basesoc_soc_rst = 1'd0;
wire main_basesoc_cpu_rst;
reg  [1:0] main_basesoc_reset_storage = 2'd0;
reg  main_basesoc_reset_re = 1'd0;
reg  [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg  main_basesoc_scratch_re = 1'd0;
wire [31:0] main_basesoc_bus_errors_status;
wire main_basesoc_bus_errors_we;
reg  main_basesoc_bus_errors_re = 1'd0;
wire main_basesoc_bus_error;
reg  [31:0] main_basesoc_bus_errors = 32'd0;
wire main_basesoc_reset;
reg  [31:0] main_basesoc_interrupt = 32'd0;
wire [29:0] main_basesoc_ibus_adr;
wire [31:0] main_basesoc_ibus_dat_w;
wire [31:0] main_basesoc_ibus_dat_r;
wire [3:0] main_basesoc_ibus_sel;
wire main_basesoc_ibus_cyc;
wire main_basesoc_ibus_stb;
wire main_basesoc_ibus_ack;
wire main_basesoc_ibus_we;
wire [2:0] main_basesoc_ibus_cti;
wire [1:0] main_basesoc_ibus_bte;
wire main_basesoc_ibus_err;
wire [29:0] main_basesoc_dbus_adr;
wire [31:0] main_basesoc_dbus_dat_w;
wire [31:0] main_basesoc_dbus_dat_r;
wire [3:0] main_basesoc_dbus_sel;
wire main_basesoc_dbus_cyc;
wire main_basesoc_dbus_stb;
wire main_basesoc_dbus_ack;
wire main_basesoc_dbus_we;
wire [2:0] main_basesoc_dbus_cti;
wire [1:0] main_basesoc_dbus_bte;
wire main_basesoc_dbus_err;
reg  [31:0] main_basesoc_vexriscv = 32'd0;
wire [29:0] main_basesoc_ram_bus_adr;
wire [31:0] main_basesoc_ram_bus_dat_w;
wire [31:0] main_basesoc_ram_bus_dat_r;
wire [3:0] main_basesoc_ram_bus_sel;
wire main_basesoc_ram_bus_cyc;
wire main_basesoc_ram_bus_stb;
reg  main_basesoc_ram_bus_ack = 1'd0;
wire main_basesoc_ram_bus_we;
wire [2:0] main_basesoc_ram_bus_cti;
wire [1:0] main_basesoc_ram_bus_bte;
reg  main_basesoc_ram_bus_err = 1'd0;
reg  main_basesoc_adr_burst = 1'd0;
wire [14:0] main_basesoc_adr;
wire [31:0] main_basesoc_dat_r;
wire [29:0] main_basesoc_interface0_ram_bus_adr;
wire [31:0] main_basesoc_interface0_ram_bus_dat_w;
wire [31:0] main_basesoc_interface0_ram_bus_dat_r;
wire [3:0] main_basesoc_interface0_ram_bus_sel;
wire main_basesoc_interface0_ram_bus_cyc;
wire main_basesoc_interface0_ram_bus_stb;
reg  main_basesoc_interface0_ram_bus_ack = 1'd0;
wire main_basesoc_interface0_ram_bus_we;
wire [2:0] main_basesoc_interface0_ram_bus_cti;
wire [1:0] main_basesoc_interface0_ram_bus_bte;
reg  main_basesoc_interface0_ram_bus_err = 1'd0;
reg  main_basesoc_sram0_adr_burst = 1'd0;
wire [10:0] main_basesoc_sram0_adr;
wire [31:0] main_basesoc_sram0_dat_r;
reg  [3:0] main_basesoc_sram0_we = 4'd0;
wire [31:0] main_basesoc_sram0_dat_w;
wire [29:0] main_basesoc_interface1_ram_bus_adr;
wire [31:0] main_basesoc_interface1_ram_bus_dat_w;
wire [31:0] main_basesoc_interface1_ram_bus_dat_r;
wire [3:0] main_basesoc_interface1_ram_bus_sel;
wire main_basesoc_interface1_ram_bus_cyc;
wire main_basesoc_interface1_ram_bus_stb;
reg  main_basesoc_interface1_ram_bus_ack = 1'd0;
wire main_basesoc_interface1_ram_bus_we;
wire [2:0] main_basesoc_interface1_ram_bus_cti;
wire [1:0] main_basesoc_interface1_ram_bus_bte;
reg  main_basesoc_interface1_ram_bus_err = 1'd0;
reg  main_basesoc_sram1_adr_burst = 1'd0;
wire [13:0] main_basesoc_sram1_adr;
wire [31:0] main_basesoc_sram1_dat_r;
reg  [3:0] main_basesoc_sram1_we = 4'd0;
wire [31:0] main_basesoc_sram1_dat_w;
wire main_basesoc_tx_sink_valid;
reg  main_basesoc_tx_sink_ready = 1'd0;
wire main_basesoc_tx_sink_first;
wire main_basesoc_tx_sink_last;
wire [7:0] main_basesoc_tx_sink_payload_data;
reg  [7:0] main_basesoc_tx_data = 8'd0;
reg  [3:0] main_basesoc_tx_count = 4'd0;
reg  main_basesoc_tx_enable = 1'd0;
reg  main_basesoc_tx_tick = 1'd0;
reg  [31:0] main_basesoc_tx_phase = 32'd0;
reg  main_basesoc_rx_source_valid = 1'd0;
wire main_basesoc_rx_source_ready;
reg  main_basesoc_rx_source_first = 1'd0;
reg  main_basesoc_rx_source_last = 1'd0;
reg  [7:0] main_basesoc_rx_source_payload_data = 8'd0;
reg  [7:0] main_basesoc_rx_data = 8'd0;
reg  [3:0] main_basesoc_rx_count = 4'd0;
reg  main_basesoc_rx_enable = 1'd0;
reg  main_basesoc_rx_tick = 1'd0;
reg  [31:0] main_basesoc_rx_phase = 32'd0;
wire main_basesoc_rx_rx;
reg  main_basesoc_rx_rx_d = 1'd0;
reg  main_basesoc_uart_rxtx_re = 1'd0;
wire [7:0] main_basesoc_uart_rxtx_r;
reg  main_basesoc_uart_rxtx_we = 1'd0;
wire [7:0] main_basesoc_uart_rxtx_w;
wire main_basesoc_uart_txfull_status;
wire main_basesoc_uart_txfull_we;
reg  main_basesoc_uart_txfull_re = 1'd0;
wire main_basesoc_uart_rxempty_status;
wire main_basesoc_uart_rxempty_we;
reg  main_basesoc_uart_rxempty_re = 1'd0;
wire main_basesoc_uart_irq;
wire main_basesoc_uart_tx_status;
reg  main_basesoc_uart_tx_pending = 1'd0;
wire main_basesoc_uart_tx_trigger;
reg  main_basesoc_uart_tx_clear = 1'd0;
reg  main_basesoc_uart_tx_trigger_d = 1'd0;
wire main_basesoc_uart_rx_status;
reg  main_basesoc_uart_rx_pending = 1'd0;
wire main_basesoc_uart_rx_trigger;
reg  main_basesoc_uart_rx_clear = 1'd0;
reg  main_basesoc_uart_rx_trigger_d = 1'd0;
wire main_basesoc_uart_tx0;
wire main_basesoc_uart_rx0;
reg  [1:0] main_basesoc_uart_status_status = 2'd0;
wire main_basesoc_uart_status_we;
reg  main_basesoc_uart_status_re = 1'd0;
wire main_basesoc_uart_tx1;
wire main_basesoc_uart_rx1;
reg  [1:0] main_basesoc_uart_pending_status = 2'd0;
wire main_basesoc_uart_pending_we;
reg  main_basesoc_uart_pending_re = 1'd0;
reg  [1:0] main_basesoc_uart_pending_r = 2'd0;
wire main_basesoc_uart_tx2;
wire main_basesoc_uart_rx2;
reg  [1:0] main_basesoc_uart_enable_storage = 2'd0;
reg  main_basesoc_uart_enable_re = 1'd0;
wire main_basesoc_uart_txempty_status;
wire main_basesoc_uart_txempty_we;
reg  main_basesoc_uart_txempty_re = 1'd0;
wire main_basesoc_uart_rxfull_status;
wire main_basesoc_uart_rxfull_we;
reg  main_basesoc_uart_rxfull_re = 1'd0;
wire main_basesoc_uart_uart_sink_valid;
wire main_basesoc_uart_uart_sink_ready;
wire main_basesoc_uart_uart_sink_first;
wire main_basesoc_uart_uart_sink_last;
wire [7:0] main_basesoc_uart_uart_sink_payload_data;
wire main_basesoc_uart_uart_source_valid;
wire main_basesoc_uart_uart_source_ready;
wire main_basesoc_uart_uart_source_first;
wire main_basesoc_uart_uart_source_last;
wire [7:0] main_basesoc_uart_uart_source_payload_data;
wire main_basesoc_uart_tx_fifo_sink_valid;
wire main_basesoc_uart_tx_fifo_sink_ready;
reg  main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg  main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire main_basesoc_uart_tx_fifo_source_valid;
wire main_basesoc_uart_tx_fifo_source_ready;
wire main_basesoc_uart_tx_fifo_source_first;
wire main_basesoc_uart_tx_fifo_source_last;
wire [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire main_basesoc_uart_tx_fifo_re;
reg  main_basesoc_uart_tx_fifo_readable = 1'd0;
wire main_basesoc_uart_tx_fifo_syncfifo_we;
wire main_basesoc_uart_tx_fifo_syncfifo_writable;
wire main_basesoc_uart_tx_fifo_syncfifo_re;
wire main_basesoc_uart_tx_fifo_syncfifo_readable;
wire [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
reg  [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
reg  main_basesoc_uart_tx_fifo_replace = 1'd0;
reg  [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
reg  [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
reg  [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire main_basesoc_uart_tx_fifo_wrport_we;
wire [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire main_basesoc_uart_tx_fifo_do_read;
wire [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire main_basesoc_uart_tx_fifo_rdport_re;
wire [4:0] main_basesoc_uart_tx_fifo_level1;
wire [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire main_basesoc_uart_tx_fifo_fifo_in_first;
wire main_basesoc_uart_tx_fifo_fifo_in_last;
wire [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
wire main_basesoc_uart_tx_fifo_fifo_out_first;
wire main_basesoc_uart_tx_fifo_fifo_out_last;
wire main_basesoc_uart_rx_fifo_sink_valid;
wire main_basesoc_uart_rx_fifo_sink_ready;
wire main_basesoc_uart_rx_fifo_sink_first;
wire main_basesoc_uart_rx_fifo_sink_last;
wire [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire main_basesoc_uart_rx_fifo_source_valid;
wire main_basesoc_uart_rx_fifo_source_ready;
wire main_basesoc_uart_rx_fifo_source_first;
wire main_basesoc_uart_rx_fifo_source_last;
wire [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire main_basesoc_uart_rx_fifo_re;
reg  main_basesoc_uart_rx_fifo_readable = 1'd0;
wire main_basesoc_uart_rx_fifo_syncfifo_we;
wire main_basesoc_uart_rx_fifo_syncfifo_writable;
wire main_basesoc_uart_rx_fifo_syncfifo_re;
wire main_basesoc_uart_rx_fifo_syncfifo_readable;
wire [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
reg  [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
reg  main_basesoc_uart_rx_fifo_replace = 1'd0;
reg  [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
reg  [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
reg  [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire main_basesoc_uart_rx_fifo_wrport_we;
wire [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire main_basesoc_uart_rx_fifo_do_read;
wire [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire main_basesoc_uart_rx_fifo_rdport_re;
wire [4:0] main_basesoc_uart_rx_fifo_level1;
wire [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire main_basesoc_uart_rx_fifo_fifo_in_first;
wire main_basesoc_uart_rx_fifo_fifo_in_last;
wire [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
wire main_basesoc_uart_rx_fifo_fifo_out_first;
wire main_basesoc_uart_rx_fifo_fifo_out_last;
reg  [31:0] main_basesoc_timer_load_storage = 32'd0;
reg  main_basesoc_timer_load_re = 1'd0;
reg  [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg  main_basesoc_timer_reload_re = 1'd0;
reg  main_basesoc_timer_en_storage = 1'd0;
reg  main_basesoc_timer_en_re = 1'd0;
reg  main_basesoc_timer_update_value_storage = 1'd0;
reg  main_basesoc_timer_update_value_re = 1'd0;
reg  [31:0] main_basesoc_timer_value_status = 32'd0;
wire main_basesoc_timer_value_we;
reg  main_basesoc_timer_value_re = 1'd0;
wire main_basesoc_timer_irq;
wire main_basesoc_timer_zero_status;
reg  main_basesoc_timer_zero_pending = 1'd0;
wire main_basesoc_timer_zero_trigger;
reg  main_basesoc_timer_zero_clear = 1'd0;
reg  main_basesoc_timer_zero_trigger_d = 1'd0;
wire main_basesoc_timer_zero0;
wire main_basesoc_timer_status_status;
wire main_basesoc_timer_status_we;
reg  main_basesoc_timer_status_re = 1'd0;
wire main_basesoc_timer_zero1;
wire main_basesoc_timer_pending_status;
wire main_basesoc_timer_pending_we;
reg  main_basesoc_timer_pending_re = 1'd0;
reg  main_basesoc_timer_pending_r = 1'd0;
wire main_basesoc_timer_zero2;
reg  main_basesoc_timer_enable_storage = 1'd0;
reg  main_basesoc_timer_enable_re = 1'd0;
reg  [31:0] main_basesoc_timer_value = 32'd0;
wire main_sink_valid;
wire main_sink_ready;
wire main_sink_first;
wire main_sink_last;
wire main_sink_payload_hsync;
wire main_sink_payload_vsync;
wire main_sink_payload_de;
wire [7:0] main_sink_payload_r;
wire [7:0] main_sink_payload_g;
wire [7:0] main_sink_payload_b;
reg  main_vtg_enable_storage = 1'd1;
reg  main_vtg_enable_re = 1'd0;
reg  [11:0] main_vtg_hres_storage = 12'd800;
reg  main_vtg_hres_re = 1'd0;
reg  [11:0] main_vtg_hsync_start_storage = 12'd840;
reg  main_vtg_hsync_start_re = 1'd0;
reg  [11:0] main_vtg_hsync_end_storage = 12'd968;
reg  main_vtg_hsync_end_re = 1'd0;
reg  [11:0] main_vtg_hscan_storage = 12'd1055;
reg  main_vtg_hscan_re = 1'd0;
reg  [11:0] main_vtg_vres_storage = 12'd600;
reg  main_vtg_vres_re = 1'd0;
reg  [11:0] main_vtg_vsync_start_storage = 12'd601;
reg  main_vtg_vsync_start_re = 1'd0;
reg  [11:0] main_vtg_vsync_end_storage = 12'd605;
reg  main_vtg_vsync_end_re = 1'd0;
reg  [11:0] main_vtg_vscan_storage = 12'd627;
reg  main_vtg_vscan_re = 1'd0;
reg  main_vtg_source_valid = 1'd0;
wire main_vtg_source_ready;
reg  main_vtg_source_first = 1'd0;
reg  main_vtg_source_last = 1'd0;
reg  main_vtg_source_payload_hsync = 1'd0;
reg  main_vtg_source_payload_vsync = 1'd0;
wire main_vtg_source_payload_de;
reg  [11:0] main_vtg_source_payload_hres = 12'd0;
reg  [11:0] main_vtg_source_payload_vres = 12'd0;
reg  [11:0] main_vtg_source_payload_hcount = 12'd0;
reg  [11:0] main_vtg_source_payload_vcount = 12'd0;
wire main_vtg_enable;
wire [11:0] main_vtg_hres;
wire [11:0] main_vtg_hsync_start;
wire [11:0] main_vtg_hsync_end;
wire [11:0] main_vtg_hscan;
wire [11:0] main_vtg_vres;
wire [11:0] main_vtg_vsync_start;
wire [11:0] main_vtg_vsync_end;
wire [11:0] main_vtg_vscan;
reg  main_vtg_hactive = 1'd0;
reg  main_vtg_vactive = 1'd0;
wire main_vtg_reset;
wire main_vt_vtg_sink_valid;
wire main_vt_vtg_sink_ready;
wire main_vt_vtg_sink_first;
wire main_vt_vtg_sink_last;
wire main_vt_vtg_sink_payload_hsync;
wire main_vt_vtg_sink_payload_vsync;
wire main_vt_vtg_sink_payload_de;
wire [11:0] main_vt_vtg_sink_payload_hres;
wire [11:0] main_vt_vtg_sink_payload_vres;
wire [11:0] main_vt_vtg_sink_payload_hcount;
wire [11:0] main_vt_vtg_sink_payload_vcount;
wire main_vt_uart_sink_valid;
wire main_vt_uart_sink_ready;
wire main_vt_uart_sink_first;
wire main_vt_uart_sink_last;
wire [7:0] main_vt_uart_sink_payload_data;
wire main_vt_source_source_valid;
wire main_vt_source_source_ready;
reg  main_vt_source_source_first = 1'd0;
wire main_vt_source_source_last;
wire main_vt_source_source_payload_hsync;
wire main_vt_source_source_payload_vsync;
wire main_vt_source_source_payload_de;
reg  [7:0] main_vt_source_source_payload_r = 8'd0;
reg  [7:0] main_vt_source_source_payload_g = 8'd0;
reg  [7:0] main_vt_source_source_payload_b = 8'd0;
wire [11:0] main_vt_font_rdport_adr;
wire [7:0] main_vt_font_rdport_dat_r;
wire main_vt_font_rdport_re;
reg  [12:0] main_vt_term_wrport_adr = 13'd0;
wire [15:0] main_vt_term_wrport_dat_r;
reg  main_vt_term_wrport_we = 1'd0;
reg  [15:0] main_vt_term_wrport_dat_w = 16'd0;
wire [12:0] main_vt_term_rdport_adr;
wire [15:0] main_vt_term_rdport_dat_r;
wire main_vt_term_rdport_re;
wire main_vt_csiinterpreter_sink_valid;
reg  main_vt_csiinterpreter_sink_ready = 1'd0;
wire main_vt_csiinterpreter_sink_first;
wire main_vt_csiinterpreter_sink_last;
wire [7:0] main_vt_csiinterpreter_sink_payload_data;
reg  main_vt_csiinterpreter_source_valid = 1'd0;
wire main_vt_csiinterpreter_source_ready;
reg  main_vt_csiinterpreter_source_first = 1'd0;
reg  main_vt_csiinterpreter_source_last = 1'd0;
reg  [7:0] main_vt_csiinterpreter_source_payload_data = 8'd0;
reg  [3:0] main_vt_csiinterpreter_color = 4'd0;
reg  main_vt_csiinterpreter_clear_xy = 1'd0;
reg  [2:0] main_vt_csiinterpreter_csi_count = 3'd0;
reg  [7:0] main_vt_csiinterpreter0 = 8'd0;
reg  [7:0] main_vt_csiinterpreter1 = 8'd0;
reg  [7:0] main_vt_csiinterpreter2 = 8'd0;
reg  [7:0] main_vt_csiinterpreter3 = 8'd0;
reg  [7:0] main_vt_csiinterpreter4 = 8'd0;
reg  [7:0] main_vt_csiinterpreter5 = 8'd0;
reg  [7:0] main_vt_csiinterpreter6 = 8'd0;
reg  [7:0] main_vt_csiinterpreter7 = 8'd0;
reg  [7:0] main_vt_csiinterpreter_csi_final = 8'd0;
wire main_vt_uart_fifo_sink_valid;
wire main_vt_uart_fifo_sink_ready;
wire main_vt_uart_fifo_sink_first;
wire main_vt_uart_fifo_sink_last;
wire [7:0] main_vt_uart_fifo_sink_payload_data;
wire main_vt_uart_fifo_source_valid;
reg  main_vt_uart_fifo_source_ready = 1'd0;
wire main_vt_uart_fifo_source_first;
wire main_vt_uart_fifo_source_last;
wire [7:0] main_vt_uart_fifo_source_payload_data;
wire main_vt_uart_fifo_syncfifo_we;
wire main_vt_uart_fifo_syncfifo_writable;
wire main_vt_uart_fifo_syncfifo_re;
wire main_vt_uart_fifo_syncfifo_readable;
wire [9:0] main_vt_uart_fifo_syncfifo_din;
wire [9:0] main_vt_uart_fifo_syncfifo_dout;
reg  [3:0] main_vt_uart_fifo_level = 4'd0;
reg  main_vt_uart_fifo_replace = 1'd0;
reg  [2:0] main_vt_uart_fifo_produce = 3'd0;
reg  [2:0] main_vt_uart_fifo_consume = 3'd0;
reg  [2:0] main_vt_uart_fifo_wrport_adr = 3'd0;
wire [9:0] main_vt_uart_fifo_wrport_dat_r;
wire main_vt_uart_fifo_wrport_we;
wire [9:0] main_vt_uart_fifo_wrport_dat_w;
wire main_vt_uart_fifo_do_read;
wire [2:0] main_vt_uart_fifo_rdport_adr;
wire [9:0] main_vt_uart_fifo_rdport_dat_r;
wire [7:0] main_vt_uart_fifo_fifo_in_payload_data;
wire main_vt_uart_fifo_fifo_in_first;
wire main_vt_uart_fifo_fifo_in_last;
wire [7:0] main_vt_uart_fifo_fifo_out_payload_data;
wire main_vt_uart_fifo_fifo_out_first;
wire main_vt_uart_fifo_fifo_out_last;
reg  main_vt_y_term_rollover = 1'd0;
wire main_vt_buffer0_sink_valid;
wire main_vt_buffer0_sink_ready;
wire main_vt_buffer0_sink_first;
wire main_vt_buffer0_sink_last;
wire main_vt_buffer0_sink_payload_hsync;
wire main_vt_buffer0_sink_payload_vsync;
wire main_vt_buffer0_sink_payload_de;
wire [11:0] main_vt_buffer0_sink_payload_hres;
wire [11:0] main_vt_buffer0_sink_payload_vres;
wire [11:0] main_vt_buffer0_sink_payload_hcount;
wire [11:0] main_vt_buffer0_sink_payload_vcount;
reg  main_vt_buffer0_source_valid = 1'd0;
wire main_vt_buffer0_source_ready;
reg  main_vt_buffer0_source_first = 1'd0;
reg  main_vt_buffer0_source_last = 1'd0;
reg  main_vt_buffer0_source_payload_hsync = 1'd0;
reg  main_vt_buffer0_source_payload_vsync = 1'd0;
reg  main_vt_buffer0_source_payload_de = 1'd0;
reg  [11:0] main_vt_buffer0_source_payload_hres = 12'd0;
reg  [11:0] main_vt_buffer0_source_payload_vres = 12'd0;
reg  [11:0] main_vt_buffer0_source_payload_hcount = 12'd0;
reg  [11:0] main_vt_buffer0_source_payload_vcount = 12'd0;
wire main_vt_buffer1_sink_valid;
wire main_vt_buffer1_sink_ready;
wire main_vt_buffer1_sink_first;
wire main_vt_buffer1_sink_last;
wire main_vt_buffer1_sink_payload_hsync;
wire main_vt_buffer1_sink_payload_vsync;
wire main_vt_buffer1_sink_payload_de;
wire [11:0] main_vt_buffer1_sink_payload_hres;
wire [11:0] main_vt_buffer1_sink_payload_vres;
wire [11:0] main_vt_buffer1_sink_payload_hcount;
wire [11:0] main_vt_buffer1_sink_payload_vcount;
reg  main_vt_buffer1_source_valid = 1'd0;
wire main_vt_buffer1_source_ready;
reg  main_vt_buffer1_source_first = 1'd0;
reg  main_vt_buffer1_source_last = 1'd0;
reg  main_vt_buffer1_source_payload_hsync = 1'd0;
reg  main_vt_buffer1_source_payload_vsync = 1'd0;
reg  main_vt_buffer1_source_payload_de = 1'd0;
reg  [11:0] main_vt_buffer1_source_payload_hres = 12'd0;
reg  [11:0] main_vt_buffer1_source_payload_vres = 12'd0;
reg  [11:0] main_vt_buffer1_source_payload_hcount = 12'd0;
reg  [11:0] main_vt_buffer1_source_payload_vcount = 12'd0;
reg  [7:0] main_vt_y_rollover = 8'd0;
reg  [7:0] main_vt_term_dat_r = 8'd0;
reg  main_vt_bit = 1'd0;
wire main_uart_cdc_sink_sink_valid;
wire main_uart_cdc_sink_sink_ready;
reg  main_uart_cdc_sink_sink_first = 1'd0;
reg  main_uart_cdc_sink_sink_last = 1'd0;
wire [7:0] main_uart_cdc_sink_sink_payload_data;
wire main_uart_cdc_source_source_valid;
wire main_uart_cdc_source_source_ready;
wire main_uart_cdc_source_source_first;
wire main_uart_cdc_source_source_last;
wire [7:0] main_uart_cdc_source_source_payload_data;
wire main_uart_cdc_cdc_sink_valid;
wire main_uart_cdc_cdc_sink_ready;
wire main_uart_cdc_cdc_sink_first;
wire main_uart_cdc_cdc_sink_last;
wire [7:0] main_uart_cdc_cdc_sink_payload_data;
wire main_uart_cdc_cdc_source_valid;
wire main_uart_cdc_cdc_source_ready;
wire main_uart_cdc_cdc_source_first;
wire main_uart_cdc_cdc_source_last;
wire [7:0] main_uart_cdc_cdc_source_payload_data;
wire main_uart_cdc_cdc_asyncfifo_we;
wire main_uart_cdc_cdc_asyncfifo_writable;
wire main_uart_cdc_cdc_asyncfifo_re;
wire main_uart_cdc_cdc_asyncfifo_readable;
wire [9:0] main_uart_cdc_cdc_asyncfifo_din;
wire [9:0] main_uart_cdc_cdc_asyncfifo_dout;
wire main_uart_cdc_cdc_graycounter0_ce;
reg  [2:0] main_uart_cdc_cdc_graycounter0_q = 3'd0;
wire [2:0] main_uart_cdc_cdc_graycounter0_q_next;
reg  [2:0] main_uart_cdc_cdc_graycounter0_q_binary = 3'd0;
reg  [2:0] main_uart_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire main_uart_cdc_cdc_graycounter1_ce;
reg  [2:0] main_uart_cdc_cdc_graycounter1_q = 3'd0;
wire [2:0] main_uart_cdc_cdc_graycounter1_q_next;
reg  [2:0] main_uart_cdc_cdc_graycounter1_q_binary = 3'd0;
reg  [2:0] main_uart_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] main_uart_cdc_cdc_produce_rdomain;
wire [2:0] main_uart_cdc_cdc_consume_wdomain;
wire [1:0] main_uart_cdc_cdc_wrport_adr;
wire [9:0] main_uart_cdc_cdc_wrport_dat_r;
wire main_uart_cdc_cdc_wrport_we;
wire [9:0] main_uart_cdc_cdc_wrport_dat_w;
wire [1:0] main_uart_cdc_cdc_rdport_adr;
wire [9:0] main_uart_cdc_cdc_rdport_dat_r;
wire [7:0] main_uart_cdc_cdc_fifo_in_payload_data;
wire main_uart_cdc_cdc_fifo_in_first;
wire main_uart_cdc_cdc_fifo_in_last;
wire [7:0] main_uart_cdc_cdc_fifo_out_payload_data;
wire main_uart_cdc_cdc_fifo_out_first;
wire main_uart_cdc_cdc_fifo_out_last;
reg  [9:0] main_storage = 10'd0;
reg  main_re = 1'd0;
reg  [9:0] main_chaser = 10'd0;
reg  main_mode = 1'd0;
wire main_wait;
wire main_done;
reg  [21:0] main_count = 22'd2500000;
reg  [9:0] main_leds = 10'd0;
reg  [13:0] builder_basesoc_adr = 14'd0;
reg  builder_basesoc_we = 1'd0;
reg  [31:0] builder_basesoc_dat_w = 32'd0;
wire [31:0] builder_basesoc_dat_r;
wire [29:0] builder_basesoc_wishbone_adr;
wire [31:0] builder_basesoc_wishbone_dat_w;
reg  [31:0] builder_basesoc_wishbone_dat_r = 32'd0;
wire [3:0] builder_basesoc_wishbone_sel;
wire builder_basesoc_wishbone_cyc;
wire builder_basesoc_wishbone_stb;
reg  builder_basesoc_wishbone_ack = 1'd0;
wire builder_basesoc_wishbone_we;
wire [2:0] builder_basesoc_wishbone_cti;
wire [1:0] builder_basesoc_wishbone_bte;
reg  builder_basesoc_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg  [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg  builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [1:0] builder_request;
reg  builder_grant = 1'd0;
reg  [3:0] builder_slave_sel = 4'd0;
reg  [3:0] builder_slave_sel_r = 4'd0;
reg  builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg  [19:0] builder_count = 20'd1000000;
wire [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire builder_csr_bankarray_interface0_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg  builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg  builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg  builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg  builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg  builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
wire builder_csr_bankarray_csrbank0_sel;
wire [13:0] builder_csr_bankarray_sram_bus_adr;
wire builder_csr_bankarray_sram_bus_we;
wire [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg  [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] builder_csr_bankarray_adr;
wire [7:0] builder_csr_bankarray_dat_r;
wire builder_csr_bankarray_sel;
reg  builder_csr_bankarray_sel_r = 1'd0;
wire [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire builder_csr_bankarray_interface1_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank1_out0_re = 1'd0;
wire [9:0] builder_csr_bankarray_csrbank1_out0_r;
reg  builder_csr_bankarray_csrbank1_out0_we = 1'd0;
wire [9:0] builder_csr_bankarray_csrbank1_out0_w;
wire builder_csr_bankarray_csrbank1_sel;
wire [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire builder_csr_bankarray_interface2_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank2_load0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_load0_r;
reg  builder_csr_bankarray_csrbank2_load0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_load0_w;
reg  builder_csr_bankarray_csrbank2_reload0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_reload0_r;
reg  builder_csr_bankarray_csrbank2_reload0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_reload0_w;
reg  builder_csr_bankarray_csrbank2_en0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_en0_r;
reg  builder_csr_bankarray_csrbank2_en0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_en0_w;
reg  builder_csr_bankarray_csrbank2_update_value0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_update_value0_r;
reg  builder_csr_bankarray_csrbank2_update_value0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_update_value0_w;
reg  builder_csr_bankarray_csrbank2_value_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_value_r;
reg  builder_csr_bankarray_csrbank2_value_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank2_value_w;
reg  builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_status_r;
reg  builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_status_w;
reg  builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_pending_r;
reg  builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_pending_w;
reg  builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_enable0_r;
reg  builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank2_ev_enable0_w;
wire builder_csr_bankarray_csrbank2_sel;
wire [13:0] builder_csr_bankarray_interface3_bank_bus_adr;
wire builder_csr_bankarray_interface3_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface3_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank3_txfull_re = 1'd0;
wire builder_csr_bankarray_csrbank3_txfull_r;
reg  builder_csr_bankarray_csrbank3_txfull_we = 1'd0;
wire builder_csr_bankarray_csrbank3_txfull_w;
reg  builder_csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire builder_csr_bankarray_csrbank3_rxempty_r;
reg  builder_csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire builder_csr_bankarray_csrbank3_rxempty_w;
reg  builder_csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_status_r;
reg  builder_csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_status_w;
reg  builder_csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_pending_r;
reg  builder_csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_pending_w;
reg  builder_csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_enable0_r;
reg  builder_csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank3_ev_enable0_w;
reg  builder_csr_bankarray_csrbank3_txempty_re = 1'd0;
wire builder_csr_bankarray_csrbank3_txempty_r;
reg  builder_csr_bankarray_csrbank3_txempty_we = 1'd0;
wire builder_csr_bankarray_csrbank3_txempty_w;
reg  builder_csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire builder_csr_bankarray_csrbank3_rxfull_r;
reg  builder_csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire builder_csr_bankarray_csrbank3_rxfull_w;
wire builder_csr_bankarray_csrbank3_sel;
wire [13:0] builder_csr_bankarray_interface4_bank_bus_adr;
wire builder_csr_bankarray_interface4_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface4_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank4_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank4_enable0_r;
reg  builder_csr_bankarray_csrbank4_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank4_enable0_w;
reg  builder_csr_bankarray_csrbank4_hres0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hres0_r;
reg  builder_csr_bankarray_csrbank4_hres0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hres0_w;
reg  builder_csr_bankarray_csrbank4_hsync_start0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hsync_start0_r;
reg  builder_csr_bankarray_csrbank4_hsync_start0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hsync_start0_w;
reg  builder_csr_bankarray_csrbank4_hsync_end0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hsync_end0_r;
reg  builder_csr_bankarray_csrbank4_hsync_end0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hsync_end0_w;
reg  builder_csr_bankarray_csrbank4_hscan0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hscan0_r;
reg  builder_csr_bankarray_csrbank4_hscan0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_hscan0_w;
reg  builder_csr_bankarray_csrbank4_vres0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vres0_r;
reg  builder_csr_bankarray_csrbank4_vres0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vres0_w;
reg  builder_csr_bankarray_csrbank4_vsync_start0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vsync_start0_r;
reg  builder_csr_bankarray_csrbank4_vsync_start0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vsync_start0_w;
reg  builder_csr_bankarray_csrbank4_vsync_end0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vsync_end0_r;
reg  builder_csr_bankarray_csrbank4_vsync_end0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vsync_end0_w;
reg  builder_csr_bankarray_csrbank4_vscan0_re = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vscan0_r;
reg  builder_csr_bankarray_csrbank4_vscan0_we = 1'd0;
wire [11:0] builder_csr_bankarray_csrbank4_vscan0_w;
wire builder_csr_bankarray_csrbank4_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
wire [2:0] builder_basesoc_clks;
reg  builder_basesoc_rs232phytx_state = 1'd0;
reg  builder_basesoc_rs232phytx_next_state = 1'd0;
reg  [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg  main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg  main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg  main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg  [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg  main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg  builder_basesoc_rs232phyrx_state = 1'd0;
reg  builder_basesoc_rs232phyrx_next_state = 1'd0;
reg  [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg  main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg  [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg  main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg  builder_basesoc_clockdomainsrenamer0_state = 1'd0;
reg  builder_basesoc_clockdomainsrenamer0_next_state = 1'd0;
reg  main_vtg_hactive_next_value0 = 1'd0;
reg  main_vtg_hactive_next_value_ce0 = 1'd0;
reg  main_vtg_vactive_next_value1 = 1'd0;
reg  main_vtg_vactive_next_value_ce1 = 1'd0;
reg  [11:0] main_vtg_source_payload_hres_next_value2 = 12'd0;
reg  main_vtg_source_payload_hres_next_value_ce2 = 1'd0;
reg  [11:0] main_vtg_source_payload_vres_next_value3 = 12'd0;
reg  main_vtg_source_payload_vres_next_value_ce3 = 1'd0;
reg  [11:0] main_vtg_source_payload_hcount_next_value4 = 12'd0;
reg  main_vtg_source_payload_hcount_next_value_ce4 = 1'd0;
reg  [11:0] main_vtg_source_payload_vcount_next_value5 = 12'd0;
reg  main_vtg_source_payload_vcount_next_value_ce5 = 1'd0;
reg  main_vtg_source_payload_hsync_next_value6 = 1'd0;
reg  main_vtg_source_payload_hsync_next_value_ce6 = 1'd0;
reg  main_vtg_source_payload_vsync_next_value7 = 1'd0;
reg  main_vtg_source_payload_vsync_next_value_ce7 = 1'd0;
reg  [2:0] builder_basesoc_csiinterpreter_state = 3'd0;
reg  [2:0] builder_basesoc_csiinterpreter_next_state = 3'd0;
reg  [2:0] main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 = 3'd0;
reg  main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 = 1'd0;
reg  [7:0] builder_basesoc_csiinterpreter_next_value = 8'd0;
reg  builder_basesoc_csiinterpreter_next_value_ce = 1'd0;
reg  [7:0] main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1 = 8'd0;
reg  main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1 = 1'd0;
reg  [3:0] main_vt_csiinterpreter_color_csiinterpreter_next_value2 = 4'd0;
reg  main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 = 1'd0;
reg  [3:0] builder_basesoc_fsm_state = 4'd0;
reg  [3:0] builder_basesoc_fsm_next_state = 4'd0;
reg  [6:0] builder_basesoc_fsm_next_value0 = 7'd0;
reg  builder_basesoc_fsm_next_value_ce0 = 1'd0;
reg  [5:0] builder_basesoc_fsm_next_value1 = 6'd0;
reg  builder_basesoc_fsm_next_value_ce1 = 1'd0;
reg  main_vt_y_term_rollover_fsm_next_value = 1'd0;
reg  main_vt_y_term_rollover_fsm_next_value_ce = 1'd0;
reg  builder_basesoc_wishbone2csr_state = 1'd0;
reg  builder_basesoc_wishbone2csr_next_state = 1'd0;
reg  [29:0] builder_comb_array_muxed0 = 30'd0;
reg  [31:0] builder_comb_array_muxed1 = 32'd0;
reg  [3:0] builder_comb_array_muxed2 = 4'd0;
reg  builder_comb_array_muxed3 = 1'd0;
reg  builder_comb_array_muxed4 = 1'd0;
reg  builder_comb_array_muxed5 = 1'd0;
reg  [2:0] builder_comb_array_muxed6 = 3'd0;
reg  [1:0] builder_comb_array_muxed7 = 2'd0;
reg  [7:0] builder_sync_array_muxed = 8'd0;
wire ars_cd_sys_rst_meta;
wire ars_cd_sys_ps_rst_meta;
wire ars_cd_vga_rst_meta;
reg  builder_multiregimpl0_regs0 = 1'd0;
reg  builder_multiregimpl0_regs1 = 1'd0;
reg  builder_multiregimpl1_regs0 = 1'd0;
reg  builder_multiregimpl1_regs1 = 1'd0;
reg  [11:0] builder_multiregimpl2_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl2_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl3_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl3_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl4_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl4_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl5_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl5_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl6_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl6_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl7_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl7_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl8_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl8_regs1 = 12'd0;
reg  [11:0] builder_multiregimpl9_regs0 = 12'd0;
reg  [11:0] builder_multiregimpl9_regs1 = 12'd0;
reg  [2:0] builder_multiregimpl10_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl10_regs1 = 3'd0;
reg  [2:0] builder_multiregimpl11_regs0 = 3'd0;
reg  [2:0] builder_multiregimpl11_regs1 = 3'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
assign main_vt_vtg_sink_valid = main_vtg_source_valid;
assign main_vtg_source_ready = main_vt_vtg_sink_ready;
assign main_vt_vtg_sink_first = main_vtg_source_first;
assign main_vt_vtg_sink_last = main_vtg_source_last;
assign main_vt_vtg_sink_payload_hsync = main_vtg_source_payload_hsync;
assign main_vt_vtg_sink_payload_vsync = main_vtg_source_payload_vsync;
assign main_vt_vtg_sink_payload_de = main_vtg_source_payload_de;
assign main_vt_vtg_sink_payload_hres = main_vtg_source_payload_hres;
assign main_vt_vtg_sink_payload_vres = main_vtg_source_payload_vres;
assign main_vt_vtg_sink_payload_hcount = main_vtg_source_payload_hcount;
assign main_vt_vtg_sink_payload_vcount = main_vtg_source_payload_vcount;
assign main_uart_cdc_sink_sink_valid = (main_basesoc_uart_tx_fifo_source_valid & main_basesoc_uart_tx_fifo_source_ready);
assign main_uart_cdc_sink_sink_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_vt_uart_sink_valid = main_uart_cdc_source_source_valid;
assign main_uart_cdc_source_source_ready = main_vt_uart_sink_ready;
assign main_vt_uart_sink_first = main_uart_cdc_source_source_first;
assign main_vt_uart_sink_last = main_uart_cdc_source_source_last;
assign main_vt_uart_sink_payload_data = main_uart_cdc_source_source_payload_data;
assign main_sink_valid = main_vt_source_source_valid;
assign main_vt_source_source_ready = main_sink_ready;
assign main_sink_first = main_vt_source_source_first;
assign main_sink_last = main_vt_source_source_last;
assign main_sink_payload_hsync = main_vt_source_source_payload_hsync;
assign main_sink_payload_vsync = main_vt_source_source_payload_vsync;
assign main_sink_payload_de = main_vt_source_source_payload_de;
assign main_sink_payload_r = main_vt_source_source_payload_r;
assign main_sink_payload_g = main_vt_source_source_payload_g;
assign main_sink_payload_b = main_vt_source_source_payload_b;
always @(*) begin
	main_rst <= 1'd0;
	if (main_basesoc_soc_rst) begin
		main_rst <= 1'd1;
	end
end
assign main_basesoc_bus_error = builder_error;
always @(*) begin
	main_basesoc_interrupt <= 32'd0;
	main_basesoc_interrupt[1] <= main_basesoc_timer_irq;
	main_basesoc_interrupt[0] <= main_basesoc_uart_irq;
end
assign main_reset = main_rst;
assign main_clkin = clk50;
assign sys_clk = main_clkout0;
assign sys_ps_clk = main_clkout1;
assign vga_clk = main_clkout2;
assign main_clkout0 = builder_basesoc_clks[0];
assign main_clkout1 = builder_basesoc_clks[1];
assign main_clkout2 = builder_basesoc_clks[2];
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
assign main_basesoc_adr = main_basesoc_ram_bus_adr[14:0];
assign main_basesoc_ram_bus_dat_r = main_basesoc_dat_r;
always @(*) begin
	main_basesoc_sram0_we <= 4'd0;
	main_basesoc_sram0_we[0] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[0]);
	main_basesoc_sram0_we[1] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[1]);
	main_basesoc_sram0_we[2] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[2]);
	main_basesoc_sram0_we[3] <= (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & main_basesoc_interface0_ram_bus_we) & main_basesoc_interface0_ram_bus_sel[3]);
end
assign main_basesoc_sram0_adr = main_basesoc_interface0_ram_bus_adr[10:0];
assign main_basesoc_interface0_ram_bus_dat_r = main_basesoc_sram0_dat_r;
assign main_basesoc_sram0_dat_w = main_basesoc_interface0_ram_bus_dat_w;
always @(*) begin
	main_basesoc_sram1_we <= 4'd0;
	main_basesoc_sram1_we[0] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[0]);
	main_basesoc_sram1_we[1] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[1]);
	main_basesoc_sram1_we[2] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[2]);
	main_basesoc_sram1_we[3] <= (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & main_basesoc_interface1_ram_bus_we) & main_basesoc_interface1_ram_bus_sel[3]);
end
assign main_basesoc_sram1_adr = main_basesoc_interface1_ram_bus_adr[13:0];
assign main_basesoc_interface1_ram_bus_dat_r = main_basesoc_sram1_dat_r;
assign main_basesoc_sram1_dat_w = main_basesoc_interface1_ram_bus_dat_w;
always @(*) begin
	main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
	main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
	main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	main_basesoc_tx_sink_ready <= 1'd0;
	main_basesoc_tx_enable <= 1'd0;
	builder_basesoc_rs232phytx_next_state <= 1'd0;
	main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
	main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	builder_basesoc_rs232phytx_next_state <= builder_basesoc_rs232phytx_state;
	case (builder_basesoc_rs232phytx_state)
		1'd1: begin
			main_basesoc_tx_enable <= 1'd1;
			if (main_basesoc_tx_tick) begin
				main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data;
				main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
				main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
				main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((main_basesoc_tx_count == 4'd9)) begin
					main_basesoc_tx_sink_ready <= 1'd1;
					builder_basesoc_rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
			main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
			main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (main_basesoc_tx_sink_valid) begin
				main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
				main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
				main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				builder_basesoc_rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
	main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	main_basesoc_rx_source_valid <= 1'd0;
	main_basesoc_rx_source_payload_data <= 8'd0;
	main_basesoc_rx_enable <= 1'd0;
	builder_basesoc_rs232phyrx_next_state <= 1'd0;
	main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
	builder_basesoc_rs232phyrx_next_state <= builder_basesoc_rs232phyrx_state;
	case (builder_basesoc_rs232phyrx_state)
		1'd1: begin
			main_basesoc_rx_enable <= 1'd1;
			if (main_basesoc_rx_tick) begin
				main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
				main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
				main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((main_basesoc_rx_count == 4'd9)) begin
					main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
					main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
					builder_basesoc_rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
			main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
				builder_basesoc_rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
	main_basesoc_uart_tx_clear <= 1'd0;
	if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
		main_basesoc_uart_tx_clear <= 1'd1;
	end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
	main_basesoc_uart_rx_clear <= 1'd0;
	if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
		main_basesoc_uart_rx_clear <= 1'd1;
	end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
	main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
	if (main_basesoc_uart_tx_fifo_replace) begin
		main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
	end else begin
		main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
	end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
	main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
	if (main_basesoc_uart_rx_fifo_replace) begin
		main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
	end else begin
		main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
	end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
	main_basesoc_timer_zero_clear <= 1'd0;
	if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
		main_basesoc_timer_zero_clear <= 1'd1;
	end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign main_sink_ready = 1'd1;
assign main_vtg_reset = (~main_vtg_enable);
assign main_vtg_source_payload_de = (main_vtg_hactive & main_vtg_vactive);
always @(*) begin
	main_vtg_source_payload_hsync_next_value6 <= 1'd0;
	main_vtg_source_payload_hsync_next_value_ce6 <= 1'd0;
	builder_basesoc_clockdomainsrenamer0_next_state <= 1'd0;
	main_vtg_source_payload_vsync_next_value7 <= 1'd0;
	main_vtg_hactive_next_value0 <= 1'd0;
	main_vtg_source_payload_vsync_next_value_ce7 <= 1'd0;
	main_vtg_hactive_next_value_ce0 <= 1'd0;
	main_vtg_vactive_next_value1 <= 1'd0;
	main_vtg_vactive_next_value_ce1 <= 1'd0;
	main_vtg_source_payload_hres_next_value2 <= 12'd0;
	main_vtg_source_payload_hres_next_value_ce2 <= 1'd0;
	main_vtg_source_valid <= 1'd0;
	main_vtg_source_payload_vres_next_value3 <= 12'd0;
	main_vtg_source_payload_vres_next_value_ce3 <= 1'd0;
	main_vtg_source_payload_hcount_next_value4 <= 12'd0;
	main_vtg_source_payload_hcount_next_value_ce4 <= 1'd0;
	main_vtg_source_payload_vcount_next_value5 <= 12'd0;
	main_vtg_source_payload_vcount_next_value_ce5 <= 1'd0;
	builder_basesoc_clockdomainsrenamer0_next_state <= builder_basesoc_clockdomainsrenamer0_state;
	case (builder_basesoc_clockdomainsrenamer0_state)
		1'd1: begin
			main_vtg_source_valid <= 1'd1;
			if (main_vtg_source_ready) begin
				main_vtg_source_payload_hcount_next_value4 <= (main_vtg_source_payload_hcount + 1'd1);
				main_vtg_source_payload_hcount_next_value_ce4 <= 1'd1;
				if ((main_vtg_source_payload_hcount == 1'd0)) begin
					main_vtg_hactive_next_value0 <= 1'd1;
					main_vtg_hactive_next_value_ce0 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hres)) begin
					main_vtg_hactive_next_value0 <= 1'd0;
					main_vtg_hactive_next_value_ce0 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
					main_vtg_source_payload_hsync_next_value6 <= 1'd1;
					main_vtg_source_payload_hsync_next_value_ce6 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hsync_end)) begin
					main_vtg_source_payload_hsync_next_value6 <= 1'd0;
					main_vtg_source_payload_hsync_next_value_ce6 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hscan)) begin
					main_vtg_source_payload_hcount_next_value4 <= 1'd0;
					main_vtg_source_payload_hcount_next_value_ce4 <= 1'd1;
				end
				if ((main_vtg_source_payload_hcount == main_vtg_hsync_start)) begin
					main_vtg_source_payload_vcount_next_value5 <= (main_vtg_source_payload_vcount + 1'd1);
					main_vtg_source_payload_vcount_next_value_ce5 <= 1'd1;
					if ((main_vtg_source_payload_vcount == 1'd0)) begin
						main_vtg_vactive_next_value1 <= 1'd1;
						main_vtg_vactive_next_value_ce1 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vres)) begin
						main_vtg_vactive_next_value1 <= 1'd0;
						main_vtg_vactive_next_value_ce1 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vsync_start)) begin
						main_vtg_source_payload_vsync_next_value7 <= 1'd1;
						main_vtg_source_payload_vsync_next_value_ce7 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vsync_end)) begin
						main_vtg_source_payload_vsync_next_value7 <= 1'd0;
						main_vtg_source_payload_vsync_next_value_ce7 <= 1'd1;
					end
					if ((main_vtg_source_payload_vcount == main_vtg_vscan)) begin
						main_vtg_source_payload_vcount_next_value5 <= 1'd0;
						main_vtg_source_payload_vcount_next_value_ce5 <= 1'd1;
					end
				end
			end
		end
		default: begin
			main_vtg_hactive_next_value0 <= 1'd0;
			main_vtg_hactive_next_value_ce0 <= 1'd1;
			main_vtg_vactive_next_value1 <= 1'd0;
			main_vtg_vactive_next_value_ce1 <= 1'd1;
			main_vtg_source_payload_hres_next_value2 <= main_vtg_hres;
			main_vtg_source_payload_hres_next_value_ce2 <= 1'd1;
			main_vtg_source_payload_vres_next_value3 <= main_vtg_vres;
			main_vtg_source_payload_vres_next_value_ce3 <= 1'd1;
			main_vtg_source_payload_hcount_next_value4 <= 1'd0;
			main_vtg_source_payload_hcount_next_value_ce4 <= 1'd1;
			main_vtg_source_payload_vcount_next_value5 <= 1'd0;
			main_vtg_source_payload_vcount_next_value_ce5 <= 1'd1;
			builder_basesoc_clockdomainsrenamer0_next_state <= 1'd1;
		end
	endcase
end
assign main_vt_csiinterpreter_sink_valid = main_vt_uart_sink_valid;
assign main_vt_uart_sink_ready = main_vt_csiinterpreter_sink_ready;
assign main_vt_csiinterpreter_sink_first = main_vt_uart_sink_first;
assign main_vt_csiinterpreter_sink_last = main_vt_uart_sink_last;
assign main_vt_csiinterpreter_sink_payload_data = main_vt_uart_sink_payload_data;
assign main_vt_uart_fifo_sink_valid = main_vt_csiinterpreter_source_valid;
assign main_vt_csiinterpreter_source_ready = main_vt_uart_fifo_sink_ready;
assign main_vt_uart_fifo_sink_first = main_vt_csiinterpreter_source_first;
assign main_vt_uart_fifo_sink_last = main_vt_csiinterpreter_source_last;
assign main_vt_uart_fifo_sink_payload_data = main_vt_csiinterpreter_source_payload_data;
assign main_vt_buffer0_sink_valid = main_vt_vtg_sink_valid;
assign main_vt_vtg_sink_ready = main_vt_buffer0_sink_ready;
assign main_vt_buffer0_sink_first = main_vt_vtg_sink_first;
assign main_vt_buffer0_sink_last = main_vt_vtg_sink_last;
assign main_vt_buffer0_sink_payload_hsync = main_vt_vtg_sink_payload_hsync;
assign main_vt_buffer0_sink_payload_vsync = main_vt_vtg_sink_payload_vsync;
assign main_vt_buffer0_sink_payload_de = main_vt_vtg_sink_payload_de;
assign main_vt_buffer0_sink_payload_hres = main_vt_vtg_sink_payload_hres;
assign main_vt_buffer0_sink_payload_vres = main_vt_vtg_sink_payload_vres;
assign main_vt_buffer0_sink_payload_hcount = main_vt_vtg_sink_payload_hcount;
assign main_vt_buffer0_sink_payload_vcount = main_vt_vtg_sink_payload_vcount;
assign main_vt_buffer1_sink_valid = main_vt_buffer0_source_valid;
assign main_vt_buffer0_source_ready = main_vt_buffer1_sink_ready;
assign main_vt_buffer1_sink_first = main_vt_buffer0_source_first;
assign main_vt_buffer1_sink_last = main_vt_buffer0_source_last;
assign main_vt_buffer1_sink_payload_hsync = main_vt_buffer0_source_payload_hsync;
assign main_vt_buffer1_sink_payload_vsync = main_vt_buffer0_source_payload_vsync;
assign main_vt_buffer1_sink_payload_de = main_vt_buffer0_source_payload_de;
assign main_vt_buffer1_sink_payload_hres = main_vt_buffer0_source_payload_hres;
assign main_vt_buffer1_sink_payload_vres = main_vt_buffer0_source_payload_vres;
assign main_vt_buffer1_sink_payload_hcount = main_vt_buffer0_source_payload_hcount;
assign main_vt_buffer1_sink_payload_vcount = main_vt_buffer0_source_payload_vcount;
assign main_vt_source_source_valid = main_vt_buffer1_source_valid;
assign main_vt_buffer1_source_ready = main_vt_source_source_ready;
assign main_vt_source_source_last = main_vt_buffer1_source_last;
assign main_vt_source_source_payload_hsync = main_vt_buffer1_source_payload_hsync;
assign main_vt_source_source_payload_vsync = main_vt_buffer1_source_payload_vsync;
assign main_vt_source_source_payload_de = main_vt_buffer1_source_payload_de;
always @(*) begin
	main_vt_y_rollover <= 8'd0;
	if ((~main_vt_y_term_rollover)) begin
		main_vt_y_rollover <= main_vt_vtg_sink_payload_vcount[11:4];
	end else begin
		if ((((main_vt_vtg_sink_payload_vcount[11:4] + main_vt_term_wrport_adr[12:7]) + 1'd1) >= 6'd37)) begin
			main_vt_y_rollover <= (((main_vt_vtg_sink_payload_vcount[11:4] + main_vt_term_wrport_adr[12:7]) + 1'd1) - 6'd37);
		end else begin
			main_vt_y_rollover <= ((main_vt_vtg_sink_payload_vcount[11:4] + main_vt_term_wrport_adr[12:7]) + 1'd1);
		end
	end
end
assign main_vt_term_rdport_re = (main_vt_vtg_sink_valid & main_vt_vtg_sink_ready);
assign main_vt_term_rdport_adr = (main_vt_vtg_sink_payload_hcount[11:3] + (main_vt_y_rollover * 8'd128));
always @(*) begin
	main_vt_term_dat_r <= 8'd0;
	main_vt_term_dat_r <= main_vt_term_rdport_dat_r[7:0];
	if (((main_vt_vtg_sink_payload_hcount[11:3] >= 7'd80) | (main_vt_vtg_sink_payload_vcount[11:4] >= 6'd37))) begin
		main_vt_term_dat_r <= 6'd32;
	end
end
assign main_vt_font_rdport_re = (main_vt_vtg_sink_valid & main_vt_vtg_sink_ready);
assign main_vt_font_rdport_adr = ((main_vt_term_dat_r * 5'd16) + main_vt_buffer0_source_payload_vcount[3:0]);
always @(*) begin
	main_vt_bit <= 1'd0;
	case (main_vt_buffer1_source_payload_hcount[2:0])
		1'd0: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[7];
		end
		1'd1: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[6];
		end
		2'd2: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[5];
		end
		2'd3: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[4];
		end
		3'd4: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[3];
		end
		3'd5: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[2];
		end
		3'd6: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[1];
		end
		3'd7: begin
			main_vt_bit <= main_vt_font_rdport_dat_r[0];
		end
	endcase
end
always @(*) begin
	main_vt_source_source_payload_b <= 8'd0;
	main_vt_source_source_payload_r <= 8'd0;
	main_vt_source_source_payload_g <= 8'd0;
	if (main_vt_bit) begin
		case (main_vt_term_rdport_dat_r[15:8])
			1'd0: begin
				{main_vt_source_source_payload_b, main_vt_source_source_payload_g, main_vt_source_source_payload_r} <= 24'd16777215;
			end
			1'd1: begin
				{main_vt_source_source_payload_b, main_vt_source_source_payload_g, main_vt_source_source_payload_r} <= 22'd3465865;
			end
		endcase
	end else begin
		{main_vt_source_source_payload_b, main_vt_source_source_payload_g, main_vt_source_source_payload_r} <= 1'd0;
	end
end
always @(*) begin
	main_vt_csiinterpreter_source_payload_data <= 8'd0;
	builder_basesoc_csiinterpreter_next_value <= 8'd0;
	builder_basesoc_csiinterpreter_next_value_ce <= 1'd0;
	main_vt_csiinterpreter_clear_xy <= 1'd0;
	main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1 <= 8'd0;
	main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1 <= 1'd0;
	builder_basesoc_csiinterpreter_next_state <= 3'd0;
	main_vt_csiinterpreter_color_csiinterpreter_next_value2 <= 4'd0;
	main_vt_csiinterpreter_sink_ready <= 1'd0;
	main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 <= 1'd0;
	main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 <= 3'd0;
	main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 <= 1'd0;
	main_vt_csiinterpreter_source_valid <= 1'd0;
	main_vt_csiinterpreter_source_first <= 1'd0;
	main_vt_csiinterpreter_source_last <= 1'd0;
	builder_basesoc_csiinterpreter_next_state <= builder_basesoc_csiinterpreter_state;
	case (builder_basesoc_csiinterpreter_state)
		1'd1: begin
			main_vt_csiinterpreter_sink_ready <= 1'd1;
			if (main_vt_csiinterpreter_sink_valid) begin
				if ((main_vt_csiinterpreter_sink_payload_data == 7'd91)) begin
					main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 <= 1'd0;
					main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 <= 1'd1;
					builder_basesoc_csiinterpreter_next_state <= 2'd2;
				end else begin
					builder_basesoc_csiinterpreter_next_state <= 1'd0;
				end
			end
		end
		2'd2: begin
			if (main_vt_csiinterpreter_sink_valid) begin
				if (((main_vt_csiinterpreter_sink_payload_data >= 6'd48) & (main_vt_csiinterpreter_sink_payload_data <= 6'd63))) begin
					main_vt_csiinterpreter_sink_ready <= 1'd1;
					main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0 <= (main_vt_csiinterpreter_csi_count + 1'd1);
					main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0 <= 1'd1;
					builder_basesoc_csiinterpreter_next_value <= main_vt_csiinterpreter_sink_payload_data;
					builder_basesoc_csiinterpreter_next_value_ce <= 1'd1;
				end else begin
					builder_basesoc_csiinterpreter_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			main_vt_csiinterpreter_sink_ready <= 1'd1;
			main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1 <= main_vt_csiinterpreter_sink_payload_data;
			main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1 <= 1'd1;
			builder_basesoc_csiinterpreter_next_state <= 3'd4;
		end
		3'd4: begin
			if ((main_vt_csiinterpreter_csi_final == 7'd109)) begin
				if ((main_vt_csiinterpreter0 == 6'd57)) begin
					main_vt_csiinterpreter_color_csiinterpreter_next_value2 <= 1'd1;
					main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 <= 1'd1;
				end else begin
					main_vt_csiinterpreter_color_csiinterpreter_next_value2 <= 1'd0;
					main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2 <= 1'd1;
				end
			end
			if ((main_vt_csiinterpreter_csi_final == 7'd65)) begin
				main_vt_csiinterpreter_clear_xy <= 1'd1;
			end
			builder_basesoc_csiinterpreter_next_state <= 1'd0;
		end
		default: begin
			main_vt_csiinterpreter_source_valid <= main_vt_csiinterpreter_sink_valid;
			main_vt_csiinterpreter_sink_ready <= main_vt_csiinterpreter_source_ready;
			main_vt_csiinterpreter_source_first <= main_vt_csiinterpreter_sink_first;
			main_vt_csiinterpreter_source_last <= main_vt_csiinterpreter_sink_last;
			main_vt_csiinterpreter_source_payload_data <= main_vt_csiinterpreter_sink_payload_data;
			if ((main_vt_csiinterpreter_sink_valid & (main_vt_csiinterpreter_sink_payload_data == 5'd27))) begin
				main_vt_csiinterpreter_source_valid <= 1'd0;
				main_vt_csiinterpreter_sink_ready <= 1'd1;
				builder_basesoc_csiinterpreter_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_vt_uart_fifo_syncfifo_din = {main_vt_uart_fifo_fifo_in_last, main_vt_uart_fifo_fifo_in_first, main_vt_uart_fifo_fifo_in_payload_data};
assign {main_vt_uart_fifo_fifo_out_last, main_vt_uart_fifo_fifo_out_first, main_vt_uart_fifo_fifo_out_payload_data} = main_vt_uart_fifo_syncfifo_dout;
assign main_vt_uart_fifo_sink_ready = main_vt_uart_fifo_syncfifo_writable;
assign main_vt_uart_fifo_syncfifo_we = main_vt_uart_fifo_sink_valid;
assign main_vt_uart_fifo_fifo_in_first = main_vt_uart_fifo_sink_first;
assign main_vt_uart_fifo_fifo_in_last = main_vt_uart_fifo_sink_last;
assign main_vt_uart_fifo_fifo_in_payload_data = main_vt_uart_fifo_sink_payload_data;
assign main_vt_uart_fifo_source_valid = main_vt_uart_fifo_syncfifo_readable;
assign main_vt_uart_fifo_source_first = main_vt_uart_fifo_fifo_out_first;
assign main_vt_uart_fifo_source_last = main_vt_uart_fifo_fifo_out_last;
assign main_vt_uart_fifo_source_payload_data = main_vt_uart_fifo_fifo_out_payload_data;
assign main_vt_uart_fifo_syncfifo_re = main_vt_uart_fifo_source_ready;
always @(*) begin
	main_vt_uart_fifo_wrport_adr <= 3'd0;
	if (main_vt_uart_fifo_replace) begin
		main_vt_uart_fifo_wrport_adr <= (main_vt_uart_fifo_produce - 1'd1);
	end else begin
		main_vt_uart_fifo_wrport_adr <= main_vt_uart_fifo_produce;
	end
end
assign main_vt_uart_fifo_wrport_dat_w = main_vt_uart_fifo_syncfifo_din;
assign main_vt_uart_fifo_wrport_we = (main_vt_uart_fifo_syncfifo_we & (main_vt_uart_fifo_syncfifo_writable | main_vt_uart_fifo_replace));
assign main_vt_uart_fifo_do_read = (main_vt_uart_fifo_syncfifo_readable & main_vt_uart_fifo_syncfifo_re);
assign main_vt_uart_fifo_rdport_adr = main_vt_uart_fifo_consume;
assign main_vt_uart_fifo_syncfifo_dout = main_vt_uart_fifo_rdport_dat_r;
assign main_vt_uart_fifo_syncfifo_writable = (main_vt_uart_fifo_level != 4'd8);
assign main_vt_uart_fifo_syncfifo_readable = (main_vt_uart_fifo_level != 1'd0);
always @(*) begin
	main_vt_term_wrport_we <= 1'd0;
	main_vt_uart_fifo_source_ready <= 1'd0;
	builder_basesoc_fsm_next_state <= 4'd0;
	main_vt_term_wrport_dat_w <= 16'd0;
	builder_basesoc_fsm_next_value0 <= 7'd0;
	builder_basesoc_fsm_next_value_ce0 <= 1'd0;
	builder_basesoc_fsm_next_value1 <= 6'd0;
	builder_basesoc_fsm_next_value_ce1 <= 1'd0;
	main_vt_y_term_rollover_fsm_next_value <= 1'd0;
	main_vt_y_term_rollover_fsm_next_value_ce <= 1'd0;
	main_vt_term_wrport_dat_w[15:8] <= main_vt_csiinterpreter_color;
	builder_basesoc_fsm_next_state <= builder_basesoc_fsm_state;
	case (builder_basesoc_fsm_state)
		1'd1: begin
			main_vt_term_wrport_we <= 1'd1;
			main_vt_term_wrport_dat_w[7:0] <= 6'd32;
			main_vt_y_term_rollover_fsm_next_value <= 1'd0;
			main_vt_y_term_rollover_fsm_next_value_ce <= 1'd1;
			builder_basesoc_fsm_next_value0 <= (main_vt_term_wrport_adr[6:0] + 1'd1);
			builder_basesoc_fsm_next_value_ce0 <= 1'd1;
			if ((main_vt_term_wrport_adr[6:0] == 7'd127)) begin
				builder_basesoc_fsm_next_value0 <= 1'd0;
				builder_basesoc_fsm_next_value_ce0 <= 1'd1;
				builder_basesoc_fsm_next_value1 <= (main_vt_term_wrport_adr[12:7] + 1'd1);
				builder_basesoc_fsm_next_value_ce1 <= 1'd1;
				if ((main_vt_term_wrport_adr[12:7] == 6'd36)) begin
					builder_basesoc_fsm_next_value1 <= 1'd0;
					builder_basesoc_fsm_next_value_ce1 <= 1'd1;
					builder_basesoc_fsm_next_state <= 2'd2;
				end
			end
		end
		2'd2: begin
			if (main_vt_uart_fifo_source_valid) begin
				if ((main_vt_uart_fifo_source_payload_data == 4'd10)) begin
					main_vt_uart_fifo_source_ready <= 1'd1;
					builder_basesoc_fsm_next_state <= 3'd7;
				end else begin
					if ((main_vt_uart_fifo_source_payload_data == 4'd13)) begin
						main_vt_uart_fifo_source_ready <= 1'd1;
						builder_basesoc_fsm_next_state <= 3'd4;
					end else begin
						builder_basesoc_fsm_next_state <= 2'd3;
					end
				end
			end
			if (main_vt_csiinterpreter_clear_xy) begin
				builder_basesoc_fsm_next_state <= 1'd1;
			end
		end
		2'd3: begin
			main_vt_uart_fifo_source_ready <= 1'd1;
			main_vt_term_wrport_we <= 1'd1;
			main_vt_term_wrport_dat_w[7:0] <= main_vt_uart_fifo_source_payload_data;
			builder_basesoc_fsm_next_state <= 3'd5;
		end
		3'd4: begin
			builder_basesoc_fsm_next_value0 <= 1'd0;
			builder_basesoc_fsm_next_value_ce0 <= 1'd1;
			builder_basesoc_fsm_next_state <= 4'd8;
		end
		3'd5: begin
			builder_basesoc_fsm_next_value0 <= (main_vt_term_wrport_adr[6:0] + 1'd1);
			builder_basesoc_fsm_next_value_ce0 <= 1'd1;
			builder_basesoc_fsm_next_state <= 2'd2;
			if ((main_vt_term_wrport_adr[6:0] == 7'd79)) begin
				builder_basesoc_fsm_next_value0 <= 1'd0;
				builder_basesoc_fsm_next_value_ce0 <= 1'd1;
				builder_basesoc_fsm_next_state <= 3'd7;
			end
		end
		3'd6: begin
			builder_basesoc_fsm_next_value1 <= 1'd0;
			builder_basesoc_fsm_next_value_ce1 <= 1'd1;
			builder_basesoc_fsm_next_state <= 4'd8;
		end
		3'd7: begin
			builder_basesoc_fsm_next_value1 <= (main_vt_term_wrport_adr[12:7] + 1'd1);
			builder_basesoc_fsm_next_value_ce1 <= 1'd1;
			builder_basesoc_fsm_next_state <= 4'd8;
			if ((main_vt_term_wrport_adr[12:7] == 6'd36)) begin
				main_vt_y_term_rollover_fsm_next_value <= 1'd1;
				main_vt_y_term_rollover_fsm_next_value_ce <= 1'd1;
				builder_basesoc_fsm_next_state <= 3'd6;
			end
		end
		4'd8: begin
			builder_basesoc_fsm_next_value0 <= (main_vt_term_wrport_adr[6:0] + 1'd1);
			builder_basesoc_fsm_next_value_ce0 <= 1'd1;
			main_vt_term_wrport_we <= 1'd1;
			main_vt_term_wrport_dat_w[7:0] <= 6'd32;
			if ((main_vt_term_wrport_adr[6:0] == 7'd127)) begin
				builder_basesoc_fsm_next_value0 <= 1'd0;
				builder_basesoc_fsm_next_value_ce0 <= 1'd1;
				builder_basesoc_fsm_next_state <= 2'd2;
			end
		end
		default: begin
			builder_basesoc_fsm_next_value0 <= 1'd0;
			builder_basesoc_fsm_next_value_ce0 <= 1'd1;
			builder_basesoc_fsm_next_value1 <= 1'd0;
			builder_basesoc_fsm_next_value_ce1 <= 1'd1;
			builder_basesoc_fsm_next_state <= 1'd1;
		end
	endcase
end
assign main_vt_buffer0_sink_ready = ((~main_vt_buffer0_source_valid) | main_vt_buffer0_source_ready);
assign main_vt_buffer1_sink_ready = ((~main_vt_buffer1_source_valid) | main_vt_buffer1_source_ready);
assign main_uart_cdc_cdc_sink_valid = main_uart_cdc_sink_sink_valid;
assign main_uart_cdc_sink_sink_ready = main_uart_cdc_cdc_sink_ready;
assign main_uart_cdc_cdc_sink_first = main_uart_cdc_sink_sink_first;
assign main_uart_cdc_cdc_sink_last = main_uart_cdc_sink_sink_last;
assign main_uart_cdc_cdc_sink_payload_data = main_uart_cdc_sink_sink_payload_data;
assign main_uart_cdc_source_source_valid = main_uart_cdc_cdc_source_valid;
assign main_uart_cdc_cdc_source_ready = main_uart_cdc_source_source_ready;
assign main_uart_cdc_source_source_first = main_uart_cdc_cdc_source_first;
assign main_uart_cdc_source_source_last = main_uart_cdc_cdc_source_last;
assign main_uart_cdc_source_source_payload_data = main_uart_cdc_cdc_source_payload_data;
assign main_uart_cdc_cdc_asyncfifo_din = {main_uart_cdc_cdc_fifo_in_last, main_uart_cdc_cdc_fifo_in_first, main_uart_cdc_cdc_fifo_in_payload_data};
assign {main_uart_cdc_cdc_fifo_out_last, main_uart_cdc_cdc_fifo_out_first, main_uart_cdc_cdc_fifo_out_payload_data} = main_uart_cdc_cdc_asyncfifo_dout;
assign main_uart_cdc_cdc_sink_ready = main_uart_cdc_cdc_asyncfifo_writable;
assign main_uart_cdc_cdc_asyncfifo_we = main_uart_cdc_cdc_sink_valid;
assign main_uart_cdc_cdc_fifo_in_first = main_uart_cdc_cdc_sink_first;
assign main_uart_cdc_cdc_fifo_in_last = main_uart_cdc_cdc_sink_last;
assign main_uart_cdc_cdc_fifo_in_payload_data = main_uart_cdc_cdc_sink_payload_data;
assign main_uart_cdc_cdc_source_valid = main_uart_cdc_cdc_asyncfifo_readable;
assign main_uart_cdc_cdc_source_first = main_uart_cdc_cdc_fifo_out_first;
assign main_uart_cdc_cdc_source_last = main_uart_cdc_cdc_fifo_out_last;
assign main_uart_cdc_cdc_source_payload_data = main_uart_cdc_cdc_fifo_out_payload_data;
assign main_uart_cdc_cdc_asyncfifo_re = main_uart_cdc_cdc_source_ready;
assign main_uart_cdc_cdc_graycounter0_ce = (main_uart_cdc_cdc_asyncfifo_writable & main_uart_cdc_cdc_asyncfifo_we);
assign main_uart_cdc_cdc_graycounter1_ce = (main_uart_cdc_cdc_asyncfifo_readable & main_uart_cdc_cdc_asyncfifo_re);
assign main_uart_cdc_cdc_asyncfifo_writable = (((main_uart_cdc_cdc_graycounter0_q[2] == main_uart_cdc_cdc_consume_wdomain[2]) | (main_uart_cdc_cdc_graycounter0_q[1] == main_uart_cdc_cdc_consume_wdomain[1])) | (main_uart_cdc_cdc_graycounter0_q[0] != main_uart_cdc_cdc_consume_wdomain[0]));
assign main_uart_cdc_cdc_asyncfifo_readable = (main_uart_cdc_cdc_graycounter1_q != main_uart_cdc_cdc_produce_rdomain);
assign main_uart_cdc_cdc_wrport_adr = main_uart_cdc_cdc_graycounter0_q_binary[1:0];
assign main_uart_cdc_cdc_wrport_dat_w = main_uart_cdc_cdc_asyncfifo_din;
assign main_uart_cdc_cdc_wrport_we = main_uart_cdc_cdc_graycounter0_ce;
assign main_uart_cdc_cdc_rdport_adr = main_uart_cdc_cdc_graycounter1_q_next_binary[1:0];
assign main_uart_cdc_cdc_asyncfifo_dout = main_uart_cdc_cdc_rdport_dat_r;
always @(*) begin
	main_uart_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
	if (main_uart_cdc_cdc_graycounter0_ce) begin
		main_uart_cdc_cdc_graycounter0_q_next_binary <= (main_uart_cdc_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		main_uart_cdc_cdc_graycounter0_q_next_binary <= main_uart_cdc_cdc_graycounter0_q_binary;
	end
end
assign main_uart_cdc_cdc_graycounter0_q_next = (main_uart_cdc_cdc_graycounter0_q_next_binary ^ main_uart_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	main_uart_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
	if (main_uart_cdc_cdc_graycounter1_ce) begin
		main_uart_cdc_cdc_graycounter1_q_next_binary <= (main_uart_cdc_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		main_uart_cdc_cdc_graycounter1_q_next_binary <= main_uart_cdc_cdc_graycounter1_q_binary;
	end
end
assign main_uart_cdc_cdc_graycounter1_q_next = (main_uart_cdc_cdc_graycounter1_q_next_binary ^ main_uart_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign main_wait = (~main_done);
always @(*) begin
	main_leds <= 10'd0;
	if ((main_mode == 1'd1)) begin
		main_leds <= main_storage;
	end else begin
		main_leds <= main_chaser;
	end
end
assign {user_led9, user_led8, user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
always @(*) begin
	builder_basesoc_wishbone_dat_r <= 32'd0;
	builder_basesoc_dat_w <= 32'd0;
	builder_basesoc_wishbone2csr_next_state <= 1'd0;
	builder_basesoc_adr <= 14'd0;
	builder_basesoc_we <= 1'd0;
	builder_basesoc_wishbone_ack <= 1'd0;
	builder_basesoc_wishbone2csr_next_state <= builder_basesoc_wishbone2csr_state;
	case (builder_basesoc_wishbone2csr_state)
		1'd1: begin
			builder_basesoc_wishbone_ack <= 1'd1;
			builder_basesoc_wishbone_dat_r <= builder_basesoc_dat_r;
			builder_basesoc_wishbone2csr_next_state <= 1'd0;
		end
		default: begin
			builder_basesoc_dat_w <= builder_basesoc_wishbone_dat_w;
			if ((builder_basesoc_wishbone_cyc & builder_basesoc_wishbone_stb)) begin
				builder_basesoc_adr <= builder_basesoc_wishbone_adr;
				builder_basesoc_we <= (builder_basesoc_wishbone_we & (builder_basesoc_wishbone_sel != 1'd0));
				builder_basesoc_wishbone2csr_next_state <= 1'd1;
			end
		end
	endcase
end
assign builder_shared_adr = builder_comb_array_muxed0;
assign builder_shared_dat_w = builder_comb_array_muxed1;
assign builder_shared_sel = builder_comb_array_muxed2;
assign builder_shared_cyc = builder_comb_array_muxed3;
assign builder_shared_stb = builder_comb_array_muxed4;
assign builder_shared_we = builder_comb_array_muxed5;
assign builder_shared_cti = builder_comb_array_muxed6;
assign builder_shared_bte = builder_comb_array_muxed7;
assign main_basesoc_ibus_dat_r = builder_shared_dat_r;
assign main_basesoc_dbus_dat_r = builder_shared_dat_r;
assign main_basesoc_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_basesoc_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_basesoc_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_basesoc_dbus_cyc, main_basesoc_ibus_cyc};
always @(*) begin
	builder_slave_sel <= 4'd0;
	builder_slave_sel[0] <= (builder_shared_adr[29:15] == 1'd0);
	builder_slave_sel[1] <= (builder_shared_adr[29:11] == 16'd32768);
	builder_slave_sel[2] <= (builder_shared_adr[29:14] == 15'd16384);
	builder_slave_sel[3] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_interface0_ram_bus_adr = builder_shared_adr;
assign main_basesoc_interface0_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_interface0_ram_bus_sel = builder_shared_sel;
assign main_basesoc_interface0_ram_bus_stb = builder_shared_stb;
assign main_basesoc_interface0_ram_bus_we = builder_shared_we;
assign main_basesoc_interface0_ram_bus_cti = builder_shared_cti;
assign main_basesoc_interface0_ram_bus_bte = builder_shared_bte;
assign main_basesoc_interface1_ram_bus_adr = builder_shared_adr;
assign main_basesoc_interface1_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_interface1_ram_bus_sel = builder_shared_sel;
assign main_basesoc_interface1_ram_bus_stb = builder_shared_stb;
assign main_basesoc_interface1_ram_bus_we = builder_shared_we;
assign main_basesoc_interface1_ram_bus_cti = builder_shared_cti;
assign main_basesoc_interface1_ram_bus_bte = builder_shared_bte;
assign builder_basesoc_wishbone_adr = builder_shared_adr;
assign builder_basesoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_basesoc_wishbone_sel = builder_shared_sel;
assign builder_basesoc_wishbone_stb = builder_shared_stb;
assign builder_basesoc_wishbone_we = builder_shared_we;
assign builder_basesoc_wishbone_cti = builder_shared_cti;
assign builder_basesoc_wishbone_bte = builder_shared_bte;
assign main_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_basesoc_interface0_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign main_basesoc_interface1_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_basesoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[3]);
assign builder_shared_err = (((main_basesoc_ram_bus_err | main_basesoc_interface0_ram_bus_err) | main_basesoc_interface1_ram_bus_err) | builder_basesoc_wishbone_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_shared_ack <= 1'd0;
	builder_error <= 1'd0;
	builder_shared_dat_r <= 32'd0;
	builder_shared_ack <= (((main_basesoc_ram_bus_ack | main_basesoc_interface0_ram_bus_ack) | main_basesoc_interface1_ram_bus_ack) | builder_basesoc_wishbone_ack);
	builder_shared_dat_r <= (((({32{builder_slave_sel_r[0]}} & main_basesoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_basesoc_interface0_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & main_basesoc_interface1_ram_bus_dat_r)) | ({32{builder_slave_sel_r[3]}} & builder_basesoc_wishbone_dat_r));
	if (builder_done) begin
		builder_shared_dat_r <= 32'd4294967295;
		builder_shared_ack <= 1'd1;
		builder_error <= 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
		builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	main_basesoc_soc_rst <= 1'd0;
	if (main_basesoc_reset_re) begin
		main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
	end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_basesoc_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_basesoc_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_basesoc_bus_errors_status[31:0];
assign main_basesoc_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (builder_csr_bankarray_sel_r) begin
		builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
	end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_out0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[9:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_out0_re <= 1'd0;
	builder_csr_bankarray_csrbank1_out0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_out0_re <= builder_csr_bankarray_interface1_bank_bus_we;
		builder_csr_bankarray_csrbank1_out0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_out0_w = main_storage[9:0];
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign builder_csr_bankarray_csrbank2_load0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_load0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_load0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank2_load0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_load0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_reload0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_reload0_we <= 1'd0;
	builder_csr_bankarray_csrbank2_reload0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_reload0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_reload0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_en0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_en0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_en0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_en0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_en0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_update_value0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_update_value0_re <= 1'd0;
	builder_csr_bankarray_csrbank2_update_value0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_update_value0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_update_value0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_value_r = builder_csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_value_we <= 1'd0;
	builder_csr_bankarray_csrbank2_value_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_value_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_value_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
	builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
	builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
		builder_csr_bankarray_csrbank2_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_load0_w = main_basesoc_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank2_reload0_w = main_basesoc_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank2_en0_w = main_basesoc_timer_en_storage;
assign builder_csr_bankarray_csrbank2_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csr_bankarray_csrbank2_value_w = main_basesoc_timer_value_status[31:0];
assign main_basesoc_timer_value_we = builder_csr_bankarray_csrbank2_value_we;
assign main_basesoc_timer_status_status = main_basesoc_timer_zero0;
assign builder_csr_bankarray_csrbank2_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
assign main_basesoc_timer_pending_status = main_basesoc_timer_zero1;
assign builder_csr_bankarray_csrbank2_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank2_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csr_bankarray_csrbank3_sel = (builder_csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign main_basesoc_uart_rxtx_r = builder_csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
	main_basesoc_uart_rxtx_re <= 1'd0;
	main_basesoc_uart_rxtx_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		main_basesoc_uart_rxtx_re <= builder_csr_bankarray_interface3_bank_bus_we;
		main_basesoc_uart_rxtx_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_txfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_txfull_we <= 1'd0;
	builder_csr_bankarray_csrbank3_txfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank3_txfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_txfull_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_rxempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_rxempty_re <= 1'd0;
	builder_csr_bankarray_csrbank3_rxempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank3_rxempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_rxempty_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_ev_status_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_status_re <= 1'd0;
	builder_csr_bankarray_csrbank3_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank3_ev_status_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_ev_status_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_ev_pending_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
	builder_csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank3_ev_pending_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_ev_pending_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_ev_enable0_r = builder_csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
	builder_csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank3_ev_enable0_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_ev_enable0_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_txempty_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_txempty_re <= 1'd0;
	builder_csr_bankarray_csrbank3_txempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank3_txempty_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_txempty_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_rxfull_r = builder_csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank3_rxfull_we <= 1'd0;
	builder_csr_bankarray_csrbank3_rxfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank3_sel & (builder_csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank3_rxfull_re <= builder_csr_bankarray_interface3_bank_bus_we;
		builder_csr_bankarray_csrbank3_rxfull_we <= (~builder_csr_bankarray_interface3_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank3_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csr_bankarray_csrbank3_txfull_we;
assign builder_csr_bankarray_csrbank3_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
	main_basesoc_uart_status_status <= 2'd0;
	main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
	main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csr_bankarray_csrbank3_ev_status_w = main_basesoc_uart_status_status[1:0];
assign main_basesoc_uart_status_we = builder_csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
	main_basesoc_uart_pending_status <= 2'd0;
	main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
	main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csr_bankarray_csrbank3_ev_pending_w = main_basesoc_uart_pending_status[1:0];
assign main_basesoc_uart_pending_we = builder_csr_bankarray_csrbank3_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank3_ev_enable0_w = main_basesoc_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank3_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csr_bankarray_csrbank3_txempty_we;
assign builder_csr_bankarray_csrbank3_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csr_bankarray_csrbank3_rxfull_we;
assign builder_csr_bankarray_csrbank4_sel = (builder_csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign builder_csr_bankarray_csrbank4_enable0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank4_enable0_we <= 1'd0;
	builder_csr_bankarray_csrbank4_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank4_enable0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_enable0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_hres0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_hres0_re <= 1'd0;
	builder_csr_bankarray_csrbank4_hres0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank4_hres0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_hres0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_hsync_start0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_hsync_start0_we <= 1'd0;
	builder_csr_bankarray_csrbank4_hsync_start0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank4_hsync_start0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_hsync_start0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_hsync_end0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_hsync_end0_we <= 1'd0;
	builder_csr_bankarray_csrbank4_hsync_end0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank4_hsync_end0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_hsync_end0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_hscan0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_hscan0_re <= 1'd0;
	builder_csr_bankarray_csrbank4_hscan0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank4_hscan0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_hscan0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_vres0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_vres0_we <= 1'd0;
	builder_csr_bankarray_csrbank4_vres0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank4_vres0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_vres0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_vsync_start0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_vsync_start0_re <= 1'd0;
	builder_csr_bankarray_csrbank4_vsync_start0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank4_vsync_start0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_vsync_start0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_vsync_end0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_vsync_end0_re <= 1'd0;
	builder_csr_bankarray_csrbank4_vsync_end0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank4_vsync_end0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_vsync_end0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_vscan0_r = builder_csr_bankarray_interface4_bank_bus_dat_w[11:0];
always @(*) begin
	builder_csr_bankarray_csrbank4_vscan0_we <= 1'd0;
	builder_csr_bankarray_csrbank4_vscan0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank4_sel & (builder_csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd8))) begin
		builder_csr_bankarray_csrbank4_vscan0_re <= builder_csr_bankarray_interface4_bank_bus_we;
		builder_csr_bankarray_csrbank4_vscan0_we <= (~builder_csr_bankarray_interface4_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank4_enable0_w = main_vtg_enable_storage;
assign builder_csr_bankarray_csrbank4_hres0_w = main_vtg_hres_storage[11:0];
assign builder_csr_bankarray_csrbank4_hsync_start0_w = main_vtg_hsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank4_hsync_end0_w = main_vtg_hsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank4_hscan0_w = main_vtg_hscan_storage[11:0];
assign builder_csr_bankarray_csrbank4_vres0_w = main_vtg_vres_storage[11:0];
assign builder_csr_bankarray_csrbank4_vsync_start0_w = main_vtg_vsync_start_storage[11:0];
assign builder_csr_bankarray_csrbank4_vsync_end0_w = main_vtg_vsync_end_storage[11:0];
assign builder_csr_bankarray_csrbank4_vscan0_w = main_vtg_vscan_storage[11:0];
assign builder_csr_interconnect_adr = builder_basesoc_adr;
assign builder_csr_interconnect_we = builder_basesoc_we;
assign builder_csr_interconnect_dat_w = builder_basesoc_dat_w;
assign builder_basesoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface3_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface4_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface3_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface4_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface3_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface4_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_interface3_bank_bus_dat_r) | builder_csr_bankarray_interface4_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	builder_comb_array_muxed0 <= 30'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed0 <= main_basesoc_ibus_adr;
		end
		default: begin
			builder_comb_array_muxed0 <= main_basesoc_dbus_adr;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed1 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed1 <= main_basesoc_ibus_dat_w;
		end
		default: begin
			builder_comb_array_muxed1 <= main_basesoc_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed2 <= 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed2 <= main_basesoc_ibus_sel;
		end
		default: begin
			builder_comb_array_muxed2 <= main_basesoc_dbus_sel;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed3 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed3 <= main_basesoc_ibus_cyc;
		end
		default: begin
			builder_comb_array_muxed3 <= main_basesoc_dbus_cyc;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed4 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed4 <= main_basesoc_ibus_stb;
		end
		default: begin
			builder_comb_array_muxed4 <= main_basesoc_dbus_stb;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed5 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed5 <= main_basesoc_ibus_we;
		end
		default: begin
			builder_comb_array_muxed5 <= main_basesoc_dbus_we;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed6 <= 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed6 <= main_basesoc_ibus_cti;
		end
		default: begin
			builder_comb_array_muxed6 <= main_basesoc_dbus_cti;
		end
	endcase
end
always @(*) begin
	builder_comb_array_muxed7 <= 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_comb_array_muxed7 <= main_basesoc_ibus_bte;
		end
		default: begin
			builder_comb_array_muxed7 <= main_basesoc_dbus_bte;
		end
	endcase
end
assign main_basesoc_rx_rx = builder_multiregimpl0_regs1;
assign main_vtg_enable = builder_multiregimpl1_regs1;
assign main_vtg_hres = builder_multiregimpl2_regs1;
assign main_vtg_hsync_start = builder_multiregimpl3_regs1;
assign main_vtg_hsync_end = builder_multiregimpl4_regs1;
assign main_vtg_hscan = builder_multiregimpl5_regs1;
assign main_vtg_vres = builder_multiregimpl6_regs1;
assign main_vtg_vsync_start = builder_multiregimpl7_regs1;
assign main_vtg_vsync_end = builder_multiregimpl8_regs1;
assign main_vtg_vscan = builder_multiregimpl9_regs1;
assign main_uart_cdc_cdc_produce_rdomain = builder_multiregimpl10_regs1;
assign main_uart_cdc_cdc_consume_wdomain = builder_multiregimpl11_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
	if ((main_basesoc_bus_errors != 32'd4294967295)) begin
		if (main_basesoc_bus_error) begin
			main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
		end
	end
	main_basesoc_ram_bus_ack <= 1'd0;
	if (((main_basesoc_ram_bus_cyc & main_basesoc_ram_bus_stb) & ((~main_basesoc_ram_bus_ack) | main_basesoc_adr_burst))) begin
		main_basesoc_ram_bus_ack <= 1'd1;
	end
	main_basesoc_interface0_ram_bus_ack <= 1'd0;
	if (((main_basesoc_interface0_ram_bus_cyc & main_basesoc_interface0_ram_bus_stb) & ((~main_basesoc_interface0_ram_bus_ack) | main_basesoc_sram0_adr_burst))) begin
		main_basesoc_interface0_ram_bus_ack <= 1'd1;
	end
	main_basesoc_interface1_ram_bus_ack <= 1'd0;
	if (((main_basesoc_interface1_ram_bus_cyc & main_basesoc_interface1_ram_bus_stb) & ((~main_basesoc_interface1_ram_bus_ack) | main_basesoc_sram1_adr_burst))) begin
		main_basesoc_interface1_ram_bus_ack <= 1'd1;
	end
	{main_basesoc_tx_tick, main_basesoc_tx_phase} <= 24'd9895604;
	if (main_basesoc_tx_enable) begin
		{main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 24'd9895604);
	end
	builder_basesoc_rs232phytx_state <= builder_basesoc_rs232phytx_next_state;
	if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
		main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
	end
	if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
	end
	if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
		main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
	end
	main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
	{main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
	if (main_basesoc_rx_enable) begin
		{main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 24'd9895604);
	end
	builder_basesoc_rs232phyrx_state <= builder_basesoc_rs232phyrx_next_state;
	if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
		main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
	end
	if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
		main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
	end
	if (main_basesoc_uart_tx_clear) begin
		main_basesoc_uart_tx_pending <= 1'd0;
	end
	main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
	if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
		main_basesoc_uart_tx_pending <= 1'd1;
	end
	if (main_basesoc_uart_rx_clear) begin
		main_basesoc_uart_rx_pending <= 1'd0;
	end
	main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
	if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
		main_basesoc_uart_rx_pending <= 1'd1;
	end
	if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
		main_basesoc_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (main_basesoc_uart_tx_fifo_re) begin
			main_basesoc_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
		main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
	end
	if (main_basesoc_uart_tx_fifo_do_read) begin
		main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
	end
	if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
		if ((~main_basesoc_uart_tx_fifo_do_read)) begin
			main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_basesoc_uart_tx_fifo_do_read) begin
			main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
		main_basesoc_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (main_basesoc_uart_rx_fifo_re) begin
			main_basesoc_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
		main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
	end
	if (main_basesoc_uart_rx_fifo_do_read) begin
		main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
	end
	if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
		if ((~main_basesoc_uart_rx_fifo_do_read)) begin
			main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_basesoc_uart_rx_fifo_do_read) begin
			main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (main_basesoc_timer_en_storage) begin
		if ((main_basesoc_timer_value == 1'd0)) begin
			main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
		end else begin
			main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
		end
	end else begin
		main_basesoc_timer_value <= main_basesoc_timer_load_storage;
	end
	if (main_basesoc_timer_update_value_re) begin
		main_basesoc_timer_value_status <= main_basesoc_timer_value;
	end
	if (main_basesoc_timer_zero_clear) begin
		main_basesoc_timer_zero_pending <= 1'd0;
	end
	main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
	if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
		main_basesoc_timer_zero_pending <= 1'd1;
	end
	main_uart_cdc_cdc_graycounter0_q_binary <= main_uart_cdc_cdc_graycounter0_q_next_binary;
	main_uart_cdc_cdc_graycounter0_q <= main_uart_cdc_cdc_graycounter0_q_next;
	if (main_done) begin
		main_chaser <= {main_chaser, (~main_chaser[9])};
	end
	if (main_re) begin
		main_mode <= 1'd1;
	end
	if (main_wait) begin
		if ((~main_done)) begin
			main_count <= (main_count - 1'd1);
		end
	end else begin
		main_count <= 22'd2500000;
	end
	builder_basesoc_wishbone2csr_state <= builder_basesoc_wishbone2csr_next_state;
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank0_sel) begin
		case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank0_reset0_re) begin
		main_basesoc_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
	end
	main_basesoc_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
	if (builder_csr_bankarray_csrbank0_scratch0_re) begin
		main_basesoc_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
	end
	main_basesoc_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
	main_basesoc_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
	builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
	builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank1_sel) begin
		case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_out0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank1_out0_re) begin
		main_storage[9:0] <= builder_csr_bankarray_csrbank1_out0_r;
	end
	main_re <= builder_csr_bankarray_csrbank1_out0_re;
	builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank2_sel) begin
		case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_load0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_reload0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_en0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_update_value0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_value_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank2_load0_re) begin
		main_basesoc_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank2_load0_r;
	end
	main_basesoc_timer_load_re <= builder_csr_bankarray_csrbank2_load0_re;
	if (builder_csr_bankarray_csrbank2_reload0_re) begin
		main_basesoc_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank2_reload0_r;
	end
	main_basesoc_timer_reload_re <= builder_csr_bankarray_csrbank2_reload0_re;
	if (builder_csr_bankarray_csrbank2_en0_re) begin
		main_basesoc_timer_en_storage <= builder_csr_bankarray_csrbank2_en0_r;
	end
	main_basesoc_timer_en_re <= builder_csr_bankarray_csrbank2_en0_re;
	if (builder_csr_bankarray_csrbank2_update_value0_re) begin
		main_basesoc_timer_update_value_storage <= builder_csr_bankarray_csrbank2_update_value0_r;
	end
	main_basesoc_timer_update_value_re <= builder_csr_bankarray_csrbank2_update_value0_re;
	main_basesoc_timer_value_re <= builder_csr_bankarray_csrbank2_value_re;
	main_basesoc_timer_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
	if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
		main_basesoc_timer_pending_r <= builder_csr_bankarray_csrbank2_ev_pending_r;
	end
	main_basesoc_timer_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
	if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
		main_basesoc_timer_enable_storage <= builder_csr_bankarray_csrbank2_ev_enable0_r;
	end
	main_basesoc_timer_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
	builder_csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank3_sel) begin
		case (builder_csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txfull_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxempty_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_status_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_pending_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_ev_enable0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_txempty_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface3_bank_bus_dat_r <= builder_csr_bankarray_csrbank3_rxfull_w;
			end
		endcase
	end
	main_basesoc_uart_txfull_re <= builder_csr_bankarray_csrbank3_txfull_re;
	main_basesoc_uart_rxempty_re <= builder_csr_bankarray_csrbank3_rxempty_re;
	main_basesoc_uart_status_re <= builder_csr_bankarray_csrbank3_ev_status_re;
	if (builder_csr_bankarray_csrbank3_ev_pending_re) begin
		main_basesoc_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank3_ev_pending_r;
	end
	main_basesoc_uart_pending_re <= builder_csr_bankarray_csrbank3_ev_pending_re;
	if (builder_csr_bankarray_csrbank3_ev_enable0_re) begin
		main_basesoc_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank3_ev_enable0_r;
	end
	main_basesoc_uart_enable_re <= builder_csr_bankarray_csrbank3_ev_enable0_re;
	main_basesoc_uart_txempty_re <= builder_csr_bankarray_csrbank3_txempty_re;
	main_basesoc_uart_rxfull_re <= builder_csr_bankarray_csrbank3_rxfull_re;
	builder_csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank4_sel) begin
		case (builder_csr_bankarray_interface4_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_enable0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hres0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hsync_start0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hsync_end0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_hscan0_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vres0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vsync_start0_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vsync_end0_w;
			end
			4'd8: begin
				builder_csr_bankarray_interface4_bank_bus_dat_r <= builder_csr_bankarray_csrbank4_vscan0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank4_enable0_re) begin
		main_vtg_enable_storage <= builder_csr_bankarray_csrbank4_enable0_r;
	end
	main_vtg_enable_re <= builder_csr_bankarray_csrbank4_enable0_re;
	if (builder_csr_bankarray_csrbank4_hres0_re) begin
		main_vtg_hres_storage[11:0] <= builder_csr_bankarray_csrbank4_hres0_r;
	end
	main_vtg_hres_re <= builder_csr_bankarray_csrbank4_hres0_re;
	if (builder_csr_bankarray_csrbank4_hsync_start0_re) begin
		main_vtg_hsync_start_storage[11:0] <= builder_csr_bankarray_csrbank4_hsync_start0_r;
	end
	main_vtg_hsync_start_re <= builder_csr_bankarray_csrbank4_hsync_start0_re;
	if (builder_csr_bankarray_csrbank4_hsync_end0_re) begin
		main_vtg_hsync_end_storage[11:0] <= builder_csr_bankarray_csrbank4_hsync_end0_r;
	end
	main_vtg_hsync_end_re <= builder_csr_bankarray_csrbank4_hsync_end0_re;
	if (builder_csr_bankarray_csrbank4_hscan0_re) begin
		main_vtg_hscan_storage[11:0] <= builder_csr_bankarray_csrbank4_hscan0_r;
	end
	main_vtg_hscan_re <= builder_csr_bankarray_csrbank4_hscan0_re;
	if (builder_csr_bankarray_csrbank4_vres0_re) begin
		main_vtg_vres_storage[11:0] <= builder_csr_bankarray_csrbank4_vres0_r;
	end
	main_vtg_vres_re <= builder_csr_bankarray_csrbank4_vres0_re;
	if (builder_csr_bankarray_csrbank4_vsync_start0_re) begin
		main_vtg_vsync_start_storage[11:0] <= builder_csr_bankarray_csrbank4_vsync_start0_r;
	end
	main_vtg_vsync_start_re <= builder_csr_bankarray_csrbank4_vsync_start0_re;
	if (builder_csr_bankarray_csrbank4_vsync_end0_re) begin
		main_vtg_vsync_end_storage[11:0] <= builder_csr_bankarray_csrbank4_vsync_end0_r;
	end
	main_vtg_vsync_end_re <= builder_csr_bankarray_csrbank4_vsync_end0_re;
	if (builder_csr_bankarray_csrbank4_vscan0_re) begin
		main_vtg_vscan_storage[11:0] <= builder_csr_bankarray_csrbank4_vscan0_r;
	end
	main_vtg_vscan_re <= builder_csr_bankarray_csrbank4_vscan0_re;
	if (sys_rst) begin
		main_basesoc_reset_storage <= 2'd0;
		main_basesoc_reset_re <= 1'd0;
		main_basesoc_scratch_storage <= 32'd305419896;
		main_basesoc_scratch_re <= 1'd0;
		main_basesoc_bus_errors_re <= 1'd0;
		main_basesoc_bus_errors <= 32'd0;
		main_basesoc_ram_bus_ack <= 1'd0;
		main_basesoc_interface0_ram_bus_ack <= 1'd0;
		main_basesoc_interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		main_basesoc_tx_tick <= 1'd0;
		main_basesoc_rx_tick <= 1'd0;
		main_basesoc_rx_rx_d <= 1'd0;
		main_basesoc_uart_txfull_re <= 1'd0;
		main_basesoc_uart_rxempty_re <= 1'd0;
		main_basesoc_uart_tx_pending <= 1'd0;
		main_basesoc_uart_tx_trigger_d <= 1'd0;
		main_basesoc_uart_rx_pending <= 1'd0;
		main_basesoc_uart_rx_trigger_d <= 1'd0;
		main_basesoc_uart_status_re <= 1'd0;
		main_basesoc_uart_pending_re <= 1'd0;
		main_basesoc_uart_pending_r <= 2'd0;
		main_basesoc_uart_enable_storage <= 2'd0;
		main_basesoc_uart_enable_re <= 1'd0;
		main_basesoc_uart_txempty_re <= 1'd0;
		main_basesoc_uart_rxfull_re <= 1'd0;
		main_basesoc_uart_tx_fifo_readable <= 1'd0;
		main_basesoc_uart_tx_fifo_level0 <= 5'd0;
		main_basesoc_uart_tx_fifo_produce <= 4'd0;
		main_basesoc_uart_tx_fifo_consume <= 4'd0;
		main_basesoc_uart_rx_fifo_readable <= 1'd0;
		main_basesoc_uart_rx_fifo_level0 <= 5'd0;
		main_basesoc_uart_rx_fifo_produce <= 4'd0;
		main_basesoc_uart_rx_fifo_consume <= 4'd0;
		main_basesoc_timer_load_storage <= 32'd0;
		main_basesoc_timer_load_re <= 1'd0;
		main_basesoc_timer_reload_storage <= 32'd0;
		main_basesoc_timer_reload_re <= 1'd0;
		main_basesoc_timer_en_storage <= 1'd0;
		main_basesoc_timer_en_re <= 1'd0;
		main_basesoc_timer_update_value_storage <= 1'd0;
		main_basesoc_timer_update_value_re <= 1'd0;
		main_basesoc_timer_value_status <= 32'd0;
		main_basesoc_timer_value_re <= 1'd0;
		main_basesoc_timer_zero_pending <= 1'd0;
		main_basesoc_timer_zero_trigger_d <= 1'd0;
		main_basesoc_timer_status_re <= 1'd0;
		main_basesoc_timer_pending_re <= 1'd0;
		main_basesoc_timer_pending_r <= 1'd0;
		main_basesoc_timer_enable_storage <= 1'd0;
		main_basesoc_timer_enable_re <= 1'd0;
		main_basesoc_timer_value <= 32'd0;
		main_vtg_enable_storage <= 1'd1;
		main_vtg_enable_re <= 1'd0;
		main_vtg_hres_storage <= 12'd800;
		main_vtg_hres_re <= 1'd0;
		main_vtg_hsync_start_storage <= 12'd840;
		main_vtg_hsync_start_re <= 1'd0;
		main_vtg_hsync_end_storage <= 12'd968;
		main_vtg_hsync_end_re <= 1'd0;
		main_vtg_hscan_storage <= 12'd1055;
		main_vtg_hscan_re <= 1'd0;
		main_vtg_vres_storage <= 12'd600;
		main_vtg_vres_re <= 1'd0;
		main_vtg_vsync_start_storage <= 12'd601;
		main_vtg_vsync_start_re <= 1'd0;
		main_vtg_vsync_end_storage <= 12'd605;
		main_vtg_vsync_end_re <= 1'd0;
		main_vtg_vscan_storage <= 12'd627;
		main_vtg_vscan_re <= 1'd0;
		main_uart_cdc_cdc_graycounter0_q <= 3'd0;
		main_uart_cdc_cdc_graycounter0_q_binary <= 3'd0;
		main_storage <= 10'd0;
		main_re <= 1'd0;
		main_chaser <= 10'd0;
		main_mode <= 1'd0;
		main_count <= 22'd2500000;
		builder_grant <= 1'd0;
		builder_slave_sel_r <= 4'd0;
		builder_count <= 20'd1000000;
		builder_csr_bankarray_sel_r <= 1'd0;
		builder_basesoc_rs232phytx_state <= 1'd0;
		builder_basesoc_rs232phyrx_state <= 1'd0;
		builder_basesoc_wishbone2csr_state <= 1'd0;
	end
	builder_multiregimpl0_regs0 <= serial_rx;
	builder_multiregimpl0_regs1 <= builder_multiregimpl0_regs0;
	builder_multiregimpl11_regs0 <= main_uart_cdc_cdc_graycounter1_q;
	builder_multiregimpl11_regs1 <= builder_multiregimpl11_regs0;
end

always @(posedge vga_clk) begin
	main_vtg_source_first <= ((main_vtg_source_payload_hcount == 1'd0) & (main_vtg_source_payload_vcount == 1'd0));
	main_vtg_source_last <= ((main_vtg_source_payload_hcount == main_vtg_hscan) & (main_vtg_source_payload_vcount == main_vtg_vscan));
	builder_basesoc_clockdomainsrenamer0_state <= builder_basesoc_clockdomainsrenamer0_next_state;
	if (main_vtg_hactive_next_value_ce0) begin
		main_vtg_hactive <= main_vtg_hactive_next_value0;
	end
	if (main_vtg_vactive_next_value_ce1) begin
		main_vtg_vactive <= main_vtg_vactive_next_value1;
	end
	if (main_vtg_source_payload_hres_next_value_ce2) begin
		main_vtg_source_payload_hres <= main_vtg_source_payload_hres_next_value2;
	end
	if (main_vtg_source_payload_vres_next_value_ce3) begin
		main_vtg_source_payload_vres <= main_vtg_source_payload_vres_next_value3;
	end
	if (main_vtg_source_payload_hcount_next_value_ce4) begin
		main_vtg_source_payload_hcount <= main_vtg_source_payload_hcount_next_value4;
	end
	if (main_vtg_source_payload_vcount_next_value_ce5) begin
		main_vtg_source_payload_vcount <= main_vtg_source_payload_vcount_next_value5;
	end
	if (main_vtg_source_payload_hsync_next_value_ce6) begin
		main_vtg_source_payload_hsync <= main_vtg_source_payload_hsync_next_value6;
	end
	if (main_vtg_source_payload_vsync_next_value_ce7) begin
		main_vtg_source_payload_vsync <= main_vtg_source_payload_vsync_next_value7;
	end
	if (main_vtg_reset) begin
		main_vtg_source_payload_hsync <= 1'd0;
		main_vtg_source_payload_vsync <= 1'd0;
		main_vtg_source_payload_hres <= 12'd0;
		main_vtg_source_payload_vres <= 12'd0;
		main_vtg_source_payload_hcount <= 12'd0;
		main_vtg_source_payload_vcount <= 12'd0;
		main_vtg_hactive <= 1'd0;
		main_vtg_vactive <= 1'd0;
		builder_basesoc_clockdomainsrenamer0_state <= 1'd0;
	end
	builder_basesoc_csiinterpreter_state <= builder_basesoc_csiinterpreter_next_state;
	if (main_vt_csiinterpreter_csi_count_csiinterpreter_next_value_ce0) begin
		main_vt_csiinterpreter_csi_count <= main_vt_csiinterpreter_csi_count_csiinterpreter_next_value0;
	end
	if (builder_basesoc_csiinterpreter_next_value_ce) begin
		builder_sync_array_muxed = builder_basesoc_csiinterpreter_next_value;
		case (main_vt_csiinterpreter_csi_count)
			1'd0: begin
				main_vt_csiinterpreter0 <= builder_sync_array_muxed;
			end
			1'd1: begin
				main_vt_csiinterpreter1 <= builder_sync_array_muxed;
			end
			2'd2: begin
				main_vt_csiinterpreter2 <= builder_sync_array_muxed;
			end
			2'd3: begin
				main_vt_csiinterpreter3 <= builder_sync_array_muxed;
			end
			3'd4: begin
				main_vt_csiinterpreter4 <= builder_sync_array_muxed;
			end
			3'd5: begin
				main_vt_csiinterpreter5 <= builder_sync_array_muxed;
			end
			3'd6: begin
				main_vt_csiinterpreter6 <= builder_sync_array_muxed;
			end
			default: begin
				main_vt_csiinterpreter7 <= builder_sync_array_muxed;
			end
		endcase
	end
	if (main_vt_csiinterpreter_csi_final_csiinterpreter_next_value_ce1) begin
		main_vt_csiinterpreter_csi_final <= main_vt_csiinterpreter_csi_final_csiinterpreter_next_value1;
	end
	if (main_vt_csiinterpreter_color_csiinterpreter_next_value_ce2) begin
		main_vt_csiinterpreter_color <= main_vt_csiinterpreter_color_csiinterpreter_next_value2;
	end
	if (((main_vt_uart_fifo_syncfifo_we & main_vt_uart_fifo_syncfifo_writable) & (~main_vt_uart_fifo_replace))) begin
		main_vt_uart_fifo_produce <= (main_vt_uart_fifo_produce + 1'd1);
	end
	if (main_vt_uart_fifo_do_read) begin
		main_vt_uart_fifo_consume <= (main_vt_uart_fifo_consume + 1'd1);
	end
	if (((main_vt_uart_fifo_syncfifo_we & main_vt_uart_fifo_syncfifo_writable) & (~main_vt_uart_fifo_replace))) begin
		if ((~main_vt_uart_fifo_do_read)) begin
			main_vt_uart_fifo_level <= (main_vt_uart_fifo_level + 1'd1);
		end
	end else begin
		if (main_vt_uart_fifo_do_read) begin
			main_vt_uart_fifo_level <= (main_vt_uart_fifo_level - 1'd1);
		end
	end
	builder_basesoc_fsm_state <= builder_basesoc_fsm_next_state;
	if (builder_basesoc_fsm_next_value_ce0) begin
		main_vt_term_wrport_adr[6:0] <= builder_basesoc_fsm_next_value0;
	end
	if (builder_basesoc_fsm_next_value_ce1) begin
		main_vt_term_wrport_adr[12:7] <= builder_basesoc_fsm_next_value1;
	end
	if (main_vt_y_term_rollover_fsm_next_value_ce) begin
		main_vt_y_term_rollover <= main_vt_y_term_rollover_fsm_next_value;
	end
	if (((~main_vt_buffer0_source_valid) | main_vt_buffer0_source_ready)) begin
		main_vt_buffer0_source_valid <= main_vt_buffer0_sink_valid;
		main_vt_buffer0_source_first <= main_vt_buffer0_sink_first;
		main_vt_buffer0_source_last <= main_vt_buffer0_sink_last;
		main_vt_buffer0_source_payload_hsync <= main_vt_buffer0_sink_payload_hsync;
		main_vt_buffer0_source_payload_vsync <= main_vt_buffer0_sink_payload_vsync;
		main_vt_buffer0_source_payload_de <= main_vt_buffer0_sink_payload_de;
		main_vt_buffer0_source_payload_hres <= main_vt_buffer0_sink_payload_hres;
		main_vt_buffer0_source_payload_vres <= main_vt_buffer0_sink_payload_vres;
		main_vt_buffer0_source_payload_hcount <= main_vt_buffer0_sink_payload_hcount;
		main_vt_buffer0_source_payload_vcount <= main_vt_buffer0_sink_payload_vcount;
	end
	if (((~main_vt_buffer1_source_valid) | main_vt_buffer1_source_ready)) begin
		main_vt_buffer1_source_valid <= main_vt_buffer1_sink_valid;
		main_vt_buffer1_source_first <= main_vt_buffer1_sink_first;
		main_vt_buffer1_source_last <= main_vt_buffer1_sink_last;
		main_vt_buffer1_source_payload_hsync <= main_vt_buffer1_sink_payload_hsync;
		main_vt_buffer1_source_payload_vsync <= main_vt_buffer1_sink_payload_vsync;
		main_vt_buffer1_source_payload_de <= main_vt_buffer1_sink_payload_de;
		main_vt_buffer1_source_payload_hres <= main_vt_buffer1_sink_payload_hres;
		main_vt_buffer1_source_payload_vres <= main_vt_buffer1_sink_payload_vres;
		main_vt_buffer1_source_payload_hcount <= main_vt_buffer1_sink_payload_hcount;
		main_vt_buffer1_source_payload_vcount <= main_vt_buffer1_sink_payload_vcount;
	end
	main_uart_cdc_cdc_graycounter1_q_binary <= main_uart_cdc_cdc_graycounter1_q_next_binary;
	main_uart_cdc_cdc_graycounter1_q <= main_uart_cdc_cdc_graycounter1_q_next;
	if (vga_rst) begin
		main_vtg_source_payload_hsync <= 1'd0;
		main_vtg_source_payload_vsync <= 1'd0;
		main_vtg_source_payload_hres <= 12'd0;
		main_vtg_source_payload_vres <= 12'd0;
		main_vtg_source_payload_hcount <= 12'd0;
		main_vtg_source_payload_vcount <= 12'd0;
		main_vtg_hactive <= 1'd0;
		main_vtg_vactive <= 1'd0;
		main_vt_term_wrport_adr <= 13'd0;
		main_vt_csiinterpreter_color <= 4'd0;
		main_vt_csiinterpreter_csi_count <= 3'd0;
		main_vt_csiinterpreter0 <= 8'd0;
		main_vt_csiinterpreter1 <= 8'd0;
		main_vt_csiinterpreter2 <= 8'd0;
		main_vt_csiinterpreter3 <= 8'd0;
		main_vt_csiinterpreter4 <= 8'd0;
		main_vt_csiinterpreter5 <= 8'd0;
		main_vt_csiinterpreter6 <= 8'd0;
		main_vt_csiinterpreter7 <= 8'd0;
		main_vt_csiinterpreter_csi_final <= 8'd0;
		main_vt_uart_fifo_level <= 4'd0;
		main_vt_uart_fifo_produce <= 3'd0;
		main_vt_uart_fifo_consume <= 3'd0;
		main_vt_y_term_rollover <= 1'd0;
		main_vt_buffer0_source_valid <= 1'd0;
		main_vt_buffer0_source_payload_hsync <= 1'd0;
		main_vt_buffer0_source_payload_vsync <= 1'd0;
		main_vt_buffer0_source_payload_de <= 1'd0;
		main_vt_buffer0_source_payload_hres <= 12'd0;
		main_vt_buffer0_source_payload_vres <= 12'd0;
		main_vt_buffer0_source_payload_hcount <= 12'd0;
		main_vt_buffer0_source_payload_vcount <= 12'd0;
		main_vt_buffer1_source_valid <= 1'd0;
		main_vt_buffer1_source_payload_hsync <= 1'd0;
		main_vt_buffer1_source_payload_vsync <= 1'd0;
		main_vt_buffer1_source_payload_de <= 1'd0;
		main_vt_buffer1_source_payload_hres <= 12'd0;
		main_vt_buffer1_source_payload_vres <= 12'd0;
		main_vt_buffer1_source_payload_hcount <= 12'd0;
		main_vt_buffer1_source_payload_vcount <= 12'd0;
		main_uart_cdc_cdc_graycounter1_q <= 3'd0;
		main_uart_cdc_cdc_graycounter1_q_binary <= 3'd0;
		builder_basesoc_clockdomainsrenamer0_state <= 1'd0;
		builder_basesoc_csiinterpreter_state <= 3'd0;
		builder_basesoc_fsm_state <= 4'd0;
	end
	builder_multiregimpl1_regs0 <= main_vtg_enable_storage;
	builder_multiregimpl1_regs1 <= builder_multiregimpl1_regs0;
	builder_multiregimpl2_regs0 <= main_vtg_hres_storage;
	builder_multiregimpl2_regs1 <= builder_multiregimpl2_regs0;
	builder_multiregimpl3_regs0 <= main_vtg_hsync_start_storage;
	builder_multiregimpl3_regs1 <= builder_multiregimpl3_regs0;
	builder_multiregimpl4_regs0 <= main_vtg_hsync_end_storage;
	builder_multiregimpl4_regs1 <= builder_multiregimpl4_regs0;
	builder_multiregimpl5_regs0 <= main_vtg_hscan_storage;
	builder_multiregimpl5_regs1 <= builder_multiregimpl5_regs0;
	builder_multiregimpl6_regs0 <= main_vtg_vres_storage;
	builder_multiregimpl6_regs1 <= builder_multiregimpl6_regs0;
	builder_multiregimpl7_regs0 <= main_vtg_vsync_start_storage;
	builder_multiregimpl7_regs1 <= builder_multiregimpl7_regs0;
	builder_multiregimpl8_regs0 <= main_vtg_vsync_end_storage;
	builder_multiregimpl8_regs1 <= builder_multiregimpl8_regs0;
	builder_multiregimpl9_regs0 <= main_vtg_vscan_storage;
	builder_multiregimpl9_regs1 <= builder_multiregimpl9_regs0;
	builder_multiregimpl10_regs0 <= main_uart_cdc_cdc_graycounter0_q;
	builder_multiregimpl10_regs1 <= builder_multiregimpl10_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5969-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5968];
initial begin
	$readmemh("terasic_de10lite_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_adr];
end
assign main_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("terasic_de10lite_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_sram0_we[0])
		sram[main_basesoc_sram0_adr][7:0] <= main_basesoc_sram0_dat_w[7:0];
	if (main_basesoc_sram0_we[1])
		sram[main_basesoc_sram0_adr][15:8] <= main_basesoc_sram0_dat_w[15:8];
	if (main_basesoc_sram0_we[2])
		sram[main_basesoc_sram0_adr][23:16] <= main_basesoc_sram0_dat_w[23:16];
	if (main_basesoc_sram0_we[3])
		sram[main_basesoc_sram0_adr][31:24] <= main_basesoc_sram0_dat_w[31:24];
	sram_adr0 <= main_basesoc_sram0_adr;
end
assign main_basesoc_sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 16384-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:16383];
initial begin
	$readmemh("terasic_de10lite_main_ram.init", main_ram);
end
reg [13:0] main_ram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_sram1_we[0])
		main_ram[main_basesoc_sram1_adr][7:0] <= main_basesoc_sram1_dat_w[7:0];
	if (main_basesoc_sram1_we[1])
		main_ram[main_basesoc_sram1_adr][15:8] <= main_basesoc_sram1_dat_w[15:8];
	if (main_basesoc_sram1_we[2])
		main_ram[main_basesoc_sram1_adr][23:16] <= main_basesoc_sram1_dat_w[23:16];
	if (main_basesoc_sram1_we[3])
		main_ram[main_basesoc_sram1_adr][31:24] <= main_basesoc_sram1_dat_w[31:24];
	main_ram_adr0 <= main_basesoc_sram1_adr;
end
assign main_basesoc_sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 43-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:42];
initial begin
	$readmemh("terasic_de10lite_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory font_mem: 4096-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] font_mem[0:4095];
initial begin
	$readmemh("terasic_de10lite_font_mem.init", font_mem);
end
reg [11:0] font_mem_adr0;
always @(posedge vga_clk) begin
	if (main_vt_font_rdport_re)
		font_mem_adr0 <= main_vt_font_rdport_adr;
end
assign main_vt_font_rdport_dat_r = font_mem[font_mem_adr0];


//------------------------------------------------------------------------------
// Memory term_mem: 4736-words x 16-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 16 
// Port 1 | Read: Sync  | Write: ---- | 
reg [15:0] term_mem[0:4735];
initial begin
	$readmemh("terasic_de10lite_term_mem.init", term_mem);
end
reg [12:0] term_mem_adr0;
reg [12:0] term_mem_adr1;
always @(posedge vga_clk) begin
	if (main_vt_term_wrport_we)
		term_mem[main_vt_term_wrport_adr] <= main_vt_term_wrport_dat_w;
	term_mem_adr0 <= main_vt_term_wrport_adr;
end
always @(posedge vga_clk) begin
	if (main_vt_term_rdport_re)
		term_mem_adr1 <= main_vt_term_rdport_adr;
end
assign main_vt_term_wrport_dat_r = term_mem[term_mem_adr0];
assign main_vt_term_rdport_dat_r = term_mem[term_mem_adr1];


//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Async | Write: ---- | 
reg [9:0] storage_2[0:7];
reg [9:0] storage_2_dat0;
always @(posedge vga_clk) begin
	if (main_vt_uart_fifo_wrport_we)
		storage_2[main_vt_uart_fifo_wrport_adr] <= main_vt_uart_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[main_vt_uart_fifo_wrport_adr];
end
always @(posedge vga_clk) begin
end
assign main_vt_uart_fifo_wrport_dat_r = storage_2_dat0;
assign main_vt_uart_fifo_rdport_dat_r = storage_2[main_vt_uart_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_3[0:3];
reg [9:0] storage_3_dat0;
reg [9:0] storage_3_dat1;
always @(posedge sys_clk) begin
	if (main_uart_cdc_cdc_wrport_we)
		storage_3[main_uart_cdc_cdc_wrport_adr] <= main_uart_cdc_cdc_wrport_dat_w;
	storage_3_dat0 <= storage_3[main_uart_cdc_cdc_wrport_adr];
end
always @(posedge vga_clk) begin
	storage_3_dat1 <= storage_3[main_uart_cdc_cdc_rdport_adr];
end
assign main_uart_cdc_cdc_wrport_dat_r = storage_3_dat0;
assign main_uart_cdc_cdc_rdport_dat_r = storage_3_dat1;


ALTPLL #(
	.BANDWIDTH_TYPE("AUTO"),
	.CLK0_DIVIDE_BY(9'd504),
	.CLK0_DUTY_CYCLE(6'd50),
	.CLK0_MULTIPLY_BY(9'd504),
	.CLK0_PHASE_SHIFT(1'd0),
	.CLK1_DIVIDE_BY(9'd504),
	.CLK1_DUTY_CYCLE(6'd50),
	.CLK1_MULTIPLY_BY(9'd504),
	.CLK1_PHASE_SHIFT(13'd5000),
	.CLK2_DIVIDE_BY(10'd630),
	.CLK2_DUTY_CYCLE(6'd50),
	.CLK2_MULTIPLY_BY(9'd504),
	.CLK2_PHASE_SHIFT(1'd0),
	.COMPENSATE_CLOCK("CLK0"),
	.INCLK0_INPUT_FREQUENCY(15'd20000),
	.OPERATION_MODE("NORMAL")
) ALTPLL (
	.ARESET(1'd0),
	.CLKENA(5'd31),
	.EXTCLKENA(4'd15),
	.FBIN(1'd1),
	.INCLK(main_clkin),
	.PFDENA(1'd1),
	.PLLENA(1'd1),
	.CLK(builder_basesoc_clks),
	.LOCKED(main_locked)
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(main_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO(main_basesoc_dbus_dat_r),
	.dBusWishbone_ERR(main_basesoc_dbus_err),
	.externalInterruptArray(main_basesoc_interrupt),
	.externalResetVector(main_basesoc_vexriscv),
	.iBusWishbone_ACK(main_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO(main_basesoc_ibus_dat_r),
	.iBusWishbone_ERR(main_basesoc_ibus_err),
	.reset((sys_rst | main_basesoc_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(main_basesoc_dbus_adr),
	.dBusWishbone_BTE(main_basesoc_dbus_bte),
	.dBusWishbone_CTI(main_basesoc_dbus_cti),
	.dBusWishbone_CYC(main_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI(main_basesoc_dbus_dat_w),
	.dBusWishbone_SEL(main_basesoc_dbus_sel),
	.dBusWishbone_STB(main_basesoc_dbus_stb),
	.dBusWishbone_WE(main_basesoc_dbus_we),
	.iBusWishbone_ADR(main_basesoc_ibus_adr),
	.iBusWishbone_BTE(main_basesoc_ibus_bte),
	.iBusWishbone_CTI(main_basesoc_ibus_cti),
	.iBusWishbone_CYC(main_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI(main_basesoc_ibus_dat_w),
	.iBusWishbone_SEL(main_basesoc_ibus_sel),
	.iBusWishbone_STB(main_basesoc_ibus_stb),
	.iBusWishbone_WE(main_basesoc_ibus_we)
);

DFF ars_cd_sys_ff0(
	.clk(sys_clk),
	.clrn(1'd1),
	.d(1'd0),
	.prn((~(~main_locked))),
	.q(ars_cd_sys_rst_meta)
);

DFF ars_cd_sys_ff1(
	.clk(sys_clk),
	.clrn(1'd1),
	.d(ars_cd_sys_rst_meta),
	.prn((~(~main_locked))),
	.q(sys_rst)
);

DFF ars_cd_sys_ps_ff0(
	.clk(sys_ps_clk),
	.clrn(1'd1),
	.d(1'd0),
	.prn((~(~main_locked))),
	.q(ars_cd_sys_ps_rst_meta)
);

DFF ars_cd_sys_ps_ff1(
	.clk(sys_ps_clk),
	.clrn(1'd1),
	.d(ars_cd_sys_ps_rst_meta),
	.prn((~(~main_locked))),
	.q(sys_ps_rst)
);

DFF ars_cd_vga_ff0(
	.clk(vga_clk),
	.clrn(1'd1),
	.d(1'd0),
	.prn((~(~main_locked))),
	.q(ars_cd_vga_rst_meta)
);

DFF ars_cd_vga_ff1(
	.clk(vga_clk),
	.clrn(1'd1),
	.d(ars_cd_vga_rst_meta),
	.prn((~(~main_locked))),
	.q(vga_rst)
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT (
	.datain_h(1'd1),
	.datain_l(1'd0),
	.outclock(sys_ps_clk),
	.dataout(sdram_clock)
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_1 (
	.datain_h((~main_sink_payload_hsync)),
	.datain_l((~main_sink_payload_hsync)),
	.outclock(vga_clk),
	.dataout(vga_hsync_n)
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_2 (
	.datain_h((~main_sink_payload_vsync)),
	.datain_l((~main_sink_payload_vsync)),
	.outclock(vga_clk),
	.dataout(vga_vsync_n)
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_3 (
	.datain_h((main_sink_payload_r[4] & main_sink_payload_de)),
	.datain_l((main_sink_payload_r[4] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_r[0])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_4 (
	.datain_h((main_sink_payload_g[4] & main_sink_payload_de)),
	.datain_l((main_sink_payload_g[4] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_g[0])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_5 (
	.datain_h((main_sink_payload_b[4] & main_sink_payload_de)),
	.datain_l((main_sink_payload_b[4] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_b[0])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_6 (
	.datain_h((main_sink_payload_r[5] & main_sink_payload_de)),
	.datain_l((main_sink_payload_r[5] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_r[1])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_7 (
	.datain_h((main_sink_payload_g[5] & main_sink_payload_de)),
	.datain_l((main_sink_payload_g[5] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_g[1])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_8 (
	.datain_h((main_sink_payload_b[5] & main_sink_payload_de)),
	.datain_l((main_sink_payload_b[5] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_b[1])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_9 (
	.datain_h((main_sink_payload_r[6] & main_sink_payload_de)),
	.datain_l((main_sink_payload_r[6] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_r[2])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_10 (
	.datain_h((main_sink_payload_g[6] & main_sink_payload_de)),
	.datain_l((main_sink_payload_g[6] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_g[2])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_11 (
	.datain_h((main_sink_payload_b[6] & main_sink_payload_de)),
	.datain_l((main_sink_payload_b[6] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_b[2])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_12 (
	.datain_h((main_sink_payload_r[7] & main_sink_payload_de)),
	.datain_l((main_sink_payload_r[7] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_r[3])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_13 (
	.datain_h((main_sink_payload_g[7] & main_sink_payload_de)),
	.datain_l((main_sink_payload_g[7] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_g[3])
);

ALTDDIO_OUT #(
	.WIDTH(1'd1)
) ALTDDIO_OUT_14 (
	.datain_h((main_sink_payload_b[7] & main_sink_payload_de)),
	.datain_l((main_sink_payload_b[7] & main_sink_payload_de)),
	.outclock(vga_clk),
	.dataout(vga_b[3])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-08-15 13:04:53.
//------------------------------------------------------------------------------
