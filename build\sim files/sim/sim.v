// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : 552d7bdb
// Date       : 2022-08-15 10:04:27
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sim (
	output wire sim_trace,
	input  wire sys_clk,
	output wire serial_source_valid,
	input  wire serial_source_ready,
	output wire [7:0] serial_source_data,
	input  wire serial_sink_valid,
	output wire serial_sink_ready,
	input  wire [7:0] serial_sink_data,
	output reg  [31:0] gpio_oe,
	output reg  [31:0] gpio_o,
	input  wire [31:0] gpio_i
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire sys_clk_1;
wire sys_rst;
wire por_clk;
reg  int_rst = 1'd1;
reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
wire bus_error;
reg  [31:0] bus_errors = 32'd0;
wire reset;
reg  [31:0] interrupt = 32'd0;
wire [29:0] ibus_adr;
wire [31:0] ibus_dat_w;
wire [31:0] ibus_dat_r;
wire [3:0] ibus_sel;
wire ibus_cyc;
wire ibus_stb;
wire ibus_ack;
wire ibus_we;
wire [2:0] ibus_cti;
wire [1:0] ibus_bte;
wire ibus_err;
wire [29:0] dbus_adr;
wire [31:0] dbus_dat_w;
wire [31:0] dbus_dat_r;
wire [3:0] dbus_sel;
wire dbus_cyc;
wire dbus_stb;
wire dbus_ack;
wire dbus_we;
wire [2:0] dbus_cti;
wire [1:0] dbus_bte;
wire dbus_err;
reg  [31:0] vexriscv = 32'd0;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg  ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg  ram_bus_err = 1'd0;
reg  adr_burst = 1'd0;
wire [14:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg  interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg  interface0_ram_bus_err = 1'd0;
reg  sram0_adr_burst = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg  [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg  interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg  interface1_ram_bus_err = 1'd0;
reg  sram1_adr_burst = 1'd0;
wire [13:0] sram1_adr;
wire [31:0] sram1_dat_r;
reg  [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
wire sink_valid;
wire sink_ready;
wire sink_first;
wire sink_last;
wire [7:0] sink_payload_data;
wire source_valid;
wire source_ready;
reg  source_first = 1'd0;
reg  source_last = 1'd0;
wire [7:0] source_payload_data;
reg  uart_rxtx_re = 1'd0;
wire [7:0] uart_rxtx_r;
reg  uart_rxtx_we = 1'd0;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg  uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg  uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg  uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg  uart_tx_clear = 1'd0;
reg  uart_tx_trigger_d = 1'd0;
wire uart_rx_status;
reg  uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg  uart_rx_clear = 1'd0;
reg  uart_rx_trigger_d = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg  [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg  uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg  [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg  uart_pending_re = 1'd0;
reg  [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg  [1:0] uart_enable_storage = 2'd0;
reg  uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg  uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg  uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg  uart_tx_fifo_sink_first = 1'd0;
reg  uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg  uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg  [4:0] uart_tx_fifo_level0 = 5'd0;
reg  uart_tx_fifo_replace = 1'd0;
reg  [3:0] uart_tx_fifo_produce = 4'd0;
reg  [3:0] uart_tx_fifo_consume = 4'd0;
reg  [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg  uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg  [4:0] uart_rx_fifo_level0 = 5'd0;
reg  uart_rx_fifo_replace = 1'd0;
reg  [3:0] uart_rx_fifo_produce = 4'd0;
reg  [3:0] uart_rx_fifo_consume = 4'd0;
reg  [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg  [31:0] timer_load_storage = 32'd0;
reg  timer_load_re = 1'd0;
reg  [31:0] timer_reload_storage = 32'd0;
reg  timer_reload_re = 1'd0;
reg  timer_en_storage = 1'd0;
reg  timer_en_re = 1'd0;
reg  timer_update_value_storage = 1'd0;
reg  timer_update_value_re = 1'd0;
reg  [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg  timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg  timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg  timer_zero_clear = 1'd0;
reg  timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg  timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg  timer_pending_re = 1'd0;
reg  timer_pending_r = 1'd0;
wire timer_zero2;
reg  timer_enable_storage = 1'd0;
reg  timer_enable_re = 1'd0;
reg  [31:0] timer_value = 32'd0;
reg  [31:0] oe_storage = 32'd0;
reg  oe_re = 1'd0;
reg  [31:0] in_status = 32'd0;
wire in_we;
reg  in_re = 1'd0;
reg  [31:0] out_storage = 32'd0;
reg  out_re = 1'd0;
reg  [31:0] mode_storage = 32'd0;
reg  mode_re = 1'd0;
reg  [31:0] edge_storage = 32'd0;
reg  edge_re = 1'd0;
wire irq;
reg  in_pads_n_d0 = 1'd0;
wire eventsourceprocess0_status;
reg  eventsourceprocess0_pending = 1'd0;
reg  eventsourceprocess0_trigger = 1'd0;
reg  eventsourceprocess0_clear = 1'd0;
reg  eventsourceprocess0_trigger_d = 1'd0;
reg  in_pads_n_d1 = 1'd0;
wire eventsourceprocess1_status;
reg  eventsourceprocess1_pending = 1'd0;
reg  eventsourceprocess1_trigger = 1'd0;
reg  eventsourceprocess1_clear = 1'd0;
reg  eventsourceprocess1_trigger_d = 1'd0;
reg  in_pads_n_d2 = 1'd0;
wire eventsourceprocess2_status;
reg  eventsourceprocess2_pending = 1'd0;
reg  eventsourceprocess2_trigger = 1'd0;
reg  eventsourceprocess2_clear = 1'd0;
reg  eventsourceprocess2_trigger_d = 1'd0;
reg  in_pads_n_d3 = 1'd0;
wire eventsourceprocess3_status;
reg  eventsourceprocess3_pending = 1'd0;
reg  eventsourceprocess3_trigger = 1'd0;
reg  eventsourceprocess3_clear = 1'd0;
reg  eventsourceprocess3_trigger_d = 1'd0;
reg  in_pads_n_d4 = 1'd0;
wire eventsourceprocess4_status;
reg  eventsourceprocess4_pending = 1'd0;
reg  eventsourceprocess4_trigger = 1'd0;
reg  eventsourceprocess4_clear = 1'd0;
reg  eventsourceprocess4_trigger_d = 1'd0;
reg  in_pads_n_d5 = 1'd0;
wire eventsourceprocess5_status;
reg  eventsourceprocess5_pending = 1'd0;
reg  eventsourceprocess5_trigger = 1'd0;
reg  eventsourceprocess5_clear = 1'd0;
reg  eventsourceprocess5_trigger_d = 1'd0;
reg  in_pads_n_d6 = 1'd0;
wire eventsourceprocess6_status;
reg  eventsourceprocess6_pending = 1'd0;
reg  eventsourceprocess6_trigger = 1'd0;
reg  eventsourceprocess6_clear = 1'd0;
reg  eventsourceprocess6_trigger_d = 1'd0;
reg  in_pads_n_d7 = 1'd0;
wire eventsourceprocess7_status;
reg  eventsourceprocess7_pending = 1'd0;
reg  eventsourceprocess7_trigger = 1'd0;
reg  eventsourceprocess7_clear = 1'd0;
reg  eventsourceprocess7_trigger_d = 1'd0;
reg  in_pads_n_d8 = 1'd0;
wire eventsourceprocess8_status;
reg  eventsourceprocess8_pending = 1'd0;
reg  eventsourceprocess8_trigger = 1'd0;
reg  eventsourceprocess8_clear = 1'd0;
reg  eventsourceprocess8_trigger_d = 1'd0;
reg  in_pads_n_d9 = 1'd0;
wire eventsourceprocess9_status;
reg  eventsourceprocess9_pending = 1'd0;
reg  eventsourceprocess9_trigger = 1'd0;
reg  eventsourceprocess9_clear = 1'd0;
reg  eventsourceprocess9_trigger_d = 1'd0;
reg  in_pads_n_d10 = 1'd0;
wire eventsourceprocess10_status;
reg  eventsourceprocess10_pending = 1'd0;
reg  eventsourceprocess10_trigger = 1'd0;
reg  eventsourceprocess10_clear = 1'd0;
reg  eventsourceprocess10_trigger_d = 1'd0;
reg  in_pads_n_d11 = 1'd0;
wire eventsourceprocess11_status;
reg  eventsourceprocess11_pending = 1'd0;
reg  eventsourceprocess11_trigger = 1'd0;
reg  eventsourceprocess11_clear = 1'd0;
reg  eventsourceprocess11_trigger_d = 1'd0;
reg  in_pads_n_d12 = 1'd0;
wire eventsourceprocess12_status;
reg  eventsourceprocess12_pending = 1'd0;
reg  eventsourceprocess12_trigger = 1'd0;
reg  eventsourceprocess12_clear = 1'd0;
reg  eventsourceprocess12_trigger_d = 1'd0;
reg  in_pads_n_d13 = 1'd0;
wire eventsourceprocess13_status;
reg  eventsourceprocess13_pending = 1'd0;
reg  eventsourceprocess13_trigger = 1'd0;
reg  eventsourceprocess13_clear = 1'd0;
reg  eventsourceprocess13_trigger_d = 1'd0;
reg  in_pads_n_d14 = 1'd0;
wire eventsourceprocess14_status;
reg  eventsourceprocess14_pending = 1'd0;
reg  eventsourceprocess14_trigger = 1'd0;
reg  eventsourceprocess14_clear = 1'd0;
reg  eventsourceprocess14_trigger_d = 1'd0;
reg  in_pads_n_d15 = 1'd0;
wire eventsourceprocess15_status;
reg  eventsourceprocess15_pending = 1'd0;
reg  eventsourceprocess15_trigger = 1'd0;
reg  eventsourceprocess15_clear = 1'd0;
reg  eventsourceprocess15_trigger_d = 1'd0;
reg  in_pads_n_d16 = 1'd0;
wire eventsourceprocess16_status;
reg  eventsourceprocess16_pending = 1'd0;
reg  eventsourceprocess16_trigger = 1'd0;
reg  eventsourceprocess16_clear = 1'd0;
reg  eventsourceprocess16_trigger_d = 1'd0;
reg  in_pads_n_d17 = 1'd0;
wire eventsourceprocess17_status;
reg  eventsourceprocess17_pending = 1'd0;
reg  eventsourceprocess17_trigger = 1'd0;
reg  eventsourceprocess17_clear = 1'd0;
reg  eventsourceprocess17_trigger_d = 1'd0;
reg  in_pads_n_d18 = 1'd0;
wire eventsourceprocess18_status;
reg  eventsourceprocess18_pending = 1'd0;
reg  eventsourceprocess18_trigger = 1'd0;
reg  eventsourceprocess18_clear = 1'd0;
reg  eventsourceprocess18_trigger_d = 1'd0;
reg  in_pads_n_d19 = 1'd0;
wire eventsourceprocess19_status;
reg  eventsourceprocess19_pending = 1'd0;
reg  eventsourceprocess19_trigger = 1'd0;
reg  eventsourceprocess19_clear = 1'd0;
reg  eventsourceprocess19_trigger_d = 1'd0;
reg  in_pads_n_d20 = 1'd0;
wire eventsourceprocess20_status;
reg  eventsourceprocess20_pending = 1'd0;
reg  eventsourceprocess20_trigger = 1'd0;
reg  eventsourceprocess20_clear = 1'd0;
reg  eventsourceprocess20_trigger_d = 1'd0;
reg  in_pads_n_d21 = 1'd0;
wire eventsourceprocess21_status;
reg  eventsourceprocess21_pending = 1'd0;
reg  eventsourceprocess21_trigger = 1'd0;
reg  eventsourceprocess21_clear = 1'd0;
reg  eventsourceprocess21_trigger_d = 1'd0;
reg  in_pads_n_d22 = 1'd0;
wire eventsourceprocess22_status;
reg  eventsourceprocess22_pending = 1'd0;
reg  eventsourceprocess22_trigger = 1'd0;
reg  eventsourceprocess22_clear = 1'd0;
reg  eventsourceprocess22_trigger_d = 1'd0;
reg  in_pads_n_d23 = 1'd0;
wire eventsourceprocess23_status;
reg  eventsourceprocess23_pending = 1'd0;
reg  eventsourceprocess23_trigger = 1'd0;
reg  eventsourceprocess23_clear = 1'd0;
reg  eventsourceprocess23_trigger_d = 1'd0;
reg  in_pads_n_d24 = 1'd0;
wire eventsourceprocess24_status;
reg  eventsourceprocess24_pending = 1'd0;
reg  eventsourceprocess24_trigger = 1'd0;
reg  eventsourceprocess24_clear = 1'd0;
reg  eventsourceprocess24_trigger_d = 1'd0;
reg  in_pads_n_d25 = 1'd0;
wire eventsourceprocess25_status;
reg  eventsourceprocess25_pending = 1'd0;
reg  eventsourceprocess25_trigger = 1'd0;
reg  eventsourceprocess25_clear = 1'd0;
reg  eventsourceprocess25_trigger_d = 1'd0;
reg  in_pads_n_d26 = 1'd0;
wire eventsourceprocess26_status;
reg  eventsourceprocess26_pending = 1'd0;
reg  eventsourceprocess26_trigger = 1'd0;
reg  eventsourceprocess26_clear = 1'd0;
reg  eventsourceprocess26_trigger_d = 1'd0;
reg  in_pads_n_d27 = 1'd0;
wire eventsourceprocess27_status;
reg  eventsourceprocess27_pending = 1'd0;
reg  eventsourceprocess27_trigger = 1'd0;
reg  eventsourceprocess27_clear = 1'd0;
reg  eventsourceprocess27_trigger_d = 1'd0;
reg  in_pads_n_d28 = 1'd0;
wire eventsourceprocess28_status;
reg  eventsourceprocess28_pending = 1'd0;
reg  eventsourceprocess28_trigger = 1'd0;
reg  eventsourceprocess28_clear = 1'd0;
reg  eventsourceprocess28_trigger_d = 1'd0;
reg  in_pads_n_d29 = 1'd0;
wire eventsourceprocess29_status;
reg  eventsourceprocess29_pending = 1'd0;
reg  eventsourceprocess29_trigger = 1'd0;
reg  eventsourceprocess29_clear = 1'd0;
reg  eventsourceprocess29_trigger_d = 1'd0;
reg  in_pads_n_d30 = 1'd0;
wire eventsourceprocess30_status;
reg  eventsourceprocess30_pending = 1'd0;
reg  eventsourceprocess30_trigger = 1'd0;
reg  eventsourceprocess30_clear = 1'd0;
reg  eventsourceprocess30_trigger_d = 1'd0;
reg  in_pads_n_d31 = 1'd0;
wire eventsourceprocess31_status;
reg  eventsourceprocess31_pending = 1'd0;
reg  eventsourceprocess31_trigger = 1'd0;
reg  eventsourceprocess31_clear = 1'd0;
reg  eventsourceprocess31_trigger_d = 1'd0;
reg  sim_trace_storage = 1'd0;
reg  sim_trace_re = 1'd0;
reg  [7:0] sim_marker_storage = 8'd0;
reg  sim_marker_re = 1'd0;
reg  finish_re = 1'd0;
wire finish_r;
reg  finish_we = 1'd0;
reg  finish_w = 1'd0;
wire scope_clk;
reg  scope_rst = 1'd0;
wire mux_valid;
reg  mux_ready = 1'd0;
reg  mux_first = 1'd0;
reg  mux_last = 1'd0;
wire [203:0] mux_payload_data;
reg  mux_payload_hit = 1'd0;
reg  mux_source_valid = 1'd0;
wire mux_source_ready;
reg  mux_source_first = 1'd0;
reg  mux_source_last = 1'd0;
reg  [203:0] mux_source_payload_data = 204'd0;
reg  mux_source_payload_hit = 1'd0;
reg  mux_value_storage = 1'd0;
reg  mux_value_re = 1'd0;
wire mux_value;
wire trigger_sink_sink_valid;
wire trigger_sink_sink_ready;
wire trigger_sink_sink_first;
wire trigger_sink_sink_last;
wire [203:0] trigger_sink_sink_payload_data;
wire trigger_sink_sink_payload_hit;
wire trigger_source_source_valid;
wire trigger_source_source_ready;
wire trigger_source_source_first;
wire trigger_source_source_last;
wire [203:0] trigger_source_source_payload_data;
reg  trigger_source_source_payload_hit = 1'd0;
reg  trigger_enable_storage = 1'd0;
reg  trigger_enable_re = 1'd0;
wire trigger_done_status;
wire trigger_done_we;
reg  trigger_done_re = 1'd0;
reg  trigger_mem_write_re = 1'd0;
wire trigger_mem_write_r;
reg  trigger_mem_write_we = 1'd0;
reg  trigger_mem_write_w = 1'd0;
reg  [203:0] trigger_mem_mask_storage = 204'd0;
reg  trigger_mem_mask_re = 1'd0;
reg  [203:0] trigger_mem_value_storage = 204'd0;
reg  trigger_mem_value_re = 1'd0;
wire trigger_mem_full_status;
wire trigger_mem_full_we;
reg  trigger_mem_full_re = 1'd0;
wire trigger_enable;
reg  trigger_enable_d = 1'd0;
wire trigger_done0;
wire trigger_mem_sink_valid;
wire trigger_mem_sink_ready;
reg  trigger_mem_sink_first = 1'd0;
reg  trigger_mem_sink_last = 1'd0;
wire [203:0] trigger_mem_sink_payload_mask;
wire [203:0] trigger_mem_sink_payload_value;
wire trigger_mem_source_valid;
wire trigger_mem_source_ready;
wire trigger_mem_source_first;
wire trigger_mem_source_last;
wire [203:0] trigger_mem_source_payload_mask;
wire [203:0] trigger_mem_source_payload_value;
wire trigger_mem_asyncfifo_we;
wire trigger_mem_asyncfifo_writable;
wire trigger_mem_asyncfifo_re;
wire trigger_mem_asyncfifo_readable;
wire [409:0] trigger_mem_asyncfifo_din;
wire [409:0] trigger_mem_asyncfifo_dout;
wire trigger_mem_graycounter0_ce;
reg  [4:0] trigger_mem_graycounter0_q = 5'd0;
wire [4:0] trigger_mem_graycounter0_q_next;
reg  [4:0] trigger_mem_graycounter0_q_binary = 5'd0;
reg  [4:0] trigger_mem_graycounter0_q_next_binary = 5'd0;
wire trigger_mem_graycounter1_ce;
reg  [4:0] trigger_mem_graycounter1_q = 5'd0;
wire [4:0] trigger_mem_graycounter1_q_next;
reg  [4:0] trigger_mem_graycounter1_q_binary = 5'd0;
reg  [4:0] trigger_mem_graycounter1_q_next_binary = 5'd0;
wire [4:0] trigger_mem_produce_rdomain;
wire [4:0] trigger_mem_consume_wdomain;
wire [3:0] trigger_mem_wrport_adr;
wire [409:0] trigger_mem_wrport_dat_r;
wire trigger_mem_wrport_we;
wire [409:0] trigger_mem_wrport_dat_w;
wire [3:0] trigger_mem_rdport_adr;
wire [409:0] trigger_mem_rdport_dat_r;
wire [203:0] trigger_mem_fifo_in_payload_mask;
wire [203:0] trigger_mem_fifo_in_payload_value;
wire trigger_mem_fifo_in_first;
wire trigger_mem_fifo_in_last;
wire [203:0] trigger_mem_fifo_out_payload_mask;
wire [203:0] trigger_mem_fifo_out_payload_value;
wire trigger_mem_fifo_out_first;
wire trigger_mem_fifo_out_last;
wire trigger_hit;
wire trigger_wait;
wire trigger_done1;
reg  [5:0] trigger_count = 6'd32;
wire subsampler_sink_valid;
wire subsampler_sink_ready;
wire subsampler_sink_first;
wire subsampler_sink_last;
wire [203:0] subsampler_sink_payload_data;
wire subsampler_sink_payload_hit;
wire subsampler_source_valid;
wire subsampler_source_ready;
wire subsampler_source_first;
wire subsampler_source_last;
wire [203:0] subsampler_source_payload_data;
wire subsampler_source_payload_hit;
reg  [15:0] subsampler_value_storage = 16'd0;
reg  subsampler_value_re = 1'd0;
wire [15:0] subsampler_value;
reg  [15:0] subsampler_counter = 16'd0;
wire subsampler_done;
wire storage_sink_sink_valid;
reg  storage_sink_sink_ready = 1'd0;
wire storage_sink_sink_first;
wire storage_sink_sink_last;
wire [203:0] storage_sink_sink_payload_data;
wire storage_sink_sink_payload_hit;
reg  storage_enable_storage = 1'd0;
reg  storage_enable_re = 1'd0;
wire storage_done_status;
wire storage_done_we;
reg  storage_done_re = 1'd0;
reg  [9:0] storage_length_storage = 10'd0;
reg  storage_length_re = 1'd0;
reg  [9:0] storage_offset_storage = 10'd0;
reg  storage_offset_re = 1'd0;
wire [9:0] storage_mem_level_status;
wire storage_mem_level_we;
reg  storage_mem_level_re = 1'd0;
wire [31:0] storage_mem_data_status;
wire storage_mem_data_we;
reg  storage_mem_data_re = 1'd0;
wire storage_enable;
reg  storage_enable_d = 1'd0;
wire [9:0] storage_length;
wire [9:0] storage_offset;
reg  storage_done0 = 1'd0;
wire [9:0] storage_level;
reg  storage_mem_sink_valid = 1'd0;
wire storage_mem_sink_ready;
reg  storage_mem_sink_first = 1'd0;
reg  storage_mem_sink_last = 1'd0;
reg  [203:0] storage_mem_sink_payload_data = 204'd0;
wire storage_mem_source_valid;
reg  storage_mem_source_ready = 1'd0;
wire storage_mem_source_first;
wire storage_mem_source_last;
wire [203:0] storage_mem_source_payload_data;
wire storage_mem_re;
reg  storage_mem_readable = 1'd0;
wire storage_mem_syncfifo_we;
wire storage_mem_syncfifo_writable;
wire storage_mem_syncfifo_re;
wire storage_mem_syncfifo_readable;
wire [205:0] storage_mem_syncfifo_din;
wire [205:0] storage_mem_syncfifo_dout;
reg  [9:0] storage_mem_level0 = 10'd0;
reg  storage_mem_replace = 1'd0;
reg  [8:0] storage_mem_produce = 9'd0;
reg  [8:0] storage_mem_consume = 9'd0;
reg  [8:0] storage_mem_wrport_adr = 9'd0;
wire [205:0] storage_mem_wrport_dat_r;
wire storage_mem_wrport_we;
wire [205:0] storage_mem_wrport_dat_w;
wire storage_mem_do_read;
wire [8:0] storage_mem_rdport_adr;
wire [205:0] storage_mem_rdport_dat_r;
wire storage_mem_rdport_re;
wire [9:0] storage_mem_level1;
wire [203:0] storage_mem_fifo_in_payload_data;
wire storage_mem_fifo_in_first;
wire storage_mem_fifo_in_last;
wire [203:0] storage_mem_fifo_out_payload_data;
wire storage_mem_fifo_out_first;
wire storage_mem_fifo_out_last;
reg  storage_cdc_sink_valid = 1'd0;
wire storage_cdc_sink_ready;
reg  storage_cdc_sink_first = 1'd0;
reg  storage_cdc_sink_last = 1'd0;
reg  [203:0] storage_cdc_sink_payload_data = 204'd0;
wire storage_cdc_source_valid;
wire storage_cdc_source_ready;
wire storage_cdc_source_first;
wire storage_cdc_source_last;
wire [203:0] storage_cdc_source_payload_data;
wire storage_cdc_asyncfifo_we;
wire storage_cdc_asyncfifo_writable;
wire storage_cdc_asyncfifo_re;
wire storage_cdc_asyncfifo_readable;
wire [205:0] storage_cdc_asyncfifo_din;
wire [205:0] storage_cdc_asyncfifo_dout;
wire storage_cdc_graycounter0_ce;
reg  [2:0] storage_cdc_graycounter0_q = 3'd0;
wire [2:0] storage_cdc_graycounter0_q_next;
reg  [2:0] storage_cdc_graycounter0_q_binary = 3'd0;
reg  [2:0] storage_cdc_graycounter0_q_next_binary = 3'd0;
wire storage_cdc_graycounter1_ce;
reg  [2:0] storage_cdc_graycounter1_q = 3'd0;
wire [2:0] storage_cdc_graycounter1_q_next;
reg  [2:0] storage_cdc_graycounter1_q_binary = 3'd0;
reg  [2:0] storage_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] storage_cdc_produce_rdomain;
wire [2:0] storage_cdc_consume_wdomain;
wire [1:0] storage_cdc_wrport_adr;
wire [205:0] storage_cdc_wrport_dat_r;
wire storage_cdc_wrport_we;
wire [205:0] storage_cdc_wrport_dat_w;
wire [1:0] storage_cdc_rdport_adr;
wire [205:0] storage_cdc_rdport_dat_r;
wire [203:0] storage_cdc_fifo_in_payload_data;
wire storage_cdc_fifo_in_first;
wire storage_cdc_fifo_in_last;
wire [203:0] storage_cdc_fifo_out_payload_data;
wire storage_cdc_fifo_out_first;
wire storage_cdc_fifo_out_last;
reg  storage_wait = 1'd0;
wire storage_done1;
reg  [9:0] storage_count = 10'd512;
wire storage_read_source_valid;
wire storage_read_source_ready;
wire storage_read_source_first;
wire storage_read_source_last;
wire [203:0] storage_read_source_payload_data;
wire storage_converter_sink_valid;
wire storage_converter_sink_ready;
wire storage_converter_sink_first;
wire storage_converter_sink_last;
wire [223:0] storage_converter_sink_payload_data;
wire storage_converter_source_valid;
wire storage_converter_source_ready;
wire storage_converter_source_first;
wire storage_converter_source_last;
reg  [31:0] storage_converter_source_payload_data = 32'd0;
wire storage_converter_source_payload_valid_token_count;
reg  [2:0] storage_converter_mux = 3'd0;
wire storage_converter_first;
wire storage_converter_last;
wire storage_source_source_valid;
wire storage_source_source_ready;
wire storage_source_source_first;
wire storage_source_source_last;
wire [31:0] storage_source_source_payload_data;
reg  [13:0] simsoc_adr = 14'd0;
reg  simsoc_we = 1'd0;
reg  [31:0] simsoc_dat_w = 32'd0;
wire [31:0] simsoc_dat_r;
wire [29:0] simsoc_wishbone_adr;
wire [31:0] simsoc_wishbone_dat_w;
reg  [31:0] simsoc_wishbone_dat_r = 32'd0;
wire [3:0] simsoc_wishbone_sel;
wire simsoc_wishbone_cyc;
wire simsoc_wishbone_stb;
reg  simsoc_wishbone_ack = 1'd0;
wire simsoc_wishbone_we;
wire [2:0] simsoc_wishbone_cti;
wire [1:0] simsoc_wishbone_bte;
reg  simsoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg  [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg  shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg  grant = 1'd0;
reg  [3:0] slave_sel = 4'd0;
reg  [3:0] slave_sel_r = 4'd0;
reg  error = 1'd0;
wire wait_1;
wire done;
reg  [19:0] count = 20'd1000000;
wire [13:0] csr_bankarray_interface0_bank_bus_adr;
wire csr_bankarray_interface0_bank_bus_we;
wire [31:0] csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  csr_bankarray_csrbank0_mux_value0_re = 1'd0;
wire csr_bankarray_csrbank0_mux_value0_r;
reg  csr_bankarray_csrbank0_mux_value0_we = 1'd0;
wire csr_bankarray_csrbank0_mux_value0_w;
reg  csr_bankarray_csrbank0_trigger_enable0_re = 1'd0;
wire csr_bankarray_csrbank0_trigger_enable0_r;
reg  csr_bankarray_csrbank0_trigger_enable0_we = 1'd0;
wire csr_bankarray_csrbank0_trigger_enable0_w;
reg  csr_bankarray_csrbank0_trigger_done_re = 1'd0;
wire csr_bankarray_csrbank0_trigger_done_r;
reg  csr_bankarray_csrbank0_trigger_done_we = 1'd0;
wire csr_bankarray_csrbank0_trigger_done_w;
reg  csr_bankarray_csrbank0_trigger_mem_mask6_re = 1'd0;
wire [11:0] csr_bankarray_csrbank0_trigger_mem_mask6_r;
reg  csr_bankarray_csrbank0_trigger_mem_mask6_we = 1'd0;
wire [11:0] csr_bankarray_csrbank0_trigger_mem_mask6_w;
reg  csr_bankarray_csrbank0_trigger_mem_mask5_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask5_r;
reg  csr_bankarray_csrbank0_trigger_mem_mask5_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask5_w;
reg  csr_bankarray_csrbank0_trigger_mem_mask4_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask4_r;
reg  csr_bankarray_csrbank0_trigger_mem_mask4_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask4_w;
reg  csr_bankarray_csrbank0_trigger_mem_mask3_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask3_r;
reg  csr_bankarray_csrbank0_trigger_mem_mask3_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask3_w;
reg  csr_bankarray_csrbank0_trigger_mem_mask2_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask2_r;
reg  csr_bankarray_csrbank0_trigger_mem_mask2_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask2_w;
reg  csr_bankarray_csrbank0_trigger_mem_mask1_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask1_r;
reg  csr_bankarray_csrbank0_trigger_mem_mask1_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask1_w;
reg  csr_bankarray_csrbank0_trigger_mem_mask0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask0_r;
reg  csr_bankarray_csrbank0_trigger_mem_mask0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_mask0_w;
reg  csr_bankarray_csrbank0_trigger_mem_value6_re = 1'd0;
wire [11:0] csr_bankarray_csrbank0_trigger_mem_value6_r;
reg  csr_bankarray_csrbank0_trigger_mem_value6_we = 1'd0;
wire [11:0] csr_bankarray_csrbank0_trigger_mem_value6_w;
reg  csr_bankarray_csrbank0_trigger_mem_value5_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value5_r;
reg  csr_bankarray_csrbank0_trigger_mem_value5_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value5_w;
reg  csr_bankarray_csrbank0_trigger_mem_value4_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value4_r;
reg  csr_bankarray_csrbank0_trigger_mem_value4_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value4_w;
reg  csr_bankarray_csrbank0_trigger_mem_value3_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value3_r;
reg  csr_bankarray_csrbank0_trigger_mem_value3_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value3_w;
reg  csr_bankarray_csrbank0_trigger_mem_value2_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value2_r;
reg  csr_bankarray_csrbank0_trigger_mem_value2_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value2_w;
reg  csr_bankarray_csrbank0_trigger_mem_value1_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value1_r;
reg  csr_bankarray_csrbank0_trigger_mem_value1_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value1_w;
reg  csr_bankarray_csrbank0_trigger_mem_value0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value0_r;
reg  csr_bankarray_csrbank0_trigger_mem_value0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_trigger_mem_value0_w;
reg  csr_bankarray_csrbank0_trigger_mem_full_re = 1'd0;
wire csr_bankarray_csrbank0_trigger_mem_full_r;
reg  csr_bankarray_csrbank0_trigger_mem_full_we = 1'd0;
wire csr_bankarray_csrbank0_trigger_mem_full_w;
reg  csr_bankarray_csrbank0_subsampler_value0_re = 1'd0;
wire [15:0] csr_bankarray_csrbank0_subsampler_value0_r;
reg  csr_bankarray_csrbank0_subsampler_value0_we = 1'd0;
wire [15:0] csr_bankarray_csrbank0_subsampler_value0_w;
reg  csr_bankarray_csrbank0_storage_enable0_re = 1'd0;
wire csr_bankarray_csrbank0_storage_enable0_r;
reg  csr_bankarray_csrbank0_storage_enable0_we = 1'd0;
wire csr_bankarray_csrbank0_storage_enable0_w;
reg  csr_bankarray_csrbank0_storage_done_re = 1'd0;
wire csr_bankarray_csrbank0_storage_done_r;
reg  csr_bankarray_csrbank0_storage_done_we = 1'd0;
wire csr_bankarray_csrbank0_storage_done_w;
reg  csr_bankarray_csrbank0_storage_length0_re = 1'd0;
wire [9:0] csr_bankarray_csrbank0_storage_length0_r;
reg  csr_bankarray_csrbank0_storage_length0_we = 1'd0;
wire [9:0] csr_bankarray_csrbank0_storage_length0_w;
reg  csr_bankarray_csrbank0_storage_offset0_re = 1'd0;
wire [9:0] csr_bankarray_csrbank0_storage_offset0_r;
reg  csr_bankarray_csrbank0_storage_offset0_we = 1'd0;
wire [9:0] csr_bankarray_csrbank0_storage_offset0_w;
reg  csr_bankarray_csrbank0_storage_mem_level_re = 1'd0;
wire [9:0] csr_bankarray_csrbank0_storage_mem_level_r;
reg  csr_bankarray_csrbank0_storage_mem_level_we = 1'd0;
wire [9:0] csr_bankarray_csrbank0_storage_mem_level_w;
reg  csr_bankarray_csrbank0_storage_mem_data_re = 1'd0;
wire [31:0] csr_bankarray_csrbank0_storage_mem_data_r;
reg  csr_bankarray_csrbank0_storage_mem_data_we = 1'd0;
wire [31:0] csr_bankarray_csrbank0_storage_mem_data_w;
wire csr_bankarray_csrbank0_sel;
wire [13:0] csr_bankarray_interface1_bank_bus_adr;
wire csr_bankarray_interface1_bank_bus_we;
wire [31:0] csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  csr_bankarray_csrbank1_reset0_re = 1'd0;
wire [1:0] csr_bankarray_csrbank1_reset0_r;
reg  csr_bankarray_csrbank1_reset0_we = 1'd0;
wire [1:0] csr_bankarray_csrbank1_reset0_w;
reg  csr_bankarray_csrbank1_scratch0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank1_scratch0_r;
reg  csr_bankarray_csrbank1_scratch0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank1_scratch0_w;
reg  csr_bankarray_csrbank1_bus_errors_re = 1'd0;
wire [31:0] csr_bankarray_csrbank1_bus_errors_r;
reg  csr_bankarray_csrbank1_bus_errors_we = 1'd0;
wire [31:0] csr_bankarray_csrbank1_bus_errors_w;
wire csr_bankarray_csrbank1_sel;
wire [13:0] csr_bankarray_interface2_bank_bus_adr;
wire csr_bankarray_interface2_bank_bus_we;
wire [31:0] csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  csr_bankarray_csrbank2_oe0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank2_oe0_r;
reg  csr_bankarray_csrbank2_oe0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank2_oe0_w;
reg  csr_bankarray_csrbank2_in_re = 1'd0;
wire [31:0] csr_bankarray_csrbank2_in_r;
reg  csr_bankarray_csrbank2_in_we = 1'd0;
wire [31:0] csr_bankarray_csrbank2_in_w;
reg  csr_bankarray_csrbank2_out0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank2_out0_r;
reg  csr_bankarray_csrbank2_out0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank2_out0_w;
reg  csr_bankarray_csrbank2_mode0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank2_mode0_r;
reg  csr_bankarray_csrbank2_mode0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank2_mode0_w;
reg  csr_bankarray_csrbank2_edge0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank2_edge0_r;
reg  csr_bankarray_csrbank2_edge0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank2_edge0_w;
wire csr_bankarray_csrbank2_sel;
wire [13:0] csr_bankarray_sram_bus_adr;
wire csr_bankarray_sram_bus_we;
wire [31:0] csr_bankarray_sram_bus_dat_w;
reg  [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] csr_bankarray_adr;
wire [7:0] csr_bankarray_dat_r;
wire csr_bankarray_sel;
reg  csr_bankarray_sel_r = 1'd0;
wire [13:0] csr_bankarray_interface3_bank_bus_adr;
wire csr_bankarray_interface3_bank_bus_we;
wire [31:0] csr_bankarray_interface3_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire csr_bankarray_csrbank3_sel;
wire [13:0] csr_bankarray_interface4_bank_bus_adr;
wire csr_bankarray_interface4_bank_bus_we;
wire [31:0] csr_bankarray_interface4_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
reg  csr_bankarray_csrbank4_marker0_re = 1'd0;
wire [7:0] csr_bankarray_csrbank4_marker0_r;
reg  csr_bankarray_csrbank4_marker0_we = 1'd0;
wire [7:0] csr_bankarray_csrbank4_marker0_w;
wire csr_bankarray_csrbank4_sel;
wire [13:0] csr_bankarray_interface5_bank_bus_adr;
wire csr_bankarray_interface5_bank_bus_we;
wire [31:0] csr_bankarray_interface5_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
reg  csr_bankarray_csrbank5_enable0_re = 1'd0;
wire csr_bankarray_csrbank5_enable0_r;
reg  csr_bankarray_csrbank5_enable0_we = 1'd0;
wire csr_bankarray_csrbank5_enable0_w;
wire csr_bankarray_csrbank5_sel;
wire [13:0] csr_bankarray_interface6_bank_bus_adr;
wire csr_bankarray_interface6_bank_bus_we;
wire [31:0] csr_bankarray_interface6_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
reg  csr_bankarray_csrbank6_load0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank6_load0_r;
reg  csr_bankarray_csrbank6_load0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank6_load0_w;
reg  csr_bankarray_csrbank6_reload0_re = 1'd0;
wire [31:0] csr_bankarray_csrbank6_reload0_r;
reg  csr_bankarray_csrbank6_reload0_we = 1'd0;
wire [31:0] csr_bankarray_csrbank6_reload0_w;
reg  csr_bankarray_csrbank6_en0_re = 1'd0;
wire csr_bankarray_csrbank6_en0_r;
reg  csr_bankarray_csrbank6_en0_we = 1'd0;
wire csr_bankarray_csrbank6_en0_w;
reg  csr_bankarray_csrbank6_update_value0_re = 1'd0;
wire csr_bankarray_csrbank6_update_value0_r;
reg  csr_bankarray_csrbank6_update_value0_we = 1'd0;
wire csr_bankarray_csrbank6_update_value0_w;
reg  csr_bankarray_csrbank6_value_re = 1'd0;
wire [31:0] csr_bankarray_csrbank6_value_r;
reg  csr_bankarray_csrbank6_value_we = 1'd0;
wire [31:0] csr_bankarray_csrbank6_value_w;
reg  csr_bankarray_csrbank6_ev_status_re = 1'd0;
wire csr_bankarray_csrbank6_ev_status_r;
reg  csr_bankarray_csrbank6_ev_status_we = 1'd0;
wire csr_bankarray_csrbank6_ev_status_w;
reg  csr_bankarray_csrbank6_ev_pending_re = 1'd0;
wire csr_bankarray_csrbank6_ev_pending_r;
reg  csr_bankarray_csrbank6_ev_pending_we = 1'd0;
wire csr_bankarray_csrbank6_ev_pending_w;
reg  csr_bankarray_csrbank6_ev_enable0_re = 1'd0;
wire csr_bankarray_csrbank6_ev_enable0_r;
reg  csr_bankarray_csrbank6_ev_enable0_we = 1'd0;
wire csr_bankarray_csrbank6_ev_enable0_w;
wire csr_bankarray_csrbank6_sel;
wire [13:0] csr_bankarray_interface7_bank_bus_adr;
wire csr_bankarray_interface7_bank_bus_we;
wire [31:0] csr_bankarray_interface7_bank_bus_dat_w;
reg  [31:0] csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
reg  csr_bankarray_csrbank7_txfull_re = 1'd0;
wire csr_bankarray_csrbank7_txfull_r;
reg  csr_bankarray_csrbank7_txfull_we = 1'd0;
wire csr_bankarray_csrbank7_txfull_w;
reg  csr_bankarray_csrbank7_rxempty_re = 1'd0;
wire csr_bankarray_csrbank7_rxempty_r;
reg  csr_bankarray_csrbank7_rxempty_we = 1'd0;
wire csr_bankarray_csrbank7_rxempty_w;
reg  csr_bankarray_csrbank7_ev_status_re = 1'd0;
wire [1:0] csr_bankarray_csrbank7_ev_status_r;
reg  csr_bankarray_csrbank7_ev_status_we = 1'd0;
wire [1:0] csr_bankarray_csrbank7_ev_status_w;
reg  csr_bankarray_csrbank7_ev_pending_re = 1'd0;
wire [1:0] csr_bankarray_csrbank7_ev_pending_r;
reg  csr_bankarray_csrbank7_ev_pending_we = 1'd0;
wire [1:0] csr_bankarray_csrbank7_ev_pending_w;
reg  csr_bankarray_csrbank7_ev_enable0_re = 1'd0;
wire [1:0] csr_bankarray_csrbank7_ev_enable0_r;
reg  csr_bankarray_csrbank7_ev_enable0_we = 1'd0;
wire [1:0] csr_bankarray_csrbank7_ev_enable0_w;
reg  csr_bankarray_csrbank7_txempty_re = 1'd0;
wire csr_bankarray_csrbank7_txempty_r;
reg  csr_bankarray_csrbank7_txempty_we = 1'd0;
wire csr_bankarray_csrbank7_txempty_w;
reg  csr_bankarray_csrbank7_rxfull_re = 1'd0;
wire csr_bankarray_csrbank7_rxfull_r;
reg  csr_bankarray_csrbank7_rxfull_we = 1'd0;
wire csr_bankarray_csrbank7_rxfull_w;
wire csr_bankarray_csrbank7_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
wire simsoc_i00;
wire simsoc_i10;
wire simsoc_i20;
wire simsoc_i30;
wire simsoc_i40;
wire simsoc_i50;
wire simsoc_i60;
wire simsoc_i70;
wire simsoc_i80;
wire simsoc_i90;
wire simsoc_i100;
wire simsoc_i110;
wire simsoc_i120;
wire simsoc_i130;
wire simsoc_i140;
wire simsoc_i150;
wire simsoc_i160;
wire simsoc_i170;
wire simsoc_i180;
wire simsoc_i190;
wire simsoc_i200;
wire simsoc_i210;
wire simsoc_i220;
wire simsoc_i230;
wire simsoc_i240;
wire simsoc_i250;
wire simsoc_i260;
wire simsoc_i270;
wire simsoc_i280;
wire simsoc_i290;
wire simsoc_i300;
wire simsoc_i310;
wire simsoc_i01;
wire simsoc_i11;
wire simsoc_i21;
wire simsoc_i31;
wire simsoc_i41;
wire simsoc_i51;
wire simsoc_i61;
wire simsoc_i71;
wire simsoc_i81;
wire simsoc_i91;
wire simsoc_i101;
wire simsoc_i111;
wire simsoc_i121;
wire simsoc_i131;
wire simsoc_i141;
wire simsoc_i151;
wire simsoc_i161;
wire simsoc_i171;
wire simsoc_i181;
wire simsoc_i191;
wire simsoc_i201;
wire simsoc_i211;
wire simsoc_i221;
wire simsoc_i231;
wire simsoc_i241;
wire simsoc_i251;
wire simsoc_i261;
wire simsoc_i271;
wire simsoc_i281;
wire simsoc_i291;
wire simsoc_i301;
wire simsoc_i311;
reg  [31:0] simsoc_status = 32'd0;
reg  simsoc_re = 1'd0;
reg  [31:0] simsoc_r = 32'd0;
reg  [31:0] simsoc_storage = 32'd0;
reg  [1:0] simsoc_litescopeanalyzer_state = 2'd0;
reg  [1:0] simsoc_litescopeanalyzer_next_state = 2'd0;
reg  simsoc_wishbone2csr_state = 1'd0;
reg  simsoc_wishbone2csr_next_state = 1'd0;
reg  [29:0] array_muxed0 = 30'd0;
reg  [31:0] array_muxed1 = 32'd0;
reg  [3:0] array_muxed2 = 4'd0;
reg  array_muxed3 = 1'd0;
reg  array_muxed4 = 1'd0;
reg  array_muxed5 = 1'd0;
reg  [2:0] array_muxed6 = 3'd0;
reg  [1:0] array_muxed7 = 2'd0;
reg  multiregimpl0_regs0 = 1'd0;
reg  multiregimpl0_regs1 = 1'd0;
reg  multiregimpl1_regs0 = 1'd0;
reg  multiregimpl1_regs1 = 1'd0;
reg  multiregimpl2_regs0 = 1'd0;
reg  multiregimpl2_regs1 = 1'd0;
reg  multiregimpl3_regs0 = 1'd0;
reg  multiregimpl3_regs1 = 1'd0;
reg  multiregimpl4_regs0 = 1'd0;
reg  multiregimpl4_regs1 = 1'd0;
reg  multiregimpl5_regs0 = 1'd0;
reg  multiregimpl5_regs1 = 1'd0;
reg  multiregimpl6_regs0 = 1'd0;
reg  multiregimpl6_regs1 = 1'd0;
reg  multiregimpl7_regs0 = 1'd0;
reg  multiregimpl7_regs1 = 1'd0;
reg  multiregimpl8_regs0 = 1'd0;
reg  multiregimpl8_regs1 = 1'd0;
reg  multiregimpl9_regs0 = 1'd0;
reg  multiregimpl9_regs1 = 1'd0;
reg  multiregimpl10_regs0 = 1'd0;
reg  multiregimpl10_regs1 = 1'd0;
reg  multiregimpl11_regs0 = 1'd0;
reg  multiregimpl11_regs1 = 1'd0;
reg  multiregimpl12_regs0 = 1'd0;
reg  multiregimpl12_regs1 = 1'd0;
reg  multiregimpl13_regs0 = 1'd0;
reg  multiregimpl13_regs1 = 1'd0;
reg  multiregimpl14_regs0 = 1'd0;
reg  multiregimpl14_regs1 = 1'd0;
reg  multiregimpl15_regs0 = 1'd0;
reg  multiregimpl15_regs1 = 1'd0;
reg  multiregimpl16_regs0 = 1'd0;
reg  multiregimpl16_regs1 = 1'd0;
reg  multiregimpl17_regs0 = 1'd0;
reg  multiregimpl17_regs1 = 1'd0;
reg  multiregimpl18_regs0 = 1'd0;
reg  multiregimpl18_regs1 = 1'd0;
reg  multiregimpl19_regs0 = 1'd0;
reg  multiregimpl19_regs1 = 1'd0;
reg  multiregimpl20_regs0 = 1'd0;
reg  multiregimpl20_regs1 = 1'd0;
reg  multiregimpl21_regs0 = 1'd0;
reg  multiregimpl21_regs1 = 1'd0;
reg  multiregimpl22_regs0 = 1'd0;
reg  multiregimpl22_regs1 = 1'd0;
reg  multiregimpl23_regs0 = 1'd0;
reg  multiregimpl23_regs1 = 1'd0;
reg  multiregimpl24_regs0 = 1'd0;
reg  multiregimpl24_regs1 = 1'd0;
reg  multiregimpl25_regs0 = 1'd0;
reg  multiregimpl25_regs1 = 1'd0;
reg  multiregimpl26_regs0 = 1'd0;
reg  multiregimpl26_regs1 = 1'd0;
reg  multiregimpl27_regs0 = 1'd0;
reg  multiregimpl27_regs1 = 1'd0;
reg  multiregimpl28_regs0 = 1'd0;
reg  multiregimpl28_regs1 = 1'd0;
reg  multiregimpl29_regs0 = 1'd0;
reg  multiregimpl29_regs1 = 1'd0;
reg  multiregimpl30_regs0 = 1'd0;
reg  multiregimpl30_regs1 = 1'd0;
reg  multiregimpl31_regs0 = 1'd0;
reg  multiregimpl31_regs1 = 1'd0;
reg  multiregimpl32_regs0 = 1'd0;
reg  multiregimpl32_regs1 = 1'd0;
reg  multiregimpl33_regs0 = 1'd0;
reg  multiregimpl33_regs1 = 1'd0;
reg  multiregimpl34_regs0 = 1'd0;
reg  multiregimpl34_regs1 = 1'd0;
reg  [4:0] multiregimpl35_regs0 = 5'd0;
reg  [4:0] multiregimpl35_regs1 = 5'd0;
reg  [4:0] multiregimpl36_regs0 = 5'd0;
reg  [4:0] multiregimpl36_regs1 = 5'd0;
reg  [15:0] multiregimpl37_regs0 = 16'd0;
reg  [15:0] multiregimpl37_regs1 = 16'd0;
reg  multiregimpl38_regs0 = 1'd0;
reg  multiregimpl38_regs1 = 1'd0;
reg  [9:0] multiregimpl39_regs0 = 10'd0;
reg  [9:0] multiregimpl39_regs1 = 10'd0;
reg  [9:0] multiregimpl40_regs0 = 10'd0;
reg  [9:0] multiregimpl40_regs1 = 10'd0;
reg  multiregimpl41_regs0 = 1'd0;
reg  multiregimpl41_regs1 = 1'd0;
reg  [9:0] multiregimpl42_regs0 = 10'd0;
reg  [9:0] multiregimpl42_regs1 = 10'd0;
reg  [2:0] multiregimpl43_regs0 = 3'd0;
reg  [2:0] multiregimpl43_regs1 = 3'd0;
reg  [2:0] multiregimpl44_regs0 = 3'd0;
reg  [2:0] multiregimpl44_regs1 = 3'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
	interrupt <= 32'd0;
	interrupt[2] <= irq;
	interrupt[1] <= timer_irq;
	interrupt[0] <= uart_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = int_rst;
assign bus_errors_status = bus_errors;
assign adr = ram_bus_adr[14:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[13:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
assign serial_source_valid = sink_valid;
assign serial_source_data = sink_payload_data;
assign sink_ready = serial_source_ready;
assign source_valid = serial_sink_valid;
assign source_payload_data = serial_sink_data;
assign serial_sink_ready = source_ready;
assign uart_uart_sink_valid = source_valid;
assign source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = source_first;
assign uart_uart_sink_last = source_last;
assign uart_uart_sink_payload_data = source_payload_data;
assign sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = sink_ready;
assign sink_first = uart_uart_source_first;
assign sink_last = uart_uart_source_last;
assign sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
always @(*) begin
	gpio_oe <= 32'd0;
	gpio_oe[0] <= oe_storage[0];
	gpio_oe[1] <= oe_storage[1];
	gpio_oe[2] <= oe_storage[2];
	gpio_oe[3] <= oe_storage[3];
	gpio_oe[4] <= oe_storage[4];
	gpio_oe[5] <= oe_storage[5];
	gpio_oe[6] <= oe_storage[6];
	gpio_oe[7] <= oe_storage[7];
	gpio_oe[8] <= oe_storage[8];
	gpio_oe[9] <= oe_storage[9];
	gpio_oe[10] <= oe_storage[10];
	gpio_oe[11] <= oe_storage[11];
	gpio_oe[12] <= oe_storage[12];
	gpio_oe[13] <= oe_storage[13];
	gpio_oe[14] <= oe_storage[14];
	gpio_oe[15] <= oe_storage[15];
	gpio_oe[16] <= oe_storage[16];
	gpio_oe[17] <= oe_storage[17];
	gpio_oe[18] <= oe_storage[18];
	gpio_oe[19] <= oe_storage[19];
	gpio_oe[20] <= oe_storage[20];
	gpio_oe[21] <= oe_storage[21];
	gpio_oe[22] <= oe_storage[22];
	gpio_oe[23] <= oe_storage[23];
	gpio_oe[24] <= oe_storage[24];
	gpio_oe[25] <= oe_storage[25];
	gpio_oe[26] <= oe_storage[26];
	gpio_oe[27] <= oe_storage[27];
	gpio_oe[28] <= oe_storage[28];
	gpio_oe[29] <= oe_storage[29];
	gpio_oe[30] <= oe_storage[30];
	gpio_oe[31] <= oe_storage[31];
end
always @(*) begin
	gpio_o <= 32'd0;
	gpio_o[0] <= out_storage[0];
	gpio_o[1] <= out_storage[1];
	gpio_o[2] <= out_storage[2];
	gpio_o[3] <= out_storage[3];
	gpio_o[4] <= out_storage[4];
	gpio_o[5] <= out_storage[5];
	gpio_o[6] <= out_storage[6];
	gpio_o[7] <= out_storage[7];
	gpio_o[8] <= out_storage[8];
	gpio_o[9] <= out_storage[9];
	gpio_o[10] <= out_storage[10];
	gpio_o[11] <= out_storage[11];
	gpio_o[12] <= out_storage[12];
	gpio_o[13] <= out_storage[13];
	gpio_o[14] <= out_storage[14];
	gpio_o[15] <= out_storage[15];
	gpio_o[16] <= out_storage[16];
	gpio_o[17] <= out_storage[17];
	gpio_o[18] <= out_storage[18];
	gpio_o[19] <= out_storage[19];
	gpio_o[20] <= out_storage[20];
	gpio_o[21] <= out_storage[21];
	gpio_o[22] <= out_storage[22];
	gpio_o[23] <= out_storage[23];
	gpio_o[24] <= out_storage[24];
	gpio_o[25] <= out_storage[25];
	gpio_o[26] <= out_storage[26];
	gpio_o[27] <= out_storage[27];
	gpio_o[28] <= out_storage[28];
	gpio_o[29] <= out_storage[29];
	gpio_o[30] <= out_storage[30];
	gpio_o[31] <= out_storage[31];
end
always @(*) begin
	eventsourceprocess0_trigger <= 1'd0;
	if (mode_storage[0]) begin
		eventsourceprocess0_trigger <= (in_status[0] ^ in_pads_n_d0);
	end else begin
		eventsourceprocess0_trigger <= (in_status[0] ^ edge_storage[0]);
	end
end
always @(*) begin
	eventsourceprocess1_trigger <= 1'd0;
	if (mode_storage[1]) begin
		eventsourceprocess1_trigger <= (in_status[1] ^ in_pads_n_d1);
	end else begin
		eventsourceprocess1_trigger <= (in_status[1] ^ edge_storage[1]);
	end
end
always @(*) begin
	eventsourceprocess2_trigger <= 1'd0;
	if (mode_storage[2]) begin
		eventsourceprocess2_trigger <= (in_status[2] ^ in_pads_n_d2);
	end else begin
		eventsourceprocess2_trigger <= (in_status[2] ^ edge_storage[2]);
	end
end
always @(*) begin
	eventsourceprocess3_trigger <= 1'd0;
	if (mode_storage[3]) begin
		eventsourceprocess3_trigger <= (in_status[3] ^ in_pads_n_d3);
	end else begin
		eventsourceprocess3_trigger <= (in_status[3] ^ edge_storage[3]);
	end
end
always @(*) begin
	eventsourceprocess4_trigger <= 1'd0;
	if (mode_storage[4]) begin
		eventsourceprocess4_trigger <= (in_status[4] ^ in_pads_n_d4);
	end else begin
		eventsourceprocess4_trigger <= (in_status[4] ^ edge_storage[4]);
	end
end
always @(*) begin
	eventsourceprocess5_trigger <= 1'd0;
	if (mode_storage[5]) begin
		eventsourceprocess5_trigger <= (in_status[5] ^ in_pads_n_d5);
	end else begin
		eventsourceprocess5_trigger <= (in_status[5] ^ edge_storage[5]);
	end
end
always @(*) begin
	eventsourceprocess6_trigger <= 1'd0;
	if (mode_storage[6]) begin
		eventsourceprocess6_trigger <= (in_status[6] ^ in_pads_n_d6);
	end else begin
		eventsourceprocess6_trigger <= (in_status[6] ^ edge_storage[6]);
	end
end
always @(*) begin
	eventsourceprocess7_trigger <= 1'd0;
	if (mode_storage[7]) begin
		eventsourceprocess7_trigger <= (in_status[7] ^ in_pads_n_d7);
	end else begin
		eventsourceprocess7_trigger <= (in_status[7] ^ edge_storage[7]);
	end
end
always @(*) begin
	eventsourceprocess8_trigger <= 1'd0;
	if (mode_storage[8]) begin
		eventsourceprocess8_trigger <= (in_status[8] ^ in_pads_n_d8);
	end else begin
		eventsourceprocess8_trigger <= (in_status[8] ^ edge_storage[8]);
	end
end
always @(*) begin
	eventsourceprocess9_trigger <= 1'd0;
	if (mode_storage[9]) begin
		eventsourceprocess9_trigger <= (in_status[9] ^ in_pads_n_d9);
	end else begin
		eventsourceprocess9_trigger <= (in_status[9] ^ edge_storage[9]);
	end
end
always @(*) begin
	eventsourceprocess10_trigger <= 1'd0;
	if (mode_storage[10]) begin
		eventsourceprocess10_trigger <= (in_status[10] ^ in_pads_n_d10);
	end else begin
		eventsourceprocess10_trigger <= (in_status[10] ^ edge_storage[10]);
	end
end
always @(*) begin
	eventsourceprocess11_trigger <= 1'd0;
	if (mode_storage[11]) begin
		eventsourceprocess11_trigger <= (in_status[11] ^ in_pads_n_d11);
	end else begin
		eventsourceprocess11_trigger <= (in_status[11] ^ edge_storage[11]);
	end
end
always @(*) begin
	eventsourceprocess12_trigger <= 1'd0;
	if (mode_storage[12]) begin
		eventsourceprocess12_trigger <= (in_status[12] ^ in_pads_n_d12);
	end else begin
		eventsourceprocess12_trigger <= (in_status[12] ^ edge_storage[12]);
	end
end
always @(*) begin
	eventsourceprocess13_trigger <= 1'd0;
	if (mode_storage[13]) begin
		eventsourceprocess13_trigger <= (in_status[13] ^ in_pads_n_d13);
	end else begin
		eventsourceprocess13_trigger <= (in_status[13] ^ edge_storage[13]);
	end
end
always @(*) begin
	eventsourceprocess14_trigger <= 1'd0;
	if (mode_storage[14]) begin
		eventsourceprocess14_trigger <= (in_status[14] ^ in_pads_n_d14);
	end else begin
		eventsourceprocess14_trigger <= (in_status[14] ^ edge_storage[14]);
	end
end
always @(*) begin
	eventsourceprocess15_trigger <= 1'd0;
	if (mode_storage[15]) begin
		eventsourceprocess15_trigger <= (in_status[15] ^ in_pads_n_d15);
	end else begin
		eventsourceprocess15_trigger <= (in_status[15] ^ edge_storage[15]);
	end
end
always @(*) begin
	eventsourceprocess16_trigger <= 1'd0;
	if (mode_storage[16]) begin
		eventsourceprocess16_trigger <= (in_status[16] ^ in_pads_n_d16);
	end else begin
		eventsourceprocess16_trigger <= (in_status[16] ^ edge_storage[16]);
	end
end
always @(*) begin
	eventsourceprocess17_trigger <= 1'd0;
	if (mode_storage[17]) begin
		eventsourceprocess17_trigger <= (in_status[17] ^ in_pads_n_d17);
	end else begin
		eventsourceprocess17_trigger <= (in_status[17] ^ edge_storage[17]);
	end
end
always @(*) begin
	eventsourceprocess18_trigger <= 1'd0;
	if (mode_storage[18]) begin
		eventsourceprocess18_trigger <= (in_status[18] ^ in_pads_n_d18);
	end else begin
		eventsourceprocess18_trigger <= (in_status[18] ^ edge_storage[18]);
	end
end
always @(*) begin
	eventsourceprocess19_trigger <= 1'd0;
	if (mode_storage[19]) begin
		eventsourceprocess19_trigger <= (in_status[19] ^ in_pads_n_d19);
	end else begin
		eventsourceprocess19_trigger <= (in_status[19] ^ edge_storage[19]);
	end
end
always @(*) begin
	eventsourceprocess20_trigger <= 1'd0;
	if (mode_storage[20]) begin
		eventsourceprocess20_trigger <= (in_status[20] ^ in_pads_n_d20);
	end else begin
		eventsourceprocess20_trigger <= (in_status[20] ^ edge_storage[20]);
	end
end
always @(*) begin
	eventsourceprocess21_trigger <= 1'd0;
	if (mode_storage[21]) begin
		eventsourceprocess21_trigger <= (in_status[21] ^ in_pads_n_d21);
	end else begin
		eventsourceprocess21_trigger <= (in_status[21] ^ edge_storage[21]);
	end
end
always @(*) begin
	eventsourceprocess22_trigger <= 1'd0;
	if (mode_storage[22]) begin
		eventsourceprocess22_trigger <= (in_status[22] ^ in_pads_n_d22);
	end else begin
		eventsourceprocess22_trigger <= (in_status[22] ^ edge_storage[22]);
	end
end
always @(*) begin
	eventsourceprocess23_trigger <= 1'd0;
	if (mode_storage[23]) begin
		eventsourceprocess23_trigger <= (in_status[23] ^ in_pads_n_d23);
	end else begin
		eventsourceprocess23_trigger <= (in_status[23] ^ edge_storage[23]);
	end
end
always @(*) begin
	eventsourceprocess24_trigger <= 1'd0;
	if (mode_storage[24]) begin
		eventsourceprocess24_trigger <= (in_status[24] ^ in_pads_n_d24);
	end else begin
		eventsourceprocess24_trigger <= (in_status[24] ^ edge_storage[24]);
	end
end
always @(*) begin
	eventsourceprocess25_trigger <= 1'd0;
	if (mode_storage[25]) begin
		eventsourceprocess25_trigger <= (in_status[25] ^ in_pads_n_d25);
	end else begin
		eventsourceprocess25_trigger <= (in_status[25] ^ edge_storage[25]);
	end
end
always @(*) begin
	eventsourceprocess26_trigger <= 1'd0;
	if (mode_storage[26]) begin
		eventsourceprocess26_trigger <= (in_status[26] ^ in_pads_n_d26);
	end else begin
		eventsourceprocess26_trigger <= (in_status[26] ^ edge_storage[26]);
	end
end
always @(*) begin
	eventsourceprocess27_trigger <= 1'd0;
	if (mode_storage[27]) begin
		eventsourceprocess27_trigger <= (in_status[27] ^ in_pads_n_d27);
	end else begin
		eventsourceprocess27_trigger <= (in_status[27] ^ edge_storage[27]);
	end
end
always @(*) begin
	eventsourceprocess28_trigger <= 1'd0;
	if (mode_storage[28]) begin
		eventsourceprocess28_trigger <= (in_status[28] ^ in_pads_n_d28);
	end else begin
		eventsourceprocess28_trigger <= (in_status[28] ^ edge_storage[28]);
	end
end
always @(*) begin
	eventsourceprocess29_trigger <= 1'd0;
	if (mode_storage[29]) begin
		eventsourceprocess29_trigger <= (in_status[29] ^ in_pads_n_d29);
	end else begin
		eventsourceprocess29_trigger <= (in_status[29] ^ edge_storage[29]);
	end
end
always @(*) begin
	eventsourceprocess30_trigger <= 1'd0;
	if (mode_storage[30]) begin
		eventsourceprocess30_trigger <= (in_status[30] ^ in_pads_n_d30);
	end else begin
		eventsourceprocess30_trigger <= (in_status[30] ^ edge_storage[30]);
	end
end
always @(*) begin
	eventsourceprocess31_trigger <= 1'd0;
	if (mode_storage[31]) begin
		eventsourceprocess31_trigger <= (in_status[31] ^ in_pads_n_d31);
	end else begin
		eventsourceprocess31_trigger <= (in_status[31] ^ edge_storage[31]);
	end
end
assign simsoc_i00 = eventsourceprocess0_status;
assign simsoc_i01 = eventsourceprocess0_pending;
always @(*) begin
	eventsourceprocess0_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[0])) begin
		eventsourceprocess0_clear <= 1'd1;
	end
end
assign simsoc_i10 = eventsourceprocess1_status;
assign simsoc_i11 = eventsourceprocess1_pending;
always @(*) begin
	eventsourceprocess1_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[1])) begin
		eventsourceprocess1_clear <= 1'd1;
	end
end
assign simsoc_i20 = eventsourceprocess2_status;
assign simsoc_i21 = eventsourceprocess2_pending;
always @(*) begin
	eventsourceprocess2_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[2])) begin
		eventsourceprocess2_clear <= 1'd1;
	end
end
assign simsoc_i30 = eventsourceprocess3_status;
assign simsoc_i31 = eventsourceprocess3_pending;
always @(*) begin
	eventsourceprocess3_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[3])) begin
		eventsourceprocess3_clear <= 1'd1;
	end
end
assign simsoc_i40 = eventsourceprocess4_status;
assign simsoc_i41 = eventsourceprocess4_pending;
always @(*) begin
	eventsourceprocess4_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[4])) begin
		eventsourceprocess4_clear <= 1'd1;
	end
end
assign simsoc_i50 = eventsourceprocess5_status;
assign simsoc_i51 = eventsourceprocess5_pending;
always @(*) begin
	eventsourceprocess5_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[5])) begin
		eventsourceprocess5_clear <= 1'd1;
	end
end
assign simsoc_i60 = eventsourceprocess6_status;
assign simsoc_i61 = eventsourceprocess6_pending;
always @(*) begin
	eventsourceprocess6_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[6])) begin
		eventsourceprocess6_clear <= 1'd1;
	end
end
assign simsoc_i70 = eventsourceprocess7_status;
assign simsoc_i71 = eventsourceprocess7_pending;
always @(*) begin
	eventsourceprocess7_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[7])) begin
		eventsourceprocess7_clear <= 1'd1;
	end
end
assign simsoc_i80 = eventsourceprocess8_status;
assign simsoc_i81 = eventsourceprocess8_pending;
always @(*) begin
	eventsourceprocess8_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[8])) begin
		eventsourceprocess8_clear <= 1'd1;
	end
end
assign simsoc_i90 = eventsourceprocess9_status;
assign simsoc_i91 = eventsourceprocess9_pending;
always @(*) begin
	eventsourceprocess9_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[9])) begin
		eventsourceprocess9_clear <= 1'd1;
	end
end
assign simsoc_i100 = eventsourceprocess10_status;
assign simsoc_i101 = eventsourceprocess10_pending;
always @(*) begin
	eventsourceprocess10_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[10])) begin
		eventsourceprocess10_clear <= 1'd1;
	end
end
assign simsoc_i110 = eventsourceprocess11_status;
assign simsoc_i111 = eventsourceprocess11_pending;
always @(*) begin
	eventsourceprocess11_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[11])) begin
		eventsourceprocess11_clear <= 1'd1;
	end
end
assign simsoc_i120 = eventsourceprocess12_status;
assign simsoc_i121 = eventsourceprocess12_pending;
always @(*) begin
	eventsourceprocess12_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[12])) begin
		eventsourceprocess12_clear <= 1'd1;
	end
end
assign simsoc_i130 = eventsourceprocess13_status;
assign simsoc_i131 = eventsourceprocess13_pending;
always @(*) begin
	eventsourceprocess13_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[13])) begin
		eventsourceprocess13_clear <= 1'd1;
	end
end
assign simsoc_i140 = eventsourceprocess14_status;
assign simsoc_i141 = eventsourceprocess14_pending;
always @(*) begin
	eventsourceprocess14_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[14])) begin
		eventsourceprocess14_clear <= 1'd1;
	end
end
assign simsoc_i150 = eventsourceprocess15_status;
assign simsoc_i151 = eventsourceprocess15_pending;
always @(*) begin
	eventsourceprocess15_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[15])) begin
		eventsourceprocess15_clear <= 1'd1;
	end
end
assign simsoc_i160 = eventsourceprocess16_status;
assign simsoc_i161 = eventsourceprocess16_pending;
always @(*) begin
	eventsourceprocess16_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[16])) begin
		eventsourceprocess16_clear <= 1'd1;
	end
end
assign simsoc_i170 = eventsourceprocess17_status;
assign simsoc_i171 = eventsourceprocess17_pending;
always @(*) begin
	eventsourceprocess17_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[17])) begin
		eventsourceprocess17_clear <= 1'd1;
	end
end
assign simsoc_i180 = eventsourceprocess18_status;
assign simsoc_i181 = eventsourceprocess18_pending;
always @(*) begin
	eventsourceprocess18_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[18])) begin
		eventsourceprocess18_clear <= 1'd1;
	end
end
assign simsoc_i190 = eventsourceprocess19_status;
assign simsoc_i191 = eventsourceprocess19_pending;
always @(*) begin
	eventsourceprocess19_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[19])) begin
		eventsourceprocess19_clear <= 1'd1;
	end
end
assign simsoc_i200 = eventsourceprocess20_status;
assign simsoc_i201 = eventsourceprocess20_pending;
always @(*) begin
	eventsourceprocess20_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[20])) begin
		eventsourceprocess20_clear <= 1'd1;
	end
end
assign simsoc_i210 = eventsourceprocess21_status;
assign simsoc_i211 = eventsourceprocess21_pending;
always @(*) begin
	eventsourceprocess21_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[21])) begin
		eventsourceprocess21_clear <= 1'd1;
	end
end
assign simsoc_i220 = eventsourceprocess22_status;
assign simsoc_i221 = eventsourceprocess22_pending;
always @(*) begin
	eventsourceprocess22_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[22])) begin
		eventsourceprocess22_clear <= 1'd1;
	end
end
assign simsoc_i230 = eventsourceprocess23_status;
assign simsoc_i231 = eventsourceprocess23_pending;
always @(*) begin
	eventsourceprocess23_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[23])) begin
		eventsourceprocess23_clear <= 1'd1;
	end
end
assign simsoc_i240 = eventsourceprocess24_status;
assign simsoc_i241 = eventsourceprocess24_pending;
always @(*) begin
	eventsourceprocess24_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[24])) begin
		eventsourceprocess24_clear <= 1'd1;
	end
end
assign simsoc_i250 = eventsourceprocess25_status;
assign simsoc_i251 = eventsourceprocess25_pending;
always @(*) begin
	eventsourceprocess25_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[25])) begin
		eventsourceprocess25_clear <= 1'd1;
	end
end
assign simsoc_i260 = eventsourceprocess26_status;
assign simsoc_i261 = eventsourceprocess26_pending;
always @(*) begin
	eventsourceprocess26_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[26])) begin
		eventsourceprocess26_clear <= 1'd1;
	end
end
assign simsoc_i270 = eventsourceprocess27_status;
assign simsoc_i271 = eventsourceprocess27_pending;
always @(*) begin
	eventsourceprocess27_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[27])) begin
		eventsourceprocess27_clear <= 1'd1;
	end
end
assign simsoc_i280 = eventsourceprocess28_status;
assign simsoc_i281 = eventsourceprocess28_pending;
always @(*) begin
	eventsourceprocess28_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[28])) begin
		eventsourceprocess28_clear <= 1'd1;
	end
end
assign simsoc_i290 = eventsourceprocess29_status;
assign simsoc_i291 = eventsourceprocess29_pending;
always @(*) begin
	eventsourceprocess29_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[29])) begin
		eventsourceprocess29_clear <= 1'd1;
	end
end
assign simsoc_i300 = eventsourceprocess30_status;
assign simsoc_i301 = eventsourceprocess30_pending;
always @(*) begin
	eventsourceprocess30_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[30])) begin
		eventsourceprocess30_clear <= 1'd1;
	end
end
assign simsoc_i310 = eventsourceprocess31_status;
assign simsoc_i311 = eventsourceprocess31_pending;
always @(*) begin
	eventsourceprocess31_clear <= 1'd0;
	if ((simsoc_re & simsoc_r[31])) begin
		eventsourceprocess31_clear <= 1'd1;
	end
end
assign irq = ((((((((((((((((((((((((((((((((simsoc_status[0] & simsoc_storage[0]) | (simsoc_status[1] & simsoc_storage[1])) | (simsoc_status[2] & simsoc_storage[2])) | (simsoc_status[3] & simsoc_storage[3])) | (simsoc_status[4] & simsoc_storage[4])) | (simsoc_status[5] & simsoc_storage[5])) | (simsoc_status[6] & simsoc_storage[6])) | (simsoc_status[7] & simsoc_storage[7])) | (simsoc_status[8] & simsoc_storage[8])) | (simsoc_status[9] & simsoc_storage[9])) | (simsoc_status[10] & simsoc_storage[10])) | (simsoc_status[11] & simsoc_storage[11])) | (simsoc_status[12] & simsoc_storage[12])) | (simsoc_status[13] & simsoc_storage[13])) | (simsoc_status[14] & simsoc_storage[14])) | (simsoc_status[15] & simsoc_storage[15])) | (simsoc_status[16] & simsoc_storage[16])) | (simsoc_status[17] & simsoc_storage[17])) | (simsoc_status[18] & simsoc_storage[18])) | (simsoc_status[19] & simsoc_storage[19])) | (simsoc_status[20] & simsoc_storage[20])) | (simsoc_status[21] & simsoc_storage[21])) | (simsoc_status[22] & simsoc_storage[22])) | (simsoc_status[23] & simsoc_storage[23])) | (simsoc_status[24] & simsoc_storage[24])) | (simsoc_status[25] & simsoc_storage[25])) | (simsoc_status[26] & simsoc_storage[26])) | (simsoc_status[27] & simsoc_storage[27])) | (simsoc_status[28] & simsoc_storage[28])) | (simsoc_status[29] & simsoc_storage[29])) | (simsoc_status[30] & simsoc_storage[30])) | (simsoc_status[31] & simsoc_storage[31]));
assign eventsourceprocess0_status = eventsourceprocess0_trigger;
assign eventsourceprocess1_status = eventsourceprocess1_trigger;
assign eventsourceprocess2_status = eventsourceprocess2_trigger;
assign eventsourceprocess3_status = eventsourceprocess3_trigger;
assign eventsourceprocess4_status = eventsourceprocess4_trigger;
assign eventsourceprocess5_status = eventsourceprocess5_trigger;
assign eventsourceprocess6_status = eventsourceprocess6_trigger;
assign eventsourceprocess7_status = eventsourceprocess7_trigger;
assign eventsourceprocess8_status = eventsourceprocess8_trigger;
assign eventsourceprocess9_status = eventsourceprocess9_trigger;
assign eventsourceprocess10_status = eventsourceprocess10_trigger;
assign eventsourceprocess11_status = eventsourceprocess11_trigger;
assign eventsourceprocess12_status = eventsourceprocess12_trigger;
assign eventsourceprocess13_status = eventsourceprocess13_trigger;
assign eventsourceprocess14_status = eventsourceprocess14_trigger;
assign eventsourceprocess15_status = eventsourceprocess15_trigger;
assign eventsourceprocess16_status = eventsourceprocess16_trigger;
assign eventsourceprocess17_status = eventsourceprocess17_trigger;
assign eventsourceprocess18_status = eventsourceprocess18_trigger;
assign eventsourceprocess19_status = eventsourceprocess19_trigger;
assign eventsourceprocess20_status = eventsourceprocess20_trigger;
assign eventsourceprocess21_status = eventsourceprocess21_trigger;
assign eventsourceprocess22_status = eventsourceprocess22_trigger;
assign eventsourceprocess23_status = eventsourceprocess23_trigger;
assign eventsourceprocess24_status = eventsourceprocess24_trigger;
assign eventsourceprocess25_status = eventsourceprocess25_trigger;
assign eventsourceprocess26_status = eventsourceprocess26_trigger;
assign eventsourceprocess27_status = eventsourceprocess27_trigger;
assign eventsourceprocess28_status = eventsourceprocess28_trigger;
assign eventsourceprocess29_status = eventsourceprocess29_trigger;
assign eventsourceprocess30_status = eventsourceprocess30_trigger;
assign eventsourceprocess31_status = eventsourceprocess31_trigger;
assign sim_trace = sim_trace_storage;
assign scope_clk = sys_clk_1;
assign mux_valid = 1'd1;
assign mux_payload_data = {dbus_dat_r, dbus_dat_w, dbus_sel, dbus_ack, dbus_we, dbus_adr, dbus_cyc, dbus_stb, ibus_dat_r, ibus_dat_w, ibus_sel, ibus_ack, ibus_we, ibus_adr, ibus_cyc, ibus_stb};
always @(*) begin
	mux_source_last <= 1'd0;
	case (mux_value)
		1'd0: begin
			mux_source_last <= mux_last;
		end
	endcase
end
always @(*) begin
	mux_source_payload_data <= 204'd0;
	case (mux_value)
		1'd0: begin
			mux_source_payload_data <= mux_payload_data;
		end
	endcase
end
always @(*) begin
	mux_source_payload_hit <= 1'd0;
	case (mux_value)
		1'd0: begin
			mux_source_payload_hit <= mux_payload_hit;
		end
	endcase
end
always @(*) begin
	mux_ready <= 1'd0;
	case (mux_value)
		1'd0: begin
			mux_ready <= mux_source_ready;
		end
	endcase
end
always @(*) begin
	mux_source_valid <= 1'd0;
	case (mux_value)
		1'd0: begin
			mux_source_valid <= mux_valid;
		end
	endcase
end
always @(*) begin
	mux_source_first <= 1'd0;
	case (mux_value)
		1'd0: begin
			mux_source_first <= mux_first;
		end
	endcase
end
assign trigger_mem_sink_valid = trigger_mem_write_re;
assign trigger_mem_sink_payload_mask = trigger_mem_mask_storage;
assign trigger_mem_sink_payload_value = trigger_mem_value_storage;
assign trigger_mem_full_status = (~trigger_mem_sink_ready);
assign trigger_wait = (~((~trigger_enable) & trigger_enable_d));
assign trigger_hit = ((trigger_sink_sink_payload_data & trigger_mem_source_payload_mask) == (trigger_mem_source_payload_value & trigger_mem_source_payload_mask));
assign trigger_mem_source_ready = ((trigger_enable & trigger_hit) | (~trigger_done1));
assign trigger_source_source_valid = trigger_sink_sink_valid;
assign trigger_sink_sink_ready = trigger_source_source_ready;
assign trigger_source_source_first = trigger_sink_sink_first;
assign trigger_source_source_last = trigger_sink_sink_last;
assign trigger_source_source_payload_data = trigger_sink_sink_payload_data;
always @(*) begin
	trigger_source_source_payload_hit <= 1'd0;
	trigger_source_source_payload_hit <= trigger_sink_sink_payload_hit;
	trigger_source_source_payload_hit <= trigger_done0;
end
assign trigger_done0 = (~trigger_mem_source_valid);
assign trigger_mem_asyncfifo_din = {trigger_mem_fifo_in_last, trigger_mem_fifo_in_first, trigger_mem_fifo_in_payload_value, trigger_mem_fifo_in_payload_mask};
assign {trigger_mem_fifo_out_last, trigger_mem_fifo_out_first, trigger_mem_fifo_out_payload_value, trigger_mem_fifo_out_payload_mask} = trigger_mem_asyncfifo_dout;
assign {trigger_mem_fifo_out_last, trigger_mem_fifo_out_first, trigger_mem_fifo_out_payload_value, trigger_mem_fifo_out_payload_mask} = trigger_mem_asyncfifo_dout;
assign {trigger_mem_fifo_out_last, trigger_mem_fifo_out_first, trigger_mem_fifo_out_payload_value, trigger_mem_fifo_out_payload_mask} = trigger_mem_asyncfifo_dout;
assign {trigger_mem_fifo_out_last, trigger_mem_fifo_out_first, trigger_mem_fifo_out_payload_value, trigger_mem_fifo_out_payload_mask} = trigger_mem_asyncfifo_dout;
assign trigger_mem_sink_ready = trigger_mem_asyncfifo_writable;
assign trigger_mem_asyncfifo_we = trigger_mem_sink_valid;
assign trigger_mem_fifo_in_first = trigger_mem_sink_first;
assign trigger_mem_fifo_in_last = trigger_mem_sink_last;
assign trigger_mem_fifo_in_payload_mask = trigger_mem_sink_payload_mask;
assign trigger_mem_fifo_in_payload_value = trigger_mem_sink_payload_value;
assign trigger_mem_source_valid = trigger_mem_asyncfifo_readable;
assign trigger_mem_source_first = trigger_mem_fifo_out_first;
assign trigger_mem_source_last = trigger_mem_fifo_out_last;
assign trigger_mem_source_payload_mask = trigger_mem_fifo_out_payload_mask;
assign trigger_mem_source_payload_value = trigger_mem_fifo_out_payload_value;
assign trigger_mem_asyncfifo_re = trigger_mem_source_ready;
assign trigger_mem_graycounter0_ce = (trigger_mem_asyncfifo_writable & trigger_mem_asyncfifo_we);
assign trigger_mem_graycounter1_ce = (trigger_mem_asyncfifo_readable & trigger_mem_asyncfifo_re);
assign trigger_mem_asyncfifo_writable = (((trigger_mem_graycounter0_q[4] == trigger_mem_consume_wdomain[4]) | (trigger_mem_graycounter0_q[3] == trigger_mem_consume_wdomain[3])) | (trigger_mem_graycounter0_q[2:0] != trigger_mem_consume_wdomain[2:0]));
assign trigger_mem_asyncfifo_readable = (trigger_mem_graycounter1_q != trigger_mem_produce_rdomain);
assign trigger_mem_wrport_adr = trigger_mem_graycounter0_q_binary[3:0];
assign trigger_mem_wrport_dat_w = trigger_mem_asyncfifo_din;
assign trigger_mem_wrport_we = trigger_mem_graycounter0_ce;
assign trigger_mem_rdport_adr = trigger_mem_graycounter1_q_next_binary[3:0];
assign trigger_mem_asyncfifo_dout = trigger_mem_rdport_dat_r;
always @(*) begin
	trigger_mem_graycounter0_q_next_binary <= 5'd0;
	if (trigger_mem_graycounter0_ce) begin
		trigger_mem_graycounter0_q_next_binary <= (trigger_mem_graycounter0_q_binary + 1'd1);
	end else begin
		trigger_mem_graycounter0_q_next_binary <= trigger_mem_graycounter0_q_binary;
	end
end
assign trigger_mem_graycounter0_q_next = (trigger_mem_graycounter0_q_next_binary ^ trigger_mem_graycounter0_q_next_binary[4:1]);
always @(*) begin
	trigger_mem_graycounter1_q_next_binary <= 5'd0;
	if (trigger_mem_graycounter1_ce) begin
		trigger_mem_graycounter1_q_next_binary <= (trigger_mem_graycounter1_q_binary + 1'd1);
	end else begin
		trigger_mem_graycounter1_q_next_binary <= trigger_mem_graycounter1_q_binary;
	end
end
assign trigger_mem_graycounter1_q_next = (trigger_mem_graycounter1_q_next_binary ^ trigger_mem_graycounter1_q_next_binary[4:1]);
assign trigger_done1 = (trigger_count == 1'd0);
assign subsampler_done = (subsampler_counter == subsampler_value);
assign subsampler_sink_ready = subsampler_source_ready;
assign subsampler_source_first = subsampler_sink_first;
assign subsampler_source_last = subsampler_sink_last;
assign subsampler_source_payload_data = subsampler_sink_payload_data;
assign subsampler_source_payload_hit = subsampler_sink_payload_hit;
assign subsampler_source_valid = (subsampler_sink_valid & subsampler_done);
assign storage_level = storage_mem_level1;
assign storage_converter_sink_valid = storage_cdc_source_valid;
assign storage_cdc_source_ready = storage_converter_sink_ready;
assign storage_converter_sink_first = storage_cdc_source_first;
assign storage_converter_sink_last = storage_cdc_source_last;
assign storage_converter_sink_payload_data = storage_cdc_source_payload_data;
assign storage_read_source_valid = storage_source_source_valid;
assign storage_source_source_ready = storage_read_source_ready;
assign storage_read_source_first = storage_source_source_first;
assign storage_read_source_last = storage_source_source_last;
assign storage_read_source_payload_data = storage_source_source_payload_data;
assign storage_read_source_ready = (storage_mem_data_we | (~storage_enable_storage));
assign storage_mem_data_status = storage_read_source_payload_data;
assign storage_mem_syncfifo_din = {storage_mem_fifo_in_last, storage_mem_fifo_in_first, storage_mem_fifo_in_payload_data};
assign {storage_mem_fifo_out_last, storage_mem_fifo_out_first, storage_mem_fifo_out_payload_data} = storage_mem_syncfifo_dout;
assign {storage_mem_fifo_out_last, storage_mem_fifo_out_first, storage_mem_fifo_out_payload_data} = storage_mem_syncfifo_dout;
assign {storage_mem_fifo_out_last, storage_mem_fifo_out_first, storage_mem_fifo_out_payload_data} = storage_mem_syncfifo_dout;
assign storage_mem_sink_ready = storage_mem_syncfifo_writable;
assign storage_mem_syncfifo_we = storage_mem_sink_valid;
assign storage_mem_fifo_in_first = storage_mem_sink_first;
assign storage_mem_fifo_in_last = storage_mem_sink_last;
assign storage_mem_fifo_in_payload_data = storage_mem_sink_payload_data;
assign storage_mem_source_valid = storage_mem_readable;
assign storage_mem_source_first = storage_mem_fifo_out_first;
assign storage_mem_source_last = storage_mem_fifo_out_last;
assign storage_mem_source_payload_data = storage_mem_fifo_out_payload_data;
assign storage_mem_re = storage_mem_source_ready;
assign storage_mem_syncfifo_re = (storage_mem_syncfifo_readable & ((~storage_mem_readable) | storage_mem_re));
assign storage_mem_level1 = (storage_mem_level0 + storage_mem_readable);
always @(*) begin
	storage_mem_wrport_adr <= 9'd0;
	if (storage_mem_replace) begin
		storage_mem_wrport_adr <= (storage_mem_produce - 1'd1);
	end else begin
		storage_mem_wrport_adr <= storage_mem_produce;
	end
end
assign storage_mem_wrport_dat_w = storage_mem_syncfifo_din;
assign storage_mem_wrport_we = (storage_mem_syncfifo_we & (storage_mem_syncfifo_writable | storage_mem_replace));
assign storage_mem_do_read = (storage_mem_syncfifo_readable & storage_mem_syncfifo_re);
assign storage_mem_rdport_adr = storage_mem_consume;
assign storage_mem_syncfifo_dout = storage_mem_rdport_dat_r;
assign storage_mem_rdport_re = storage_mem_do_read;
assign storage_mem_syncfifo_writable = (storage_mem_level0 != 10'd512);
assign storage_mem_syncfifo_readable = (storage_mem_level0 != 1'd0);
assign storage_cdc_asyncfifo_din = {storage_cdc_fifo_in_last, storage_cdc_fifo_in_first, storage_cdc_fifo_in_payload_data};
assign {storage_cdc_fifo_out_last, storage_cdc_fifo_out_first, storage_cdc_fifo_out_payload_data} = storage_cdc_asyncfifo_dout;
assign {storage_cdc_fifo_out_last, storage_cdc_fifo_out_first, storage_cdc_fifo_out_payload_data} = storage_cdc_asyncfifo_dout;
assign {storage_cdc_fifo_out_last, storage_cdc_fifo_out_first, storage_cdc_fifo_out_payload_data} = storage_cdc_asyncfifo_dout;
assign storage_cdc_sink_ready = storage_cdc_asyncfifo_writable;
assign storage_cdc_asyncfifo_we = storage_cdc_sink_valid;
assign storage_cdc_fifo_in_first = storage_cdc_sink_first;
assign storage_cdc_fifo_in_last = storage_cdc_sink_last;
assign storage_cdc_fifo_in_payload_data = storage_cdc_sink_payload_data;
assign storage_cdc_source_valid = storage_cdc_asyncfifo_readable;
assign storage_cdc_source_first = storage_cdc_fifo_out_first;
assign storage_cdc_source_last = storage_cdc_fifo_out_last;
assign storage_cdc_source_payload_data = storage_cdc_fifo_out_payload_data;
assign storage_cdc_asyncfifo_re = storage_cdc_source_ready;
assign storage_cdc_graycounter0_ce = (storage_cdc_asyncfifo_writable & storage_cdc_asyncfifo_we);
assign storage_cdc_graycounter1_ce = (storage_cdc_asyncfifo_readable & storage_cdc_asyncfifo_re);
assign storage_cdc_asyncfifo_writable = (((storage_cdc_graycounter0_q[2] == storage_cdc_consume_wdomain[2]) | (storage_cdc_graycounter0_q[1] == storage_cdc_consume_wdomain[1])) | (storage_cdc_graycounter0_q[0] != storage_cdc_consume_wdomain[0]));
assign storage_cdc_asyncfifo_readable = (storage_cdc_graycounter1_q != storage_cdc_produce_rdomain);
assign storage_cdc_wrport_adr = storage_cdc_graycounter0_q_binary[1:0];
assign storage_cdc_wrport_dat_w = storage_cdc_asyncfifo_din;
assign storage_cdc_wrport_we = storage_cdc_graycounter0_ce;
assign storage_cdc_rdport_adr = storage_cdc_graycounter1_q_next_binary[1:0];
assign storage_cdc_asyncfifo_dout = storage_cdc_rdport_dat_r;
always @(*) begin
	storage_cdc_graycounter0_q_next_binary <= 3'd0;
	if (storage_cdc_graycounter0_ce) begin
		storage_cdc_graycounter0_q_next_binary <= (storage_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		storage_cdc_graycounter0_q_next_binary <= storage_cdc_graycounter0_q_binary;
	end
end
assign storage_cdc_graycounter0_q_next = (storage_cdc_graycounter0_q_next_binary ^ storage_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	storage_cdc_graycounter1_q_next_binary <= 3'd0;
	if (storage_cdc_graycounter1_ce) begin
		storage_cdc_graycounter1_q_next_binary <= (storage_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		storage_cdc_graycounter1_q_next_binary <= storage_cdc_graycounter1_q_binary;
	end
end
assign storage_cdc_graycounter1_q_next = (storage_cdc_graycounter1_q_next_binary ^ storage_cdc_graycounter1_q_next_binary[2:1]);
assign storage_done1 = (storage_count == 1'd0);
always @(*) begin
	simsoc_litescopeanalyzer_next_state <= 2'd0;
	simsoc_litescopeanalyzer_next_state <= simsoc_litescopeanalyzer_state;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
			if (storage_done1) begin
				simsoc_litescopeanalyzer_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if ((storage_sink_sink_valid & storage_sink_sink_payload_hit)) begin
				simsoc_litescopeanalyzer_next_state <= 2'd3;
			end
		end
		2'd3: begin
			if ((storage_mem_level1 >= storage_length)) begin
				simsoc_litescopeanalyzer_next_state <= 1'd0;
			end
		end
		default: begin
			if ((storage_enable & (~storage_enable_d))) begin
				simsoc_litescopeanalyzer_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	storage_wait <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
			storage_wait <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	storage_mem_sink_payload_data <= 204'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
			storage_mem_sink_payload_data <= storage_sink_sink_payload_data;
		end
		2'd3: begin
			storage_mem_sink_payload_data <= storage_sink_sink_payload_data;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	storage_mem_source_ready <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
			storage_mem_source_ready <= 1'd1;
		end
		2'd2: begin
			storage_mem_source_ready <= (storage_mem_level1 >= storage_offset);
		end
		2'd3: begin
		end
		default: begin
			storage_mem_source_ready <= storage_cdc_sink_ready;
		end
	endcase
end
always @(*) begin
	storage_cdc_sink_valid <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			storage_cdc_sink_valid <= storage_mem_source_valid;
		end
	endcase
end
always @(*) begin
	storage_done0 <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			storage_done0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	storage_sink_sink_ready <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
			storage_sink_sink_ready <= 1'd1;
		end
		2'd2: begin
			storage_sink_sink_ready <= storage_mem_sink_ready;
		end
		2'd3: begin
			storage_sink_sink_ready <= storage_mem_sink_ready;
		end
		default: begin
			storage_sink_sink_ready <= 1'd1;
		end
	endcase
end
always @(*) begin
	storage_cdc_sink_first <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			storage_cdc_sink_first <= storage_mem_source_first;
		end
	endcase
end
always @(*) begin
	storage_cdc_sink_last <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			storage_cdc_sink_last <= storage_mem_source_last;
		end
	endcase
end
always @(*) begin
	storage_cdc_sink_payload_data <= 204'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			storage_cdc_sink_payload_data <= storage_mem_source_payload_data;
		end
	endcase
end
always @(*) begin
	storage_mem_sink_valid <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
			storage_mem_sink_valid <= storage_sink_sink_valid;
		end
		2'd3: begin
			storage_mem_sink_valid <= storage_sink_sink_valid;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	storage_mem_sink_first <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
			storage_mem_sink_first <= storage_sink_sink_first;
		end
		2'd3: begin
			storage_mem_sink_first <= storage_sink_sink_first;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	storage_mem_sink_last <= 1'd0;
	case (simsoc_litescopeanalyzer_state)
		1'd1: begin
		end
		2'd2: begin
			storage_mem_sink_last <= storage_sink_sink_last;
		end
		2'd3: begin
			storage_mem_sink_last <= storage_sink_sink_last;
		end
		default: begin
		end
	endcase
end
assign storage_source_source_valid = storage_converter_source_valid;
assign storage_converter_source_ready = storage_source_source_ready;
assign storage_source_source_first = storage_converter_source_first;
assign storage_source_source_last = storage_converter_source_last;
assign storage_source_source_payload_data = storage_converter_source_payload_data;
assign storage_converter_first = (storage_converter_mux == 1'd0);
assign storage_converter_last = (storage_converter_mux == 3'd6);
assign storage_converter_source_valid = storage_converter_sink_valid;
assign storage_converter_source_first = (storage_converter_sink_first & storage_converter_first);
assign storage_converter_source_last = (storage_converter_sink_last & storage_converter_last);
assign storage_converter_sink_ready = (storage_converter_last & storage_converter_source_ready);
always @(*) begin
	storage_converter_source_payload_data <= 32'd0;
	case (storage_converter_mux)
		1'd0: begin
			storage_converter_source_payload_data <= storage_converter_sink_payload_data[31:0];
		end
		1'd1: begin
			storage_converter_source_payload_data <= storage_converter_sink_payload_data[63:32];
		end
		2'd2: begin
			storage_converter_source_payload_data <= storage_converter_sink_payload_data[95:64];
		end
		2'd3: begin
			storage_converter_source_payload_data <= storage_converter_sink_payload_data[127:96];
		end
		3'd4: begin
			storage_converter_source_payload_data <= storage_converter_sink_payload_data[159:128];
		end
		3'd5: begin
			storage_converter_source_payload_data <= storage_converter_sink_payload_data[191:160];
		end
		default: begin
			storage_converter_source_payload_data <= storage_converter_sink_payload_data[223:192];
		end
	endcase
end
assign storage_converter_source_payload_valid_token_count = storage_converter_last;
assign trigger_sink_sink_valid = mux_source_valid;
assign mux_source_ready = trigger_sink_sink_ready;
assign trigger_sink_sink_first = mux_source_first;
assign trigger_sink_sink_last = mux_source_last;
assign trigger_sink_sink_payload_data = mux_source_payload_data;
assign trigger_sink_sink_payload_hit = mux_source_payload_hit;
assign subsampler_sink_valid = trigger_source_source_valid;
assign trigger_source_source_ready = subsampler_sink_ready;
assign subsampler_sink_first = trigger_source_source_first;
assign subsampler_sink_last = trigger_source_source_last;
assign subsampler_sink_payload_data = trigger_source_source_payload_data;
assign subsampler_sink_payload_hit = trigger_source_source_payload_hit;
assign storage_sink_sink_valid = subsampler_source_valid;
assign subsampler_source_ready = storage_sink_sink_ready;
assign storage_sink_sink_first = subsampler_source_first;
assign storage_sink_sink_last = subsampler_source_last;
assign storage_sink_sink_payload_data = subsampler_source_payload_data;
assign storage_sink_sink_payload_hit = subsampler_source_payload_hit;
always @(*) begin
	simsoc_wishbone2csr_next_state <= 1'd0;
	simsoc_wishbone2csr_next_state <= simsoc_wishbone2csr_state;
	case (simsoc_wishbone2csr_state)
		1'd1: begin
			simsoc_wishbone2csr_next_state <= 1'd0;
		end
		default: begin
			if ((simsoc_wishbone_cyc & simsoc_wishbone_stb)) begin
				simsoc_wishbone2csr_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	simsoc_adr <= 14'd0;
	case (simsoc_wishbone2csr_state)
		1'd1: begin
		end
		default: begin
			if ((simsoc_wishbone_cyc & simsoc_wishbone_stb)) begin
				simsoc_adr <= simsoc_wishbone_adr;
			end
		end
	endcase
end
always @(*) begin
	simsoc_we <= 1'd0;
	case (simsoc_wishbone2csr_state)
		1'd1: begin
		end
		default: begin
			if ((simsoc_wishbone_cyc & simsoc_wishbone_stb)) begin
				simsoc_we <= (simsoc_wishbone_we & (simsoc_wishbone_sel != 1'd0));
			end
		end
	endcase
end
always @(*) begin
	simsoc_dat_w <= 32'd0;
	case (simsoc_wishbone2csr_state)
		1'd1: begin
		end
		default: begin
			simsoc_dat_w <= simsoc_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	simsoc_wishbone_dat_r <= 32'd0;
	case (simsoc_wishbone2csr_state)
		1'd1: begin
			simsoc_wishbone_dat_r <= simsoc_dat_r;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	simsoc_wishbone_ack <= 1'd0;
	case (simsoc_wishbone2csr_state)
		1'd1: begin
			simsoc_wishbone_ack <= 1'd1;
		end
		default: begin
		end
	endcase
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign ibus_dat_r = shared_dat_r;
assign dbus_dat_r = shared_dat_r;
assign ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_ack = (shared_ack & (grant == 1'd1));
assign ibus_err = (shared_err & (grant == 1'd0));
assign dbus_err = (shared_err & (grant == 1'd1));
assign request = {dbus_cyc, ibus_cyc};
always @(*) begin
	slave_sel <= 4'd0;
	slave_sel[0] <= (shared_adr[29:15] == 1'd0);
	slave_sel[1] <= (shared_adr[29:11] == 16'd32768);
	slave_sel[2] <= (shared_adr[29:14] == 15'd16384);
	slave_sel[3] <= (shared_adr[29:14] == 16'd61440);
end
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign simsoc_wishbone_adr = shared_adr;
assign simsoc_wishbone_dat_w = shared_dat_w;
assign simsoc_wishbone_sel = shared_sel;
assign simsoc_wishbone_stb = shared_stb;
assign simsoc_wishbone_we = shared_we;
assign simsoc_wishbone_cti = shared_cti;
assign simsoc_wishbone_bte = shared_bte;
assign ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign simsoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
always @(*) begin
	shared_ack <= 1'd0;
	shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | simsoc_wishbone_ack);
	if (done) begin
		shared_ack <= 1'd1;
	end
end
assign shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | simsoc_wishbone_err);
always @(*) begin
	shared_dat_r <= 32'd0;
	shared_dat_r <= (((({32{slave_sel_r[0]}} & ram_bus_dat_r) | ({32{slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & simsoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
	end
end
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	error <= 1'd0;
	if (done) begin
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank0_mux_value0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank0_mux_value0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank0_mux_value0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_mux_value0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank0_mux_value0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_enable0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_enable0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank0_trigger_enable0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_enable0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank0_trigger_enable0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_done_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_done_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank0_trigger_done_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_done_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank0_trigger_done_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign trigger_mem_write_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	trigger_mem_write_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
		trigger_mem_write_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	trigger_mem_write_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
		trigger_mem_write_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_mask6_r = csr_bankarray_interface0_bank_bus_dat_w[11:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask6_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank0_trigger_mem_mask6_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask6_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank0_trigger_mem_mask6_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_mem_mask5_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask5_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd5))) begin
		csr_bankarray_csrbank0_trigger_mem_mask5_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask5_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd5))) begin
		csr_bankarray_csrbank0_trigger_mem_mask5_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_mask4_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask4_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd6))) begin
		csr_bankarray_csrbank0_trigger_mem_mask4_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask4_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd6))) begin
		csr_bankarray_csrbank0_trigger_mem_mask4_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_mask3_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask3_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd7))) begin
		csr_bankarray_csrbank0_trigger_mem_mask3_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask3_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd7))) begin
		csr_bankarray_csrbank0_trigger_mem_mask3_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_mem_mask2_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask2_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd8))) begin
		csr_bankarray_csrbank0_trigger_mem_mask2_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask2_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd8))) begin
		csr_bankarray_csrbank0_trigger_mem_mask2_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_mask1_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask1_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd9))) begin
		csr_bankarray_csrbank0_trigger_mem_mask1_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask1_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd9))) begin
		csr_bankarray_csrbank0_trigger_mem_mask1_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_mem_mask0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd10))) begin
		csr_bankarray_csrbank0_trigger_mem_mask0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_mask0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd10))) begin
		csr_bankarray_csrbank0_trigger_mem_mask0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_mem_value6_r = csr_bankarray_interface0_bank_bus_dat_w[11:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value6_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd11))) begin
		csr_bankarray_csrbank0_trigger_mem_value6_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value6_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd11))) begin
		csr_bankarray_csrbank0_trigger_mem_value6_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_value5_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value5_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd12))) begin
		csr_bankarray_csrbank0_trigger_mem_value5_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value5_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd12))) begin
		csr_bankarray_csrbank0_trigger_mem_value5_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_mem_value4_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value4_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd13))) begin
		csr_bankarray_csrbank0_trigger_mem_value4_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value4_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd13))) begin
		csr_bankarray_csrbank0_trigger_mem_value4_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_value3_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value3_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd14))) begin
		csr_bankarray_csrbank0_trigger_mem_value3_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value3_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd14))) begin
		csr_bankarray_csrbank0_trigger_mem_value3_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_value2_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value2_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd15))) begin
		csr_bankarray_csrbank0_trigger_mem_value2_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value2_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 4'd15))) begin
		csr_bankarray_csrbank0_trigger_mem_value2_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_mem_value1_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value1_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd16))) begin
		csr_bankarray_csrbank0_trigger_mem_value1_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value1_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd16))) begin
		csr_bankarray_csrbank0_trigger_mem_value1_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_trigger_mem_value0_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd17))) begin
		csr_bankarray_csrbank0_trigger_mem_value0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_value0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd17))) begin
		csr_bankarray_csrbank0_trigger_mem_value0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_trigger_mem_full_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_full_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd18))) begin
		csr_bankarray_csrbank0_trigger_mem_full_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_trigger_mem_full_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd18))) begin
		csr_bankarray_csrbank0_trigger_mem_full_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_subsampler_value0_r = csr_bankarray_interface0_bank_bus_dat_w[15:0];
always @(*) begin
	csr_bankarray_csrbank0_subsampler_value0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd19))) begin
		csr_bankarray_csrbank0_subsampler_value0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_subsampler_value0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd19))) begin
		csr_bankarray_csrbank0_subsampler_value0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_storage_enable0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank0_storage_enable0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd20))) begin
		csr_bankarray_csrbank0_storage_enable0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_storage_enable0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd20))) begin
		csr_bankarray_csrbank0_storage_enable0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_storage_done_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank0_storage_done_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd21))) begin
		csr_bankarray_csrbank0_storage_done_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_storage_done_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd21))) begin
		csr_bankarray_csrbank0_storage_done_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_storage_length0_r = csr_bankarray_interface0_bank_bus_dat_w[9:0];
always @(*) begin
	csr_bankarray_csrbank0_storage_length0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd22))) begin
		csr_bankarray_csrbank0_storage_length0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_storage_length0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd22))) begin
		csr_bankarray_csrbank0_storage_length0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_storage_offset0_r = csr_bankarray_interface0_bank_bus_dat_w[9:0];
always @(*) begin
	csr_bankarray_csrbank0_storage_offset0_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd23))) begin
		csr_bankarray_csrbank0_storage_offset0_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_storage_offset0_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd23))) begin
		csr_bankarray_csrbank0_storage_offset0_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_storage_mem_level_r = csr_bankarray_interface0_bank_bus_dat_w[9:0];
always @(*) begin
	csr_bankarray_csrbank0_storage_mem_level_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd24))) begin
		csr_bankarray_csrbank0_storage_mem_level_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank0_storage_mem_level_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd24))) begin
		csr_bankarray_csrbank0_storage_mem_level_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
assign csr_bankarray_csrbank0_storage_mem_data_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank0_storage_mem_data_we <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd25))) begin
		csr_bankarray_csrbank0_storage_mem_data_we <= (~csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank0_storage_mem_data_re <= 1'd0;
	if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 5'd25))) begin
		csr_bankarray_csrbank0_storage_mem_data_re <= csr_bankarray_interface0_bank_bus_we;
	end
end
assign csr_bankarray_csrbank0_mux_value0_w = mux_value_storage;
assign csr_bankarray_csrbank0_trigger_enable0_w = trigger_enable_storage;
assign csr_bankarray_csrbank0_trigger_done_w = trigger_done_status;
assign trigger_done_we = csr_bankarray_csrbank0_trigger_done_we;
assign csr_bankarray_csrbank0_trigger_mem_mask6_w = trigger_mem_mask_storage[203:192];
assign csr_bankarray_csrbank0_trigger_mem_mask5_w = trigger_mem_mask_storage[191:160];
assign csr_bankarray_csrbank0_trigger_mem_mask4_w = trigger_mem_mask_storage[159:128];
assign csr_bankarray_csrbank0_trigger_mem_mask3_w = trigger_mem_mask_storage[127:96];
assign csr_bankarray_csrbank0_trigger_mem_mask2_w = trigger_mem_mask_storage[95:64];
assign csr_bankarray_csrbank0_trigger_mem_mask1_w = trigger_mem_mask_storage[63:32];
assign csr_bankarray_csrbank0_trigger_mem_mask0_w = trigger_mem_mask_storage[31:0];
assign csr_bankarray_csrbank0_trigger_mem_value6_w = trigger_mem_value_storage[203:192];
assign csr_bankarray_csrbank0_trigger_mem_value5_w = trigger_mem_value_storage[191:160];
assign csr_bankarray_csrbank0_trigger_mem_value4_w = trigger_mem_value_storage[159:128];
assign csr_bankarray_csrbank0_trigger_mem_value3_w = trigger_mem_value_storage[127:96];
assign csr_bankarray_csrbank0_trigger_mem_value2_w = trigger_mem_value_storage[95:64];
assign csr_bankarray_csrbank0_trigger_mem_value1_w = trigger_mem_value_storage[63:32];
assign csr_bankarray_csrbank0_trigger_mem_value0_w = trigger_mem_value_storage[31:0];
assign csr_bankarray_csrbank0_trigger_mem_full_w = trigger_mem_full_status;
assign trigger_mem_full_we = csr_bankarray_csrbank0_trigger_mem_full_we;
assign csr_bankarray_csrbank0_subsampler_value0_w = subsampler_value_storage[15:0];
assign csr_bankarray_csrbank0_storage_enable0_w = storage_enable_storage;
assign csr_bankarray_csrbank0_storage_done_w = storage_done_status;
assign storage_done_we = csr_bankarray_csrbank0_storage_done_we;
assign csr_bankarray_csrbank0_storage_length0_w = storage_length_storage[9:0];
assign csr_bankarray_csrbank0_storage_offset0_w = storage_offset_storage[9:0];
assign csr_bankarray_csrbank0_storage_mem_level_w = storage_mem_level_status[9:0];
assign storage_mem_level_we = csr_bankarray_csrbank0_storage_mem_level_we;
assign csr_bankarray_csrbank0_storage_mem_data_w = storage_mem_data_status[31:0];
assign storage_mem_data_we = csr_bankarray_csrbank0_storage_mem_data_we;
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank1_reset0_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
	csr_bankarray_csrbank1_reset0_we <= 1'd0;
	if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank1_reset0_we <= (~csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank1_reset0_re <= 1'd0;
	if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank1_reset0_re <= csr_bankarray_interface1_bank_bus_we;
	end
end
assign csr_bankarray_csrbank1_scratch0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank1_scratch0_we <= 1'd0;
	if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank1_scratch0_we <= (~csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank1_scratch0_re <= 1'd0;
	if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank1_scratch0_re <= csr_bankarray_interface1_bank_bus_we;
	end
end
assign csr_bankarray_csrbank1_bus_errors_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank1_bus_errors_re <= 1'd0;
	if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank1_bus_errors_re <= csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank1_bus_errors_we <= 1'd0;
	if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank1_bus_errors_we <= (~csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign csr_bankarray_csrbank1_reset0_w = reset_storage[1:0];
assign csr_bankarray_csrbank1_scratch0_w = scratch_storage[31:0];
assign csr_bankarray_csrbank1_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csr_bankarray_csrbank1_bus_errors_we;
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank2_oe0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank2_oe0_re <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank2_oe0_re <= csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank2_oe0_we <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank2_oe0_we <= (~csr_bankarray_interface2_bank_bus_we);
	end
end
assign csr_bankarray_csrbank2_in_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank2_in_re <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank2_in_re <= csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank2_in_we <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank2_in_we <= (~csr_bankarray_interface2_bank_bus_we);
	end
end
assign csr_bankarray_csrbank2_out0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank2_out0_we <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank2_out0_we <= (~csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank2_out0_re <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank2_out0_re <= csr_bankarray_interface2_bank_bus_we;
	end
end
assign csr_bankarray_csrbank2_mode0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank2_mode0_re <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		csr_bankarray_csrbank2_mode0_re <= csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank2_mode0_we <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		csr_bankarray_csrbank2_mode0_we <= (~csr_bankarray_interface2_bank_bus_we);
	end
end
assign csr_bankarray_csrbank2_edge0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank2_edge0_re <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank2_edge0_re <= csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank2_edge0_we <= 1'd0;
	if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank2_edge0_we <= (~csr_bankarray_interface2_bank_bus_we);
	end
end
assign csr_bankarray_csrbank2_oe0_w = oe_storage[31:0];
assign csr_bankarray_csrbank2_in_w = in_status[31:0];
assign in_we = csr_bankarray_csrbank2_in_we;
assign csr_bankarray_csrbank2_out0_w = out_storage[31:0];
assign csr_bankarray_csrbank2_mode0_w = mode_storage[31:0];
assign csr_bankarray_csrbank2_edge0_w = edge_storage[31:0];
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 3'd6);
always @(*) begin
	csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (csr_bankarray_sel_r) begin
		csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
	end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 2'd2);
assign finish_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
	finish_re <= 1'd0;
	if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		finish_re <= csr_bankarray_interface3_bank_bus_we;
	end
end
always @(*) begin
	finish_we <= 1'd0;
	if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		finish_we <= (~csr_bankarray_interface3_bank_bus_we);
	end
end
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 1'd1);
assign csr_bankarray_csrbank4_marker0_r = csr_bankarray_interface4_bank_bus_dat_w[7:0];
always @(*) begin
	csr_bankarray_csrbank4_marker0_we <= 1'd0;
	if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank4_marker0_we <= (~csr_bankarray_interface4_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank4_marker0_re <= 1'd0;
	if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank4_marker0_re <= csr_bankarray_interface4_bank_bus_we;
	end
end
assign csr_bankarray_csrbank4_marker0_w = sim_marker_storage[7:0];
assign csr_bankarray_csrbank5_sel = (csr_bankarray_interface5_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank5_enable0_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank5_enable0_we <= 1'd0;
	if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank5_enable0_we <= (~csr_bankarray_interface5_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank5_enable0_re <= 1'd0;
	if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank5_enable0_re <= csr_bankarray_interface5_bank_bus_we;
	end
end
assign csr_bankarray_csrbank5_enable0_w = sim_trace_storage;
assign csr_bankarray_csrbank6_sel = (csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign csr_bankarray_csrbank6_load0_r = csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank6_load0_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank6_load0_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank6_load0_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csr_bankarray_csrbank6_load0_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
assign csr_bankarray_csrbank6_reload0_r = csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank6_reload0_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank6_reload0_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank6_reload0_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank6_reload0_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
assign csr_bankarray_csrbank6_en0_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank6_en0_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank6_en0_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank6_en0_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank6_en0_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
assign csr_bankarray_csrbank6_update_value0_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank6_update_value0_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		csr_bankarray_csrbank6_update_value0_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank6_update_value0_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
		csr_bankarray_csrbank6_update_value0_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
assign csr_bankarray_csrbank6_value_r = csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csr_bankarray_csrbank6_value_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank6_value_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank6_value_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank6_value_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
assign csr_bankarray_csrbank6_ev_status_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank6_ev_status_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
		csr_bankarray_csrbank6_ev_status_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank6_ev_status_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
		csr_bankarray_csrbank6_ev_status_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
assign csr_bankarray_csrbank6_ev_pending_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank6_ev_pending_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
		csr_bankarray_csrbank6_ev_pending_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank6_ev_pending_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
		csr_bankarray_csrbank6_ev_pending_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
assign csr_bankarray_csrbank6_ev_enable0_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank6_ev_enable0_re <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
		csr_bankarray_csrbank6_ev_enable0_re <= csr_bankarray_interface6_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank6_ev_enable0_we <= 1'd0;
	if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
		csr_bankarray_csrbank6_ev_enable0_we <= (~csr_bankarray_interface6_bank_bus_we);
	end
end
assign csr_bankarray_csrbank6_load0_w = timer_load_storage[31:0];
assign csr_bankarray_csrbank6_reload0_w = timer_reload_storage[31:0];
assign csr_bankarray_csrbank6_en0_w = timer_en_storage;
assign csr_bankarray_csrbank6_update_value0_w = timer_update_value_storage;
assign csr_bankarray_csrbank6_value_w = timer_value_status[31:0];
assign timer_value_we = csr_bankarray_csrbank6_value_we;
assign timer_status_status = timer_zero0;
assign csr_bankarray_csrbank6_ev_status_w = timer_status_status;
assign timer_status_we = csr_bankarray_csrbank6_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csr_bankarray_csrbank6_ev_pending_w = timer_pending_status;
assign timer_pending_we = csr_bankarray_csrbank6_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csr_bankarray_csrbank6_ev_enable0_w = timer_enable_storage;
assign csr_bankarray_csrbank7_sel = (csr_bankarray_interface7_bank_bus_adr[13:9] == 4'd8);
assign uart_rxtx_r = csr_bankarray_interface7_bank_bus_dat_w[7:0];
always @(*) begin
	uart_rxtx_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	uart_rxtx_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
assign csr_bankarray_csrbank7_txfull_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank7_txfull_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank7_txfull_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank7_txfull_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
		csr_bankarray_csrbank7_txfull_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
assign csr_bankarray_csrbank7_rxempty_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank7_rxempty_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank7_rxempty_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank7_rxempty_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
		csr_bankarray_csrbank7_rxempty_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
assign csr_bankarray_csrbank7_ev_status_r = csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
	csr_bankarray_csrbank7_ev_status_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
		csr_bankarray_csrbank7_ev_status_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank7_ev_status_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd3))) begin
		csr_bankarray_csrbank7_ev_status_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
assign csr_bankarray_csrbank7_ev_pending_r = csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
	csr_bankarray_csrbank7_ev_pending_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank7_ev_pending_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank7_ev_pending_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd4))) begin
		csr_bankarray_csrbank7_ev_pending_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
assign csr_bankarray_csrbank7_ev_enable0_r = csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
	csr_bankarray_csrbank7_ev_enable0_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
		csr_bankarray_csrbank7_ev_enable0_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank7_ev_enable0_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd5))) begin
		csr_bankarray_csrbank7_ev_enable0_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
assign csr_bankarray_csrbank7_txempty_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank7_txempty_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
		csr_bankarray_csrbank7_txempty_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
always @(*) begin
	csr_bankarray_csrbank7_txempty_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd6))) begin
		csr_bankarray_csrbank7_txempty_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
assign csr_bankarray_csrbank7_rxfull_r = csr_bankarray_interface7_bank_bus_dat_w[0];
always @(*) begin
	csr_bankarray_csrbank7_rxfull_re <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd7))) begin
		csr_bankarray_csrbank7_rxfull_re <= csr_bankarray_interface7_bank_bus_we;
	end
end
always @(*) begin
	csr_bankarray_csrbank7_rxfull_we <= 1'd0;
	if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 3'd7))) begin
		csr_bankarray_csrbank7_rxfull_we <= (~csr_bankarray_interface7_bank_bus_we);
	end
end
assign csr_bankarray_csrbank7_txfull_w = uart_txfull_status;
assign uart_txfull_we = csr_bankarray_csrbank7_txfull_we;
assign csr_bankarray_csrbank7_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csr_bankarray_csrbank7_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign csr_bankarray_csrbank7_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csr_bankarray_csrbank7_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign csr_bankarray_csrbank7_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csr_bankarray_csrbank7_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csr_bankarray_csrbank7_ev_enable0_w = uart_enable_storage[1:0];
assign csr_bankarray_csrbank7_txempty_w = uart_txempty_status;
assign uart_txempty_we = csr_bankarray_csrbank7_txempty_we;
assign csr_bankarray_csrbank7_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csr_bankarray_csrbank7_rxfull_we;
assign csr_interconnect_adr = simsoc_adr;
assign csr_interconnect_we = simsoc_we;
assign csr_interconnect_dat_w = simsoc_dat_w;
assign simsoc_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface5_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface6_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface7_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface5_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface6_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface7_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_interface5_bank_bus_dat_r) | csr_bankarray_interface6_bank_bus_dat_r) | csr_bankarray_interface7_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
	array_muxed0 <= 30'd0;
	case (grant)
		1'd0: begin
			array_muxed0 <= ibus_adr;
		end
		default: begin
			array_muxed0 <= dbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (grant)
		1'd0: begin
			array_muxed1 <= ibus_dat_w;
		end
		default: begin
			array_muxed1 <= dbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (grant)
		1'd0: begin
			array_muxed2 <= ibus_sel;
		end
		default: begin
			array_muxed2 <= dbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed3 <= ibus_cyc;
		end
		default: begin
			array_muxed3 <= dbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed4 <= ibus_stb;
		end
		default: begin
			array_muxed4 <= dbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed5 <= ibus_we;
		end
		default: begin
			array_muxed5 <= dbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (grant)
		1'd0: begin
			array_muxed6 <= ibus_cti;
		end
		default: begin
			array_muxed6 <= dbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (grant)
		1'd0: begin
			array_muxed7 <= ibus_bte;
		end
		default: begin
			array_muxed7 <= dbus_bte;
		end
	endcase
end
always @(*) begin
	in_status <= 32'd0;
	in_status[0] <= multiregimpl0_regs1;
	in_status[1] <= multiregimpl1_regs1;
	in_status[2] <= multiregimpl2_regs1;
	in_status[3] <= multiregimpl3_regs1;
	in_status[4] <= multiregimpl4_regs1;
	in_status[5] <= multiregimpl5_regs1;
	in_status[6] <= multiregimpl6_regs1;
	in_status[7] <= multiregimpl7_regs1;
	in_status[8] <= multiregimpl8_regs1;
	in_status[9] <= multiregimpl9_regs1;
	in_status[10] <= multiregimpl10_regs1;
	in_status[11] <= multiregimpl11_regs1;
	in_status[12] <= multiregimpl12_regs1;
	in_status[13] <= multiregimpl13_regs1;
	in_status[14] <= multiregimpl14_regs1;
	in_status[15] <= multiregimpl15_regs1;
	in_status[16] <= multiregimpl16_regs1;
	in_status[17] <= multiregimpl17_regs1;
	in_status[18] <= multiregimpl18_regs1;
	in_status[19] <= multiregimpl19_regs1;
	in_status[20] <= multiregimpl20_regs1;
	in_status[21] <= multiregimpl21_regs1;
	in_status[22] <= multiregimpl22_regs1;
	in_status[23] <= multiregimpl23_regs1;
	in_status[24] <= multiregimpl24_regs1;
	in_status[25] <= multiregimpl25_regs1;
	in_status[26] <= multiregimpl26_regs1;
	in_status[27] <= multiregimpl27_regs1;
	in_status[28] <= multiregimpl28_regs1;
	in_status[29] <= multiregimpl29_regs1;
	in_status[30] <= multiregimpl30_regs1;
	in_status[31] <= multiregimpl31_regs1;
end
assign mux_value = multiregimpl32_regs1;
assign trigger_enable = multiregimpl33_regs1;
assign trigger_done_status = multiregimpl34_regs1;
assign trigger_mem_produce_rdomain = multiregimpl35_regs1;
assign trigger_mem_consume_wdomain = multiregimpl36_regs1;
assign subsampler_value = multiregimpl37_regs1;
assign storage_enable = multiregimpl38_regs1;
assign storage_length = multiregimpl39_regs1;
assign storage_offset = multiregimpl40_regs1;
assign storage_done_status = multiregimpl41_regs1;
assign storage_mem_level_status = multiregimpl42_regs1;
assign storage_cdc_produce_rdomain = multiregimpl43_regs1;
assign storage_cdc_consume_wdomain = multiregimpl44_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge scope_clk) begin
	trigger_enable_d <= trigger_enable;
	trigger_mem_graycounter1_q_binary <= trigger_mem_graycounter1_q_next_binary;
	trigger_mem_graycounter1_q <= trigger_mem_graycounter1_q_next;
	if (trigger_wait) begin
		if ((~trigger_done1)) begin
			trigger_count <= (trigger_count - 1'd1);
		end
	end else begin
		trigger_count <= 6'd32;
	end
	if (subsampler_source_ready) begin
		if (subsampler_done) begin
			subsampler_counter <= 1'd0;
		end else begin
			if (subsampler_sink_valid) begin
				subsampler_counter <= (subsampler_counter + 1'd1);
			end
		end
	end
	storage_enable_d <= storage_enable;
	if (storage_mem_syncfifo_re) begin
		storage_mem_readable <= 1'd1;
	end else begin
		if (storage_mem_re) begin
			storage_mem_readable <= 1'd0;
		end
	end
	if (((storage_mem_syncfifo_we & storage_mem_syncfifo_writable) & (~storage_mem_replace))) begin
		storage_mem_produce <= (storage_mem_produce + 1'd1);
	end
	if (storage_mem_do_read) begin
		storage_mem_consume <= (storage_mem_consume + 1'd1);
	end
	if (((storage_mem_syncfifo_we & storage_mem_syncfifo_writable) & (~storage_mem_replace))) begin
		if ((~storage_mem_do_read)) begin
			storage_mem_level0 <= (storage_mem_level0 + 1'd1);
		end
	end else begin
		if (storage_mem_do_read) begin
			storage_mem_level0 <= (storage_mem_level0 - 1'd1);
		end
	end
	storage_cdc_graycounter0_q_binary <= storage_cdc_graycounter0_q_next_binary;
	storage_cdc_graycounter0_q <= storage_cdc_graycounter0_q_next;
	if (storage_wait) begin
		if ((~storage_done1)) begin
			storage_count <= (storage_count - 1'd1);
		end
	end else begin
		storage_count <= 10'd512;
	end
	simsoc_litescopeanalyzer_state <= simsoc_litescopeanalyzer_next_state;
	if (scope_rst) begin
		trigger_enable_d <= 1'd0;
		trigger_mem_graycounter1_q <= 5'd0;
		trigger_mem_graycounter1_q_binary <= 5'd0;
		trigger_count <= 6'd32;
		subsampler_counter <= 16'd0;
		storage_enable_d <= 1'd0;
		storage_mem_readable <= 1'd0;
		storage_mem_level0 <= 10'd0;
		storage_mem_produce <= 9'd0;
		storage_mem_consume <= 9'd0;
		storage_cdc_graycounter0_q <= 3'd0;
		storage_cdc_graycounter0_q_binary <= 3'd0;
		storage_count <= 10'd512;
		simsoc_litescopeanalyzer_state <= 2'd0;
	end
	multiregimpl32_regs0 <= mux_value_storage;
	multiregimpl32_regs1 <= multiregimpl32_regs0;
	multiregimpl33_regs0 <= trigger_enable_storage;
	multiregimpl33_regs1 <= multiregimpl33_regs0;
	multiregimpl35_regs0 <= trigger_mem_graycounter0_q;
	multiregimpl35_regs1 <= multiregimpl35_regs0;
	multiregimpl37_regs0 <= subsampler_value_storage;
	multiregimpl37_regs1 <= multiregimpl37_regs0;
	multiregimpl38_regs0 <= storage_enable_storage;
	multiregimpl38_regs1 <= multiregimpl38_regs0;
	multiregimpl39_regs0 <= storage_length_storage;
	multiregimpl39_regs1 <= multiregimpl39_regs0;
	multiregimpl40_regs0 <= storage_offset_storage;
	multiregimpl40_regs1 <= multiregimpl40_regs0;
	multiregimpl44_regs0 <= storage_cdc_graycounter1_q;
	multiregimpl44_regs1 <= multiregimpl44_regs0;
end

always @(posedge sys_clk_1) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & ((~ram_bus_ack) | adr_burst))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & ((~interface0_ram_bus_ack) | sram0_adr_burst))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & ((~interface1_ram_bus_ack) | sram1_adr_burst))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_trigger_d <= uart_tx_trigger;
	if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_trigger_d <= uart_rx_trigger;
	if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	in_pads_n_d0 <= in_status[0];
	in_pads_n_d1 <= in_status[1];
	in_pads_n_d2 <= in_status[2];
	in_pads_n_d3 <= in_status[3];
	in_pads_n_d4 <= in_status[4];
	in_pads_n_d5 <= in_status[5];
	in_pads_n_d6 <= in_status[6];
	in_pads_n_d7 <= in_status[7];
	in_pads_n_d8 <= in_status[8];
	in_pads_n_d9 <= in_status[9];
	in_pads_n_d10 <= in_status[10];
	in_pads_n_d11 <= in_status[11];
	in_pads_n_d12 <= in_status[12];
	in_pads_n_d13 <= in_status[13];
	in_pads_n_d14 <= in_status[14];
	in_pads_n_d15 <= in_status[15];
	in_pads_n_d16 <= in_status[16];
	in_pads_n_d17 <= in_status[17];
	in_pads_n_d18 <= in_status[18];
	in_pads_n_d19 <= in_status[19];
	in_pads_n_d20 <= in_status[20];
	in_pads_n_d21 <= in_status[21];
	in_pads_n_d22 <= in_status[22];
	in_pads_n_d23 <= in_status[23];
	in_pads_n_d24 <= in_status[24];
	in_pads_n_d25 <= in_status[25];
	in_pads_n_d26 <= in_status[26];
	in_pads_n_d27 <= in_status[27];
	in_pads_n_d28 <= in_status[28];
	in_pads_n_d29 <= in_status[29];
	in_pads_n_d30 <= in_status[30];
	in_pads_n_d31 <= in_status[31];
	if (eventsourceprocess0_clear) begin
		eventsourceprocess0_pending <= 1'd0;
	end
	eventsourceprocess0_trigger_d <= eventsourceprocess0_trigger;
	if ((eventsourceprocess0_trigger & (~eventsourceprocess0_trigger_d))) begin
		eventsourceprocess0_pending <= 1'd1;
	end
	if (eventsourceprocess1_clear) begin
		eventsourceprocess1_pending <= 1'd0;
	end
	eventsourceprocess1_trigger_d <= eventsourceprocess1_trigger;
	if ((eventsourceprocess1_trigger & (~eventsourceprocess1_trigger_d))) begin
		eventsourceprocess1_pending <= 1'd1;
	end
	if (eventsourceprocess2_clear) begin
		eventsourceprocess2_pending <= 1'd0;
	end
	eventsourceprocess2_trigger_d <= eventsourceprocess2_trigger;
	if ((eventsourceprocess2_trigger & (~eventsourceprocess2_trigger_d))) begin
		eventsourceprocess2_pending <= 1'd1;
	end
	if (eventsourceprocess3_clear) begin
		eventsourceprocess3_pending <= 1'd0;
	end
	eventsourceprocess3_trigger_d <= eventsourceprocess3_trigger;
	if ((eventsourceprocess3_trigger & (~eventsourceprocess3_trigger_d))) begin
		eventsourceprocess3_pending <= 1'd1;
	end
	if (eventsourceprocess4_clear) begin
		eventsourceprocess4_pending <= 1'd0;
	end
	eventsourceprocess4_trigger_d <= eventsourceprocess4_trigger;
	if ((eventsourceprocess4_trigger & (~eventsourceprocess4_trigger_d))) begin
		eventsourceprocess4_pending <= 1'd1;
	end
	if (eventsourceprocess5_clear) begin
		eventsourceprocess5_pending <= 1'd0;
	end
	eventsourceprocess5_trigger_d <= eventsourceprocess5_trigger;
	if ((eventsourceprocess5_trigger & (~eventsourceprocess5_trigger_d))) begin
		eventsourceprocess5_pending <= 1'd1;
	end
	if (eventsourceprocess6_clear) begin
		eventsourceprocess6_pending <= 1'd0;
	end
	eventsourceprocess6_trigger_d <= eventsourceprocess6_trigger;
	if ((eventsourceprocess6_trigger & (~eventsourceprocess6_trigger_d))) begin
		eventsourceprocess6_pending <= 1'd1;
	end
	if (eventsourceprocess7_clear) begin
		eventsourceprocess7_pending <= 1'd0;
	end
	eventsourceprocess7_trigger_d <= eventsourceprocess7_trigger;
	if ((eventsourceprocess7_trigger & (~eventsourceprocess7_trigger_d))) begin
		eventsourceprocess7_pending <= 1'd1;
	end
	if (eventsourceprocess8_clear) begin
		eventsourceprocess8_pending <= 1'd0;
	end
	eventsourceprocess8_trigger_d <= eventsourceprocess8_trigger;
	if ((eventsourceprocess8_trigger & (~eventsourceprocess8_trigger_d))) begin
		eventsourceprocess8_pending <= 1'd1;
	end
	if (eventsourceprocess9_clear) begin
		eventsourceprocess9_pending <= 1'd0;
	end
	eventsourceprocess9_trigger_d <= eventsourceprocess9_trigger;
	if ((eventsourceprocess9_trigger & (~eventsourceprocess9_trigger_d))) begin
		eventsourceprocess9_pending <= 1'd1;
	end
	if (eventsourceprocess10_clear) begin
		eventsourceprocess10_pending <= 1'd0;
	end
	eventsourceprocess10_trigger_d <= eventsourceprocess10_trigger;
	if ((eventsourceprocess10_trigger & (~eventsourceprocess10_trigger_d))) begin
		eventsourceprocess10_pending <= 1'd1;
	end
	if (eventsourceprocess11_clear) begin
		eventsourceprocess11_pending <= 1'd0;
	end
	eventsourceprocess11_trigger_d <= eventsourceprocess11_trigger;
	if ((eventsourceprocess11_trigger & (~eventsourceprocess11_trigger_d))) begin
		eventsourceprocess11_pending <= 1'd1;
	end
	if (eventsourceprocess12_clear) begin
		eventsourceprocess12_pending <= 1'd0;
	end
	eventsourceprocess12_trigger_d <= eventsourceprocess12_trigger;
	if ((eventsourceprocess12_trigger & (~eventsourceprocess12_trigger_d))) begin
		eventsourceprocess12_pending <= 1'd1;
	end
	if (eventsourceprocess13_clear) begin
		eventsourceprocess13_pending <= 1'd0;
	end
	eventsourceprocess13_trigger_d <= eventsourceprocess13_trigger;
	if ((eventsourceprocess13_trigger & (~eventsourceprocess13_trigger_d))) begin
		eventsourceprocess13_pending <= 1'd1;
	end
	if (eventsourceprocess14_clear) begin
		eventsourceprocess14_pending <= 1'd0;
	end
	eventsourceprocess14_trigger_d <= eventsourceprocess14_trigger;
	if ((eventsourceprocess14_trigger & (~eventsourceprocess14_trigger_d))) begin
		eventsourceprocess14_pending <= 1'd1;
	end
	if (eventsourceprocess15_clear) begin
		eventsourceprocess15_pending <= 1'd0;
	end
	eventsourceprocess15_trigger_d <= eventsourceprocess15_trigger;
	if ((eventsourceprocess15_trigger & (~eventsourceprocess15_trigger_d))) begin
		eventsourceprocess15_pending <= 1'd1;
	end
	if (eventsourceprocess16_clear) begin
		eventsourceprocess16_pending <= 1'd0;
	end
	eventsourceprocess16_trigger_d <= eventsourceprocess16_trigger;
	if ((eventsourceprocess16_trigger & (~eventsourceprocess16_trigger_d))) begin
		eventsourceprocess16_pending <= 1'd1;
	end
	if (eventsourceprocess17_clear) begin
		eventsourceprocess17_pending <= 1'd0;
	end
	eventsourceprocess17_trigger_d <= eventsourceprocess17_trigger;
	if ((eventsourceprocess17_trigger & (~eventsourceprocess17_trigger_d))) begin
		eventsourceprocess17_pending <= 1'd1;
	end
	if (eventsourceprocess18_clear) begin
		eventsourceprocess18_pending <= 1'd0;
	end
	eventsourceprocess18_trigger_d <= eventsourceprocess18_trigger;
	if ((eventsourceprocess18_trigger & (~eventsourceprocess18_trigger_d))) begin
		eventsourceprocess18_pending <= 1'd1;
	end
	if (eventsourceprocess19_clear) begin
		eventsourceprocess19_pending <= 1'd0;
	end
	eventsourceprocess19_trigger_d <= eventsourceprocess19_trigger;
	if ((eventsourceprocess19_trigger & (~eventsourceprocess19_trigger_d))) begin
		eventsourceprocess19_pending <= 1'd1;
	end
	if (eventsourceprocess20_clear) begin
		eventsourceprocess20_pending <= 1'd0;
	end
	eventsourceprocess20_trigger_d <= eventsourceprocess20_trigger;
	if ((eventsourceprocess20_trigger & (~eventsourceprocess20_trigger_d))) begin
		eventsourceprocess20_pending <= 1'd1;
	end
	if (eventsourceprocess21_clear) begin
		eventsourceprocess21_pending <= 1'd0;
	end
	eventsourceprocess21_trigger_d <= eventsourceprocess21_trigger;
	if ((eventsourceprocess21_trigger & (~eventsourceprocess21_trigger_d))) begin
		eventsourceprocess21_pending <= 1'd1;
	end
	if (eventsourceprocess22_clear) begin
		eventsourceprocess22_pending <= 1'd0;
	end
	eventsourceprocess22_trigger_d <= eventsourceprocess22_trigger;
	if ((eventsourceprocess22_trigger & (~eventsourceprocess22_trigger_d))) begin
		eventsourceprocess22_pending <= 1'd1;
	end
	if (eventsourceprocess23_clear) begin
		eventsourceprocess23_pending <= 1'd0;
	end
	eventsourceprocess23_trigger_d <= eventsourceprocess23_trigger;
	if ((eventsourceprocess23_trigger & (~eventsourceprocess23_trigger_d))) begin
		eventsourceprocess23_pending <= 1'd1;
	end
	if (eventsourceprocess24_clear) begin
		eventsourceprocess24_pending <= 1'd0;
	end
	eventsourceprocess24_trigger_d <= eventsourceprocess24_trigger;
	if ((eventsourceprocess24_trigger & (~eventsourceprocess24_trigger_d))) begin
		eventsourceprocess24_pending <= 1'd1;
	end
	if (eventsourceprocess25_clear) begin
		eventsourceprocess25_pending <= 1'd0;
	end
	eventsourceprocess25_trigger_d <= eventsourceprocess25_trigger;
	if ((eventsourceprocess25_trigger & (~eventsourceprocess25_trigger_d))) begin
		eventsourceprocess25_pending <= 1'd1;
	end
	if (eventsourceprocess26_clear) begin
		eventsourceprocess26_pending <= 1'd0;
	end
	eventsourceprocess26_trigger_d <= eventsourceprocess26_trigger;
	if ((eventsourceprocess26_trigger & (~eventsourceprocess26_trigger_d))) begin
		eventsourceprocess26_pending <= 1'd1;
	end
	if (eventsourceprocess27_clear) begin
		eventsourceprocess27_pending <= 1'd0;
	end
	eventsourceprocess27_trigger_d <= eventsourceprocess27_trigger;
	if ((eventsourceprocess27_trigger & (~eventsourceprocess27_trigger_d))) begin
		eventsourceprocess27_pending <= 1'd1;
	end
	if (eventsourceprocess28_clear) begin
		eventsourceprocess28_pending <= 1'd0;
	end
	eventsourceprocess28_trigger_d <= eventsourceprocess28_trigger;
	if ((eventsourceprocess28_trigger & (~eventsourceprocess28_trigger_d))) begin
		eventsourceprocess28_pending <= 1'd1;
	end
	if (eventsourceprocess29_clear) begin
		eventsourceprocess29_pending <= 1'd0;
	end
	eventsourceprocess29_trigger_d <= eventsourceprocess29_trigger;
	if ((eventsourceprocess29_trigger & (~eventsourceprocess29_trigger_d))) begin
		eventsourceprocess29_pending <= 1'd1;
	end
	if (eventsourceprocess30_clear) begin
		eventsourceprocess30_pending <= 1'd0;
	end
	eventsourceprocess30_trigger_d <= eventsourceprocess30_trigger;
	if ((eventsourceprocess30_trigger & (~eventsourceprocess30_trigger_d))) begin
		eventsourceprocess30_pending <= 1'd1;
	end
	if (eventsourceprocess31_clear) begin
		eventsourceprocess31_pending <= 1'd0;
	end
	eventsourceprocess31_trigger_d <= eventsourceprocess31_trigger;
	if ((eventsourceprocess31_trigger & (~eventsourceprocess31_trigger_d))) begin
		eventsourceprocess31_pending <= 1'd1;
	end
	if (finish_re) begin
		$finish;
	end
	trigger_mem_graycounter0_q_binary <= trigger_mem_graycounter0_q_next_binary;
	trigger_mem_graycounter0_q <= trigger_mem_graycounter0_q_next;
	storage_cdc_graycounter1_q_binary <= storage_cdc_graycounter1_q_next_binary;
	storage_cdc_graycounter1_q <= storage_cdc_graycounter1_q_next;
	if ((storage_converter_source_valid & storage_converter_source_ready)) begin
		if (storage_converter_last) begin
			storage_converter_mux <= 1'd0;
		end else begin
			storage_converter_mux <= (storage_converter_mux + 1'd1);
		end
	end
	simsoc_wishbone2csr_state <= simsoc_wishbone2csr_next_state;
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank0_sel) begin
		case (csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_mux_value0_w;
			end
			1'd1: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_enable0_w;
			end
			2'd2: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_done_w;
			end
			2'd3: begin
				csr_bankarray_interface0_bank_bus_dat_r <= trigger_mem_write_w;
			end
			3'd4: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_mask6_w;
			end
			3'd5: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_mask5_w;
			end
			3'd6: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_mask4_w;
			end
			3'd7: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_mask3_w;
			end
			4'd8: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_mask2_w;
			end
			4'd9: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_mask1_w;
			end
			4'd10: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_mask0_w;
			end
			4'd11: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_value6_w;
			end
			4'd12: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_value5_w;
			end
			4'd13: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_value4_w;
			end
			4'd14: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_value3_w;
			end
			4'd15: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_value2_w;
			end
			5'd16: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_value1_w;
			end
			5'd17: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_value0_w;
			end
			5'd18: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_trigger_mem_full_w;
			end
			5'd19: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_subsampler_value0_w;
			end
			5'd20: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_storage_enable0_w;
			end
			5'd21: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_storage_done_w;
			end
			5'd22: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_storage_length0_w;
			end
			5'd23: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_storage_offset0_w;
			end
			5'd24: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_storage_mem_level_w;
			end
			5'd25: begin
				csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_storage_mem_data_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank0_mux_value0_re) begin
		mux_value_storage <= csr_bankarray_csrbank0_mux_value0_r;
	end
	mux_value_re <= csr_bankarray_csrbank0_mux_value0_re;
	if (csr_bankarray_csrbank0_trigger_enable0_re) begin
		trigger_enable_storage <= csr_bankarray_csrbank0_trigger_enable0_r;
	end
	trigger_enable_re <= csr_bankarray_csrbank0_trigger_enable0_re;
	trigger_done_re <= csr_bankarray_csrbank0_trigger_done_re;
	if (csr_bankarray_csrbank0_trigger_mem_mask6_re) begin
		trigger_mem_mask_storage[203:192] <= csr_bankarray_csrbank0_trigger_mem_mask6_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_mask5_re) begin
		trigger_mem_mask_storage[191:160] <= csr_bankarray_csrbank0_trigger_mem_mask5_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_mask4_re) begin
		trigger_mem_mask_storage[159:128] <= csr_bankarray_csrbank0_trigger_mem_mask4_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_mask3_re) begin
		trigger_mem_mask_storage[127:96] <= csr_bankarray_csrbank0_trigger_mem_mask3_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_mask2_re) begin
		trigger_mem_mask_storage[95:64] <= csr_bankarray_csrbank0_trigger_mem_mask2_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_mask1_re) begin
		trigger_mem_mask_storage[63:32] <= csr_bankarray_csrbank0_trigger_mem_mask1_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_mask0_re) begin
		trigger_mem_mask_storage[31:0] <= csr_bankarray_csrbank0_trigger_mem_mask0_r;
	end
	trigger_mem_mask_re <= csr_bankarray_csrbank0_trigger_mem_mask0_re;
	if (csr_bankarray_csrbank0_trigger_mem_value6_re) begin
		trigger_mem_value_storage[203:192] <= csr_bankarray_csrbank0_trigger_mem_value6_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_value5_re) begin
		trigger_mem_value_storage[191:160] <= csr_bankarray_csrbank0_trigger_mem_value5_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_value4_re) begin
		trigger_mem_value_storage[159:128] <= csr_bankarray_csrbank0_trigger_mem_value4_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_value3_re) begin
		trigger_mem_value_storage[127:96] <= csr_bankarray_csrbank0_trigger_mem_value3_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_value2_re) begin
		trigger_mem_value_storage[95:64] <= csr_bankarray_csrbank0_trigger_mem_value2_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_value1_re) begin
		trigger_mem_value_storage[63:32] <= csr_bankarray_csrbank0_trigger_mem_value1_r;
	end
	if (csr_bankarray_csrbank0_trigger_mem_value0_re) begin
		trigger_mem_value_storage[31:0] <= csr_bankarray_csrbank0_trigger_mem_value0_r;
	end
	trigger_mem_value_re <= csr_bankarray_csrbank0_trigger_mem_value0_re;
	trigger_mem_full_re <= csr_bankarray_csrbank0_trigger_mem_full_re;
	if (csr_bankarray_csrbank0_subsampler_value0_re) begin
		subsampler_value_storage[15:0] <= csr_bankarray_csrbank0_subsampler_value0_r;
	end
	subsampler_value_re <= csr_bankarray_csrbank0_subsampler_value0_re;
	if (csr_bankarray_csrbank0_storage_enable0_re) begin
		storage_enable_storage <= csr_bankarray_csrbank0_storage_enable0_r;
	end
	storage_enable_re <= csr_bankarray_csrbank0_storage_enable0_re;
	storage_done_re <= csr_bankarray_csrbank0_storage_done_re;
	if (csr_bankarray_csrbank0_storage_length0_re) begin
		storage_length_storage[9:0] <= csr_bankarray_csrbank0_storage_length0_r;
	end
	storage_length_re <= csr_bankarray_csrbank0_storage_length0_re;
	if (csr_bankarray_csrbank0_storage_offset0_re) begin
		storage_offset_storage[9:0] <= csr_bankarray_csrbank0_storage_offset0_r;
	end
	storage_offset_re <= csr_bankarray_csrbank0_storage_offset0_re;
	storage_mem_level_re <= csr_bankarray_csrbank0_storage_mem_level_re;
	storage_mem_data_re <= csr_bankarray_csrbank0_storage_mem_data_re;
	csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank1_sel) begin
		case (csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_reset0_w;
			end
			1'd1: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scratch0_w;
			end
			2'd2: begin
				csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_bus_errors_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank1_reset0_re) begin
		reset_storage[1:0] <= csr_bankarray_csrbank1_reset0_r;
	end
	reset_re <= csr_bankarray_csrbank1_reset0_re;
	if (csr_bankarray_csrbank1_scratch0_re) begin
		scratch_storage[31:0] <= csr_bankarray_csrbank1_scratch0_r;
	end
	scratch_re <= csr_bankarray_csrbank1_scratch0_re;
	bus_errors_re <= csr_bankarray_csrbank1_bus_errors_re;
	csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank2_sel) begin
		case (csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_oe0_w;
			end
			1'd1: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_in_w;
			end
			2'd2: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_out0_w;
			end
			2'd3: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_mode0_w;
			end
			3'd4: begin
				csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_edge0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank2_oe0_re) begin
		oe_storage[31:0] <= csr_bankarray_csrbank2_oe0_r;
	end
	oe_re <= csr_bankarray_csrbank2_oe0_re;
	in_re <= csr_bankarray_csrbank2_in_re;
	if (csr_bankarray_csrbank2_out0_re) begin
		out_storage[31:0] <= csr_bankarray_csrbank2_out0_r;
	end
	out_re <= csr_bankarray_csrbank2_out0_re;
	if (csr_bankarray_csrbank2_mode0_re) begin
		mode_storage[31:0] <= csr_bankarray_csrbank2_mode0_r;
	end
	mode_re <= csr_bankarray_csrbank2_mode0_re;
	if (csr_bankarray_csrbank2_edge0_re) begin
		edge_storage[31:0] <= csr_bankarray_csrbank2_edge0_r;
	end
	edge_re <= csr_bankarray_csrbank2_edge0_re;
	csr_bankarray_sel_r <= csr_bankarray_sel;
	csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank3_sel) begin
		case (csr_bankarray_interface3_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface3_bank_bus_dat_r <= finish_w;
			end
		endcase
	end
	csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank4_sel) begin
		case (csr_bankarray_interface4_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_marker0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank4_marker0_re) begin
		sim_marker_storage[7:0] <= csr_bankarray_csrbank4_marker0_r;
	end
	sim_marker_re <= csr_bankarray_csrbank4_marker0_re;
	csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank5_sel) begin
		case (csr_bankarray_interface5_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_enable0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank5_enable0_re) begin
		sim_trace_storage <= csr_bankarray_csrbank5_enable0_r;
	end
	sim_trace_re <= csr_bankarray_csrbank5_enable0_re;
	csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank6_sel) begin
		case (csr_bankarray_interface6_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_load0_w;
			end
			1'd1: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_reload0_w;
			end
			2'd2: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_en0_w;
			end
			2'd3: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_update_value0_w;
			end
			3'd4: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_value_w;
			end
			3'd5: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_status_w;
			end
			3'd6: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_pending_w;
			end
			3'd7: begin
				csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_enable0_w;
			end
		endcase
	end
	if (csr_bankarray_csrbank6_load0_re) begin
		timer_load_storage[31:0] <= csr_bankarray_csrbank6_load0_r;
	end
	timer_load_re <= csr_bankarray_csrbank6_load0_re;
	if (csr_bankarray_csrbank6_reload0_re) begin
		timer_reload_storage[31:0] <= csr_bankarray_csrbank6_reload0_r;
	end
	timer_reload_re <= csr_bankarray_csrbank6_reload0_re;
	if (csr_bankarray_csrbank6_en0_re) begin
		timer_en_storage <= csr_bankarray_csrbank6_en0_r;
	end
	timer_en_re <= csr_bankarray_csrbank6_en0_re;
	if (csr_bankarray_csrbank6_update_value0_re) begin
		timer_update_value_storage <= csr_bankarray_csrbank6_update_value0_r;
	end
	timer_update_value_re <= csr_bankarray_csrbank6_update_value0_re;
	timer_value_re <= csr_bankarray_csrbank6_value_re;
	timer_status_re <= csr_bankarray_csrbank6_ev_status_re;
	if (csr_bankarray_csrbank6_ev_pending_re) begin
		timer_pending_r <= csr_bankarray_csrbank6_ev_pending_r;
	end
	timer_pending_re <= csr_bankarray_csrbank6_ev_pending_re;
	if (csr_bankarray_csrbank6_ev_enable0_re) begin
		timer_enable_storage <= csr_bankarray_csrbank6_ev_enable0_r;
	end
	timer_enable_re <= csr_bankarray_csrbank6_ev_enable0_re;
	csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
	if (csr_bankarray_csrbank7_sel) begin
		case (csr_bankarray_interface7_bank_bus_adr[8:0])
			1'd0: begin
				csr_bankarray_interface7_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_txfull_w;
			end
			2'd2: begin
				csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_rxempty_w;
			end
			2'd3: begin
				csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_ev_status_w;
			end
			3'd4: begin
				csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_ev_pending_w;
			end
			3'd5: begin
				csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_ev_enable0_w;
			end
			3'd6: begin
				csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_txempty_w;
			end
			3'd7: begin
				csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= csr_bankarray_csrbank7_txfull_re;
	uart_rxempty_re <= csr_bankarray_csrbank7_rxempty_re;
	uart_status_re <= csr_bankarray_csrbank7_ev_status_re;
	if (csr_bankarray_csrbank7_ev_pending_re) begin
		uart_pending_r[1:0] <= csr_bankarray_csrbank7_ev_pending_r;
	end
	uart_pending_re <= csr_bankarray_csrbank7_ev_pending_re;
	if (csr_bankarray_csrbank7_ev_enable0_re) begin
		uart_enable_storage[1:0] <= csr_bankarray_csrbank7_ev_enable0_r;
	end
	uart_enable_re <= csr_bankarray_csrbank7_ev_enable0_re;
	uart_txempty_re <= csr_bankarray_csrbank7_txempty_re;
	uart_rxfull_re <= csr_bankarray_csrbank7_rxfull_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_trigger_d <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_trigger_d <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		oe_storage <= 32'd0;
		oe_re <= 1'd0;
		in_re <= 1'd0;
		out_storage <= 32'd0;
		out_re <= 1'd0;
		mode_storage <= 32'd0;
		mode_re <= 1'd0;
		edge_storage <= 32'd0;
		edge_re <= 1'd0;
		in_pads_n_d0 <= 1'd0;
		eventsourceprocess0_pending <= 1'd0;
		eventsourceprocess0_trigger_d <= 1'd0;
		in_pads_n_d1 <= 1'd0;
		eventsourceprocess1_pending <= 1'd0;
		eventsourceprocess1_trigger_d <= 1'd0;
		in_pads_n_d2 <= 1'd0;
		eventsourceprocess2_pending <= 1'd0;
		eventsourceprocess2_trigger_d <= 1'd0;
		in_pads_n_d3 <= 1'd0;
		eventsourceprocess3_pending <= 1'd0;
		eventsourceprocess3_trigger_d <= 1'd0;
		in_pads_n_d4 <= 1'd0;
		eventsourceprocess4_pending <= 1'd0;
		eventsourceprocess4_trigger_d <= 1'd0;
		in_pads_n_d5 <= 1'd0;
		eventsourceprocess5_pending <= 1'd0;
		eventsourceprocess5_trigger_d <= 1'd0;
		in_pads_n_d6 <= 1'd0;
		eventsourceprocess6_pending <= 1'd0;
		eventsourceprocess6_trigger_d <= 1'd0;
		in_pads_n_d7 <= 1'd0;
		eventsourceprocess7_pending <= 1'd0;
		eventsourceprocess7_trigger_d <= 1'd0;
		in_pads_n_d8 <= 1'd0;
		eventsourceprocess8_pending <= 1'd0;
		eventsourceprocess8_trigger_d <= 1'd0;
		in_pads_n_d9 <= 1'd0;
		eventsourceprocess9_pending <= 1'd0;
		eventsourceprocess9_trigger_d <= 1'd0;
		in_pads_n_d10 <= 1'd0;
		eventsourceprocess10_pending <= 1'd0;
		eventsourceprocess10_trigger_d <= 1'd0;
		in_pads_n_d11 <= 1'd0;
		eventsourceprocess11_pending <= 1'd0;
		eventsourceprocess11_trigger_d <= 1'd0;
		in_pads_n_d12 <= 1'd0;
		eventsourceprocess12_pending <= 1'd0;
		eventsourceprocess12_trigger_d <= 1'd0;
		in_pads_n_d13 <= 1'd0;
		eventsourceprocess13_pending <= 1'd0;
		eventsourceprocess13_trigger_d <= 1'd0;
		in_pads_n_d14 <= 1'd0;
		eventsourceprocess14_pending <= 1'd0;
		eventsourceprocess14_trigger_d <= 1'd0;
		in_pads_n_d15 <= 1'd0;
		eventsourceprocess15_pending <= 1'd0;
		eventsourceprocess15_trigger_d <= 1'd0;
		in_pads_n_d16 <= 1'd0;
		eventsourceprocess16_pending <= 1'd0;
		eventsourceprocess16_trigger_d <= 1'd0;
		in_pads_n_d17 <= 1'd0;
		eventsourceprocess17_pending <= 1'd0;
		eventsourceprocess17_trigger_d <= 1'd0;
		in_pads_n_d18 <= 1'd0;
		eventsourceprocess18_pending <= 1'd0;
		eventsourceprocess18_trigger_d <= 1'd0;
		in_pads_n_d19 <= 1'd0;
		eventsourceprocess19_pending <= 1'd0;
		eventsourceprocess19_trigger_d <= 1'd0;
		in_pads_n_d20 <= 1'd0;
		eventsourceprocess20_pending <= 1'd0;
		eventsourceprocess20_trigger_d <= 1'd0;
		in_pads_n_d21 <= 1'd0;
		eventsourceprocess21_pending <= 1'd0;
		eventsourceprocess21_trigger_d <= 1'd0;
		in_pads_n_d22 <= 1'd0;
		eventsourceprocess22_pending <= 1'd0;
		eventsourceprocess22_trigger_d <= 1'd0;
		in_pads_n_d23 <= 1'd0;
		eventsourceprocess23_pending <= 1'd0;
		eventsourceprocess23_trigger_d <= 1'd0;
		in_pads_n_d24 <= 1'd0;
		eventsourceprocess24_pending <= 1'd0;
		eventsourceprocess24_trigger_d <= 1'd0;
		in_pads_n_d25 <= 1'd0;
		eventsourceprocess25_pending <= 1'd0;
		eventsourceprocess25_trigger_d <= 1'd0;
		in_pads_n_d26 <= 1'd0;
		eventsourceprocess26_pending <= 1'd0;
		eventsourceprocess26_trigger_d <= 1'd0;
		in_pads_n_d27 <= 1'd0;
		eventsourceprocess27_pending <= 1'd0;
		eventsourceprocess27_trigger_d <= 1'd0;
		in_pads_n_d28 <= 1'd0;
		eventsourceprocess28_pending <= 1'd0;
		eventsourceprocess28_trigger_d <= 1'd0;
		in_pads_n_d29 <= 1'd0;
		eventsourceprocess29_pending <= 1'd0;
		eventsourceprocess29_trigger_d <= 1'd0;
		in_pads_n_d30 <= 1'd0;
		eventsourceprocess30_pending <= 1'd0;
		eventsourceprocess30_trigger_d <= 1'd0;
		in_pads_n_d31 <= 1'd0;
		eventsourceprocess31_pending <= 1'd0;
		eventsourceprocess31_trigger_d <= 1'd0;
		sim_trace_storage <= 1'd0;
		sim_trace_re <= 1'd0;
		sim_marker_storage <= 8'd0;
		sim_marker_re <= 1'd0;
		mux_value_storage <= 1'd0;
		mux_value_re <= 1'd0;
		trigger_enable_storage <= 1'd0;
		trigger_enable_re <= 1'd0;
		trigger_done_re <= 1'd0;
		trigger_mem_mask_storage <= 204'd0;
		trigger_mem_mask_re <= 1'd0;
		trigger_mem_value_storage <= 204'd0;
		trigger_mem_value_re <= 1'd0;
		trigger_mem_full_re <= 1'd0;
		trigger_mem_graycounter0_q <= 5'd0;
		trigger_mem_graycounter0_q_binary <= 5'd0;
		subsampler_value_storage <= 16'd0;
		subsampler_value_re <= 1'd0;
		storage_enable_storage <= 1'd0;
		storage_enable_re <= 1'd0;
		storage_done_re <= 1'd0;
		storage_length_storage <= 10'd0;
		storage_length_re <= 1'd0;
		storage_offset_storage <= 10'd0;
		storage_offset_re <= 1'd0;
		storage_mem_level_re <= 1'd0;
		storage_mem_data_re <= 1'd0;
		storage_cdc_graycounter1_q <= 3'd0;
		storage_cdc_graycounter1_q_binary <= 3'd0;
		storage_converter_mux <= 3'd0;
		grant <= 1'd0;
		slave_sel_r <= 4'd0;
		count <= 20'd1000000;
		csr_bankarray_sel_r <= 1'd0;
		simsoc_wishbone2csr_state <= 1'd0;
	end
	multiregimpl0_regs0 <= gpio_i[0];
	multiregimpl0_regs1 <= multiregimpl0_regs0;
	multiregimpl1_regs0 <= gpio_i[1];
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= gpio_i[2];
	multiregimpl2_regs1 <= multiregimpl2_regs0;
	multiregimpl3_regs0 <= gpio_i[3];
	multiregimpl3_regs1 <= multiregimpl3_regs0;
	multiregimpl4_regs0 <= gpio_i[4];
	multiregimpl4_regs1 <= multiregimpl4_regs0;
	multiregimpl5_regs0 <= gpio_i[5];
	multiregimpl5_regs1 <= multiregimpl5_regs0;
	multiregimpl6_regs0 <= gpio_i[6];
	multiregimpl6_regs1 <= multiregimpl6_regs0;
	multiregimpl7_regs0 <= gpio_i[7];
	multiregimpl7_regs1 <= multiregimpl7_regs0;
	multiregimpl8_regs0 <= gpio_i[8];
	multiregimpl8_regs1 <= multiregimpl8_regs0;
	multiregimpl9_regs0 <= gpio_i[9];
	multiregimpl9_regs1 <= multiregimpl9_regs0;
	multiregimpl10_regs0 <= gpio_i[10];
	multiregimpl10_regs1 <= multiregimpl10_regs0;
	multiregimpl11_regs0 <= gpio_i[11];
	multiregimpl11_regs1 <= multiregimpl11_regs0;
	multiregimpl12_regs0 <= gpio_i[12];
	multiregimpl12_regs1 <= multiregimpl12_regs0;
	multiregimpl13_regs0 <= gpio_i[13];
	multiregimpl13_regs1 <= multiregimpl13_regs0;
	multiregimpl14_regs0 <= gpio_i[14];
	multiregimpl14_regs1 <= multiregimpl14_regs0;
	multiregimpl15_regs0 <= gpio_i[15];
	multiregimpl15_regs1 <= multiregimpl15_regs0;
	multiregimpl16_regs0 <= gpio_i[16];
	multiregimpl16_regs1 <= multiregimpl16_regs0;
	multiregimpl17_regs0 <= gpio_i[17];
	multiregimpl17_regs1 <= multiregimpl17_regs0;
	multiregimpl18_regs0 <= gpio_i[18];
	multiregimpl18_regs1 <= multiregimpl18_regs0;
	multiregimpl19_regs0 <= gpio_i[19];
	multiregimpl19_regs1 <= multiregimpl19_regs0;
	multiregimpl20_regs0 <= gpio_i[20];
	multiregimpl20_regs1 <= multiregimpl20_regs0;
	multiregimpl21_regs0 <= gpio_i[21];
	multiregimpl21_regs1 <= multiregimpl21_regs0;
	multiregimpl22_regs0 <= gpio_i[22];
	multiregimpl22_regs1 <= multiregimpl22_regs0;
	multiregimpl23_regs0 <= gpio_i[23];
	multiregimpl23_regs1 <= multiregimpl23_regs0;
	multiregimpl24_regs0 <= gpio_i[24];
	multiregimpl24_regs1 <= multiregimpl24_regs0;
	multiregimpl25_regs0 <= gpio_i[25];
	multiregimpl25_regs1 <= multiregimpl25_regs0;
	multiregimpl26_regs0 <= gpio_i[26];
	multiregimpl26_regs1 <= multiregimpl26_regs0;
	multiregimpl27_regs0 <= gpio_i[27];
	multiregimpl27_regs1 <= multiregimpl27_regs0;
	multiregimpl28_regs0 <= gpio_i[28];
	multiregimpl28_regs1 <= multiregimpl28_regs0;
	multiregimpl29_regs0 <= gpio_i[29];
	multiregimpl29_regs1 <= multiregimpl29_regs0;
	multiregimpl30_regs0 <= gpio_i[30];
	multiregimpl30_regs1 <= multiregimpl30_regs0;
	multiregimpl31_regs0 <= gpio_i[31];
	multiregimpl31_regs1 <= multiregimpl31_regs0;
	multiregimpl34_regs0 <= trigger_done0;
	multiregimpl34_regs1 <= multiregimpl34_regs0;
	multiregimpl36_regs0 <= trigger_mem_graycounter1_q;
	multiregimpl36_regs1 <= multiregimpl36_regs0;
	multiregimpl41_regs0 <= storage_done0;
	multiregimpl41_regs1 <= multiregimpl41_regs0;
	multiregimpl42_regs0 <= storage_level;
	multiregimpl42_regs1 <= multiregimpl42_regs0;
	multiregimpl43_regs0 <= storage_cdc_graycounter0_q;
	multiregimpl43_regs1 <= multiregimpl43_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 6061-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6060];
initial begin
	$readmemh("sim_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk_1) begin
	rom_dat0 <= rom[adr];
end
assign dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sim_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk_1) begin
	if (sram0_we[0])
		sram[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		sram[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		sram[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		sram[sram0_adr][31:24] <= sram0_dat_w[31:24];
	sram_adr0 <= sram0_adr;
end
assign sram0_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory main_ram: 16384-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] main_ram[0:16383];
initial begin
	$readmemh("sim_main_ram.init", main_ram);
end
reg [13:0] main_ram_adr0;
always @(posedge sys_clk_1) begin
	if (sram1_we[0])
		main_ram[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		main_ram[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		main_ram[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		main_ram[sram1_adr][31:24] <= sram1_dat_w[31:24];
	main_ram_adr0 <= sram1_adr;
end
assign sram1_dat_r = main_ram[main_ram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:36];
initial begin
	$readmemh("sim_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk_1) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 410-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 410 
// Port 1 | Read: Sync  | Write: ---- | 
reg [409:0] storage_2[0:15];
reg [409:0] storage_2_dat0;
reg [409:0] storage_2_dat1;
always @(posedge sys_clk_1) begin
	if (trigger_mem_wrport_we)
		storage_2[trigger_mem_wrport_adr] <= trigger_mem_wrport_dat_w;
	storage_2_dat0 <= storage_2[trigger_mem_wrport_adr];
end
always @(posedge scope_clk) begin
	storage_2_dat1 <= storage_2[trigger_mem_rdport_adr];
end
assign trigger_mem_wrport_dat_r = storage_2_dat0;
assign trigger_mem_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Memory storage_3: 512-words x 206-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 206 
// Port 1 | Read: Sync  | Write: ---- | 
reg [205:0] storage_3[0:511];
reg [205:0] storage_3_dat0;
reg [205:0] storage_3_dat1;
always @(posedge scope_clk) begin
	if (storage_mem_wrport_we)
		storage_3[storage_mem_wrport_adr] <= storage_mem_wrport_dat_w;
	storage_3_dat0 <= storage_3[storage_mem_wrport_adr];
end
always @(posedge scope_clk) begin
	if (storage_mem_rdport_re)
		storage_3_dat1 <= storage_3[storage_mem_rdport_adr];
end
assign storage_mem_wrport_dat_r = storage_3_dat0;
assign storage_mem_rdport_dat_r = storage_3_dat1;


//------------------------------------------------------------------------------
// Memory storage_4: 4-words x 206-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 206 
// Port 1 | Read: Sync  | Write: ---- | 
reg [205:0] storage_4[0:3];
reg [205:0] storage_4_dat0;
reg [205:0] storage_4_dat1;
always @(posedge scope_clk) begin
	if (storage_cdc_wrport_we)
		storage_4[storage_cdc_wrport_adr] <= storage_cdc_wrport_dat_w;
	storage_4_dat0 <= storage_4[storage_cdc_wrport_adr];
end
always @(posedge sys_clk_1) begin
	storage_4_dat1 <= storage_4[storage_cdc_rdport_adr];
end
assign storage_cdc_wrport_dat_r = storage_4_dat0;
assign storage_cdc_rdport_dat_r = storage_4_dat1;


VexRiscv VexRiscv(
	.clk(sys_clk_1),
	.dBusWishbone_ACK(dbus_ack),
	.dBusWishbone_DAT_MISO(dbus_dat_r),
	.dBusWishbone_ERR(dbus_err),
	.externalInterruptArray(interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(ibus_ack),
	.iBusWishbone_DAT_MISO(ibus_dat_r),
	.iBusWishbone_ERR(ibus_err),
	.reset((sys_rst | reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(dbus_adr),
	.dBusWishbone_BTE(dbus_bte),
	.dBusWishbone_CTI(dbus_cti),
	.dBusWishbone_CYC(dbus_cyc),
	.dBusWishbone_DAT_MOSI(dbus_dat_w),
	.dBusWishbone_SEL(dbus_sel),
	.dBusWishbone_STB(dbus_stb),
	.dBusWishbone_WE(dbus_we),
	.iBusWishbone_ADR(ibus_adr),
	.iBusWishbone_BTE(ibus_bte),
	.iBusWishbone_CTI(ibus_cti),
	.iBusWishbone_CYC(ibus_cyc),
	.iBusWishbone_DAT_MOSI(ibus_dat_w),
	.iBusWishbone_SEL(ibus_sel),
	.iBusWishbone_STB(ibus_stb),
	.iBusWishbone_WE(ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-08-15 10:04:27.
//------------------------------------------------------------------------------
